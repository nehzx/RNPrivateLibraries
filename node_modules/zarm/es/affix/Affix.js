import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

import React, { PureComponent, createRef } from 'react';
import classnames from 'classnames';
import Events from '../utils/events';
import { canUseDOM } from '../utils/dom';
import throttle from '../utils/throttle';
var DEFAULT_SCROLL_CONTAINER = canUseDOM ? window : undefined;

var Affix = /*#__PURE__*/function (_PureComponent) {
  _inherits(Affix, _PureComponent);

  var _super = _createSuper(Affix);

  function Affix() {
    var _this;

    _classCallCheck(this, Affix);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.savePlaceholderNode = /*#__PURE__*/createRef();
    _this.saveFixedNode = /*#__PURE__*/createRef();
    _this.saveFixedNodeTop = 'offsetBottom' in _this.props ? -10000 : 10000;
    _this.state = {
      affixed: false,
      width: 0,
      height: 0
    };
    _this.onPositionUpdate = throttle(function () {
      var onChange = _this.props.onChange;
      var affixed = _this.state.affixed;
      var target = _this.savePlaceholderNode.current;

      if (!target) {
        return false;
      }

      var _target$getBoundingCl = target === null || target === void 0 ? void 0 : target.getBoundingClientRect(),
          top = _target$getBoundingCl.top,
          width = _target$getBoundingCl.width,
          height = _target$getBoundingCl.height;

      _this.saveFixedNodeTop = top;
      var currentAffixed = _this.affixed;

      if (currentAffixed !== affixed) {
        _this.setState({
          affixed: currentAffixed,
          // use 'auto' when get width or height is 0
          width: width === 0 ? 'auto' : width,
          height: height === 0 ? 'auto' : height
        });

        onChange && onChange(currentAffixed);
      }
    }, 10);
    return _this;
  }

  _createClass(Affix, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this2 = this;

      // wait for ref not null
      var offsetBottom = this.props.offsetBottom;
      setTimeout(function () {
        var container = _this2.container,
            onPositionUpdate = _this2.onPositionUpdate;
        Events.on(container, 'scroll', onPositionUpdate);

        if (typeof offsetBottom !== 'undefined') {
          _this2.onPositionUpdate();
        }
      });
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      var _this3 = this;

      setTimeout(function () {
        var container = _this3.container,
            onPositionUpdate = _this3.onPositionUpdate;
        Events.off(container, 'scroll', onPositionUpdate);
      });
    }
  }, {
    key: "container",
    get: function get() {
      var scrollContainer = this.props.scrollContainer;
      var container = typeof scrollContainer === 'function' ? scrollContainer() : scrollContainer;
      return !container ? window : container;
    }
  }, {
    key: "containerRect",
    get: function get() {
      var container = this.container;

      if (!canUseDOM) {
        return {
          top: 0,
          bottom: 0
        };
      }

      return container !== window ? container.getBoundingClientRect() : {
        top: 0,
        bottom: container.innerHeight,
        width: 0,
        height: 0
      };
    }
  }, {
    key: "affixed",
    get: function get() {
      var containerRect = this.containerRect,
          saveFixedNodeTop = this.saveFixedNodeTop;
      var _this$props = this.props,
          offsetTop = _this$props.offsetTop,
          offsetBottom = _this$props.offsetBottom;

      if (typeof offsetBottom !== 'undefined' && saveFixedNodeTop + offsetBottom >= containerRect.bottom) {
        return true;
      }

      if (typeof offsetBottom === 'undefined' && typeof offsetTop !== 'undefined' && saveFixedNodeTop - offsetTop <= containerRect.top) {
        return true;
      }

      return false;
    }
  }, {
    key: "affixStyle",
    get: function get() {
      var containerRect = this.containerRect;
      var _this$props2 = this.props,
          offsetTop = _this$props2.offsetTop,
          offsetBottom = _this$props2.offsetBottom;
      var _this$state = this.state,
          width = _this$state.width,
          height = _this$state.height;

      if (this.affixed && typeof offsetBottom !== 'undefined') {
        return {
          position: 'fixed',
          bottom: offsetBottom,
          width: width,
          height: height
        };
      }

      if (this.affixed && typeof offsetTop !== 'undefined') {
        return {
          position: 'fixed',
          top: containerRect.top + offsetTop,
          width: width,
          height: height
        };
      }

      return {};
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props3 = this.props,
          prefixCls = _this$props3.prefixCls,
          className = _this$props3.className,
          children = _this$props3.children;
      var cls = classnames(prefixCls, className);

      if (!this.affixed) {
        return /*#__PURE__*/React.createElement("div", {
          ref: this.savePlaceholderNode
        }, children);
      }

      return /*#__PURE__*/React.createElement("div", {
        ref: this.savePlaceholderNode
      }, /*#__PURE__*/React.createElement("div", {
        className: cls,
        ref: this.saveFixedNode,
        style: this.affixStyle
      }, children));
    }
  }]);

  return Affix;
}(PureComponent);

Affix.displayName = 'Affix';
Affix.defaultProps = {
  prefixCls: 'za-affix',
  scrollContainer: DEFAULT_SCROLL_CONTAINER,
  offsetTop: 0
};
export { Affix as default };