import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

import React, { PureComponent } from 'react';
import { createPortal } from 'react-dom';
import classnames from 'classnames';
import Scroller from '../scroller';
import { canUseDOM, scrollTo } from '../utils/dom';

var BackToTop = /*#__PURE__*/function (_PureComponent) {
  _inherits(BackToTop, _PureComponent);

  var _super = _createSuper(BackToTop);

  function BackToTop() {
    var _this;

    _classCallCheck(this, BackToTop);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.state = {
      visible: false
    };
    _this.timer = void 0;
    _this.portalContainer = void 0;
    _this.scroller = void 0;

    _this.onScroll = function (scrollTop) {
      _this.setState({
        visible: scrollTop > _this.props.visibleDistance
      });
    };

    _this.scrollToTop = function (e) {
      var _this$props = _this.props,
          speed = _this$props.speed,
          onClick = _this$props.onClick;

      var _assertThisInitialize = _assertThisInitialized(_this),
          container = _assertThisInitialize.container;

      if (typeof onClick === 'function') {
        onClick(e);
      } // 速度设置为0或者无穷大时，直接到顶


      if (speed === 0 || speed === Infinity) {
        scrollTo(container, 0, 0, 0);
        return;
      }

      var x = _this.props.speed;
      scrollTo(container, 0, 0, _this.scrollTop / (x / 10 * 1000));
    };

    return _this;
  }

  _createClass(BackToTop, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.parent.appendChild(this.getPortalContainer);
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      var scrollContainer = this.props.scrollContainer;

      if (prevProps.scrollContainer !== scrollContainer) {
        this.parent.appendChild(this.portalContainer);
        this.onScroll(this.scrollTop);
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      clearInterval(this.timer);
      this.parent && this.parent.removeChild(this.portalContainer);
    }
  }, {
    key: "parent",
    get: function get() {
      if (!canUseDOM || this.container === window) {
        return document.body;
      }

      return this.container;
    }
  }, {
    key: "container",
    get: function get() {
      return this.scroller ? this.scroller.scrollContainer : window;
    }
  }, {
    key: "scrollTop",
    get: function get() {
      return this.scroller ? this.scroller.scrollTop : 0;
    }
  }, {
    key: "renderPortal",
    get: function get() {
      var _this2 = this;

      var _this$props2 = this.props,
          prefixCls = _this$props2.prefixCls,
          style = _this$props2.style,
          scrollContainer = _this$props2.scrollContainer,
          children = _this$props2.children;
      var visible = this.state.visible;

      var containerStyle = _objectSpread({
        display: !visible ? 'none' : 'inline',
        position: this.container !== window ? 'absolute' : 'fixed',
        bottom: 50,
        right: 50
      }, style);

      return /*#__PURE__*/createPortal( /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("div", {
        className: prefixCls,
        style: containerStyle,
        onClick: this.scrollToTop
      }, children), /*#__PURE__*/React.createElement(Scroller, {
        ref: function ref(ele) {
          _this2.scroller = ele;
        },
        container: scrollContainer,
        onScroll: this.onScroll
      })), this.getPortalContainer);
    }
  }, {
    key: "getPortalContainer",
    get: function get() {
      var _this$props3 = this.props,
          prefixCls = _this$props3.prefixCls,
          className = _this$props3.className;

      if (!this.portalContainer) {
        var container = document.createElement('div');
        container.className = classnames("".concat(prefixCls, "-container"), className);
        this.portalContainer = container;
      }

      return this.portalContainer;
    }
  }, {
    key: "render",
    value: function render() {
      if (!canUseDOM) {
        return null;
      }

      return this.renderPortal;
    }
  }]);

  return BackToTop;
}(PureComponent);

BackToTop.displayName = 'BackToTop';
BackToTop.defaultProps = {
  prefixCls: 'za-back-to-top',
  speed: 100,
  visibleDistance: 400,
  scrollContainer: canUseDOM ? window : undefined
};
export { BackToTop as default };