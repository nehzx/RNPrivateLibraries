import _extends from "@babel/runtime/helpers/extends";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

import React, { PureComponent } from 'react';
import classnames from 'classnames';

var Badge = /*#__PURE__*/function (_PureComponent) {
  _inherits(Badge, _PureComponent);

  var _super = _createSuper(Badge);

  function Badge() {
    _classCallCheck(this, Badge);

    return _super.apply(this, arguments);
  }

  _createClass(Badge, [{
    key: "render",
    value: function render() {
      var _classnames;

      var _this$props = this.props,
          prefixCls = _this$props.prefixCls,
          className = _this$props.className,
          theme = _this$props.theme,
          shape = _this$props.shape,
          text = _this$props.text,
          children = _this$props.children,
          others = _objectWithoutProperties(_this$props, ["prefixCls", "className", "theme", "shape", "text", "children"]);

      var cls = classnames(prefixCls, className, (_classnames = {}, _defineProperty(_classnames, "".concat(prefixCls, "--").concat(theme), !!theme), _defineProperty(_classnames, "".concat(prefixCls, "--").concat(shape), shape), _defineProperty(_classnames, "".concat(prefixCls, "--sup"), !!children), _classnames));
      return /*#__PURE__*/React.createElement("span", {
        className: cls
      }, children, /*#__PURE__*/React.createElement("sup", _extends({
        className: "".concat(prefixCls, "__content")
      }, others), shape !== 'dot' && text));
    }
  }]);

  return Badge;
}(PureComponent);

Badge.defaultProps = {
  prefixCls: 'za-badge',
  shape: 'dot',
  theme: 'danger'
};
export { Badge as default };