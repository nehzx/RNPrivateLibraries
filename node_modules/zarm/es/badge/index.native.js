import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

import React, { PureComponent } from 'react';
import { StyleSheet, View, Text } from 'react-native';
import badgeStyle from './style/index.native';
var badgeStyles = StyleSheet.create(badgeStyle);

var Badge = /*#__PURE__*/function (_PureComponent) {
  _inherits(Badge, _PureComponent);

  var _super = _createSuper(Badge);

  function Badge() {
    var _this;

    _classCallCheck(this, Badge);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.state = {
      dotWidth: 0
    };

    _this.layout = function (e) {
      var dotWidth = _this.props.shape === 'dot' || _this.props.shape === undefined ? -(parseInt(e.layout.width, 10) - 4) : -(parseInt(e.layout.width, 10) - 8);

      _this.setState({
        dotWidth: dotWidth
      });
    };

    return _this;
  }

  _createClass(Badge, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props = this.props,
          theme = _this$props.theme,
          shape = _this$props.shape,
          text = _this$props.text,
          style = _this$props.style,
          children = _this$props.children,
          styles = _this$props.styles;
      var dotWidth = this.state.dotWidth;
      var bagdeWrapper = [styles.textStyle, style];
      var badgeText = [styles.badgeText, styles["".concat(shape, "Text")], shape === undefined && styles.dotText];
      var iconStyle = [styles["".concat(shape, "Badge")], styles["".concat(theme, "Bagde")], !!children && [badgeStyles.sup], shape === undefined && styles.dotBadge];
      return /*#__PURE__*/React.createElement(View, {
        style: bagdeWrapper
      }, children, /*#__PURE__*/React.createElement(View, {
        onLayout: function onLayout(_ref) {
          var e = _ref.nativeEvent;
          return _this2.layout(e);
        },
        style: [iconStyle, {
          right: children ? dotWidth : 0
        }]
      }, /*#__PURE__*/React.createElement(Text, {
        style: badgeText
      }, text)));
    }
  }]);

  return Badge;
}(PureComponent);

Badge.defaultProps = {
  theme: 'danger',
  styles: badgeStyles
};
export { Badge as default };