import _extends from "@babel/runtime/helpers/extends";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

import React, { PureComponent, isValidElement } from 'react';
import { StyleSheet, Text, View, TouchableHighlight, TouchableOpacity, ActivityIndicator } from 'react-native';
import buttonStyle from './style/index.native';
var buttonStyles = StyleSheet.create(buttonStyle);

var Button = /*#__PURE__*/function (_PureComponent) {
  _inherits(Button, _PureComponent);

  var _super = _createSuper(Button);

  function Button(props) {
    var _this;

    _classCallCheck(this, Button);

    _this = _super.call(this, props);

    _this.onPressIn = function () {
      _this.setState({
        isActive: true
      });
    };

    _this.onPressOut = function () {
      _this.setState({
        isActive: false
      });
    };

    _this.state = {
      isActive: false
    };
    return _this;
  }

  _createClass(Button, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          theme = _this$props.theme,
          size = _this$props.size,
          shape = _this$props.shape,
          ghost = _this$props.ghost,
          disabled = _this$props.disabled,
          loading = _this$props.loading,
          icon = _this$props.icon,
          style = _this$props.style,
          styles = _this$props.styles,
          onClick = _this$props.onClick,
          children = _this$props.children,
          others = _objectWithoutProperties(_this$props, ["theme", "size", "shape", "ghost", "disabled", "loading", "icon", "style", "styles", "onClick", "children"]);

      var isActive = this.state.isActive;
      var wrapperStyle = [styles.wrapperStyle, styles["".concat(size, "Wrapper")], styles["".concat(theme, "Wrapper")], styles["".concat(shape, "Wrapper")], isActive && styles["".concat(theme, "ActiveWrapper")], ghost && styles.ghostWrapper, ghost && styles["".concat(theme, "GhostWrapper")], ghost && isActive && styles["".concat(theme, "GhostActiveWrapper")], disabled && styles.disabledWrapper, disabled && ghost && styles.disabledGhostWrapper, shape === 'circle' && styles["".concat(size, "CircleWrapper")], style];
      var underlayColor = StyleSheet.flatten(styles["".concat(theme, "ActiveWrapper")]).backgroundColor;
      var textStyle = [styles.textStyle, styles["".concat(size, "Text")], styles["".concat(theme, "Text")], isActive && styles["".concat(theme, "ActiveText")], disabled && styles["".concat(theme, "DisabledText")], ghost && styles["".concat(theme, "GhostText")], isActive && ghost && styles["".concat(theme, "GhostActiveText")], disabled && ghost && styles.disabledGhostText];
      var iconStyle = [styles.iconStyle, styles["".concat(size, "Icon")]];
      var iconRender = loading ? /*#__PURE__*/React.createElement(ActivityIndicator, {
        animating: true,
        style: iconStyle,
        size: "small"
      }) : icon;
      var contentRender = /*#__PURE__*/React.createElement(View, {
        style: styles.container
      }, iconRender, /*#__PURE__*/isValidElement(children) ? children : /*#__PURE__*/React.createElement(Text, {
        style: textStyle
      }, children));

      var wrapperProps = _objectSpread({
        activeOpacity: 1,
        style: wrapperStyle,
        onPress: onClick,
        onPressIn: this.onPressIn,
        onPressOut: this.onPressOut,
        disabled: disabled
      }, others);

      return ghost ? /*#__PURE__*/React.createElement(TouchableOpacity, wrapperProps, contentRender) : /*#__PURE__*/React.createElement(TouchableHighlight, _extends({}, wrapperProps, {
        underlayColor: underlayColor
      }), contentRender);
    }
  }]);

  return Button;
}(PureComponent);

Button.defaultProps = {
  theme: 'default',
  size: 'md',
  shape: 'radius',
  block: false,
  ghost: false,
  disabled: false,
  loading: false,
  styles: buttonStyles
};
export { Button as default };