import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

/* eslint-disable operator-linebreak */
import React, { PureComponent } from 'react';
import classnames from 'classnames';
import CalendarMonthView from './Month';
import parseState from './utils/parseState';
import DateTool from '../utils/date';

var CalendarView = /*#__PURE__*/function (_PureComponent) {
  _inherits(CalendarView, _PureComponent);

  var _super = _createSuper(CalendarView);

  // 当前月份dom数据缓存
  function CalendarView(props) {
    var _this;

    _classCallCheck(this, CalendarView);

    _this = _super.call(this, props);
    _this.nodes = void 0;
    _this.state = _objectSpread(_objectSpread({}, parseState(_this.props)), {}, {
      step: 1
    });

    _this.handleDateClick = function (date) {
      var _this$state = _this.state,
          step = _this$state.step,
          steps = _this$state.steps,
          value = _this$state.value;
      var onChange = _this.props.onChange;

      if (step === 1) {
        value.splice(0, value.length);
      }

      value[step - 1] = date;
      value.sort(function (item1, item2) {
        return +item1 - +item2;
      });

      _this.setState({
        value: value,
        step: step >= steps ? 1 : step + 1
      }, function () {
        step >= steps && typeof onChange === 'function' && onChange(value);
      });
    };

    _this.anchor = function () {
      var value = _this.state.value;
      var target = value[0] || new Date();
      var key = "".concat(target.getFullYear(), "-").concat(target.getMonth());
      var node = _this.nodes[key];

      if (node && Object.prototype.toString.call(node.anchor) === '[object Function]') {
        node.anchor();
      }
    };

    _this.renderWeekBar = function () {
      var _this$props = _this.props,
          prefixCls = _this$props.prefixCls,
          locale = _this$props.locale;
      var content = locale.weeks.map(function (week) {
        return /*#__PURE__*/React.createElement("li", {
          key: week,
          className: "".concat(prefixCls, "__bar__item")
        }, week);
      });
      return /*#__PURE__*/React.createElement("ul", {
        className: "".concat(prefixCls, "__bar")
      }, content);
    };

    _this.renderMonth = function (dateMonth) {
      var _this$state2 = _this.state,
          value = _this$state2.value,
          min = _this$state2.min,
          max = _this$state2.max;
      var _this$props2 = _this.props,
          prefixCls = _this$props2.prefixCls,
          dateRender = _this$props2.dateRender,
          disabledDate = _this$props2.disabledDate;
      var key = "".concat(dateMonth.getFullYear(), "-").concat(dateMonth.getMonth());
      return /*#__PURE__*/React.createElement(CalendarMonthView, {
        prefixCls: prefixCls,
        key: key,
        min: min,
        max: max,
        value: value,
        dateMonth: dateMonth,
        dateRender: dateRender,
        disabledDate: disabledDate,
        onDateClick: _this.handleDateClick,
        ref: function ref(n) {
          _this.nodes[key] = n;
        }
      });
    };

    _this.nodes = {};
    return _this;
  }

  _createClass(CalendarView, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.anchor();
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(_prevProps, prevState) {
      var refresh = this.state.refresh;

      if (refresh !== prevState.refresh) {
        this.anchor();
      }
    } // 日期点击事件，注意排序

  }, {
    key: "renderMonths",
    value: // 生成日历内容
    function renderMonths() {
      var _this2 = this;

      var prefixCls = this.props.prefixCls;
      var _this$state3 = this.state,
          startMonth = _this$state3.startMonth,
          max = _this$state3.max;
      var arr = Array.from({
        length: DateTool.getMonthCount(startMonth, max)
      });
      var content = arr.map(function (_item, i) {
        return _this2.renderMonth(DateTool.cloneDate(startMonth, 'm', i));
      });
      return /*#__PURE__*/React.createElement("section", {
        className: "".concat(prefixCls, "__body")
      }, content);
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props3 = this.props,
          prefixCls = _this$props3.prefixCls,
          className = _this$props3.className;
      return /*#__PURE__*/React.createElement("div", {
        className: classnames(prefixCls, className)
      }, this.renderWeekBar(), this.renderMonths());
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(nextProps, prevState) {
      if ('value' in nextProps && nextProps.value !== prevState.prevValue || 'multiple' in nextProps && nextProps.multiple !== prevState.prevMultiple || 'min' in nextProps && nextProps.min !== prevState.prevMin || 'max' in nextProps && nextProps.max !== prevState.prevMax) {
        return _objectSpread(_objectSpread({}, parseState(nextProps)), {}, {
          step: prevState.step ? 1 : prevState.step,
          refresh: !prevState.refresh,
          prevValue: nextProps.value,
          prevMax: nextProps.max,
          prevMin: nextProps.min,
          prevMultiple: nextProps.multiple
        });
      }

      return null;
    }
  }]);

  return CalendarView;
}(PureComponent);

CalendarView.displayName = 'CalendarView';
CalendarView.defaultProps = {
  prefixCls: 'za-calendar',
  multiple: false,
  min: new Date(),
  dateRender: function dateRender(date) {
    return date.getDate();
  },
  disabledDate: function disabledDate() {
    return false;
  }
};
export { CalendarView as default };