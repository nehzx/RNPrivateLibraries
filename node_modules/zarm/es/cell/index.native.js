import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

import React, { PureComponent } from 'react';
import { StyleSheet, View, TouchableHighlight } from 'react-native';
import cellStyle from './style/index.native';
import { RenderWithText } from '../utils/renderWithText.native';
var cellStyles = StyleSheet.create(cellStyle);

var Cell = /*#__PURE__*/function (_PureComponent) {
  _inherits(Cell, _PureComponent);

  var _super = _createSuper(Cell);

  function Cell(props) {
    var _this;

    _classCallCheck(this, Cell);

    _this = _super.call(this, props);

    _this.onPressIn = function () {
      _this.setState({
        isActive: true
      });
    };

    _this.onPressOut = function () {
      _this.setState({
        isActive: false
      });
    };

    _this.state = {
      isActive: false
    };
    return _this;
  }

  _createClass(Cell, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          hasArrow = _this$props.hasArrow,
          icon = _this$props.icon,
          title = _this$props.title,
          description = _this$props.description,
          help = _this$props.help,
          style = _this$props.style,
          styles = _this$props.styles,
          onClick = _this$props.onClick,
          children = _this$props.children,
          others = _objectWithoutProperties(_this$props, ["hasArrow", "icon", "title", "description", "help", "style", "styles", "onClick", "children"]);

      var isActive = this.state.isActive;
      var wrapperStyle = [styles.wrapperStyle, isActive && styles.activeWrapper, style];
      var titleViewStyle = [styles.titleViewStyle, !!children && styles.labelTitleViewStyle];
      var contentStyle = !onClick && wrapperStyle;
      var iconRender = icon && /*#__PURE__*/React.createElement(View, {
        style: styles.iconStyle
      }, icon);
      var arrowRender = hasArrow && /*#__PURE__*/React.createElement(View, {
        style: styles.arrowStyle
      });
      var cellRender = /*#__PURE__*/React.createElement(View, {
        style: wrapperStyle
      }, /*#__PURE__*/React.createElement(View, {
        style: styles.lineContainerStyle
      }, /*#__PURE__*/React.createElement(View, {
        style: styles.lineStyle
      })), /*#__PURE__*/React.createElement(View, {
        style: styles.innerStyle
      }, /*#__PURE__*/React.createElement(View, {
        style: styles.contentStyle
      }, iconRender, /*#__PURE__*/React.createElement(View, {
        style: styles.bodyStyle
      }, /*#__PURE__*/React.createElement(RenderWithText, {
        component: title,
        viewStyle: titleViewStyle,
        textStyle: styles.titleTextStyle
      }), /*#__PURE__*/React.createElement(RenderWithText, {
        component: children,
        viewStyle: styles.childrenViewStyle
      })), /*#__PURE__*/React.createElement(RenderWithText, {
        component: description,
        textStyle: styles.descriptionTextStyle
      }), arrowRender)), /*#__PURE__*/React.createElement(RenderWithText, {
        component: help,
        viewStyle: cellStyles.helpViewStyle
      }));

      var wrapperProps = _objectSpread({
        activeOpacity: 1,
        style: contentStyle,
        onPress: onClick,
        onPressIn: this.onPressIn,
        onPressOut: this.onPressOut
      }, others);

      return onClick ? /*#__PURE__*/React.createElement(TouchableHighlight, wrapperProps, cellRender) : cellRender;
    }
  }]);

  return Cell;
}(PureComponent);

Cell.defaultProps = {
  hasArrow: false,
  styles: cellStyles
};
export { Cell as default };