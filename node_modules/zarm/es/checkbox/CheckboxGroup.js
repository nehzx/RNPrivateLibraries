import _extends from "@babel/runtime/helpers/extends";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

import React, { PureComponent, cloneElement, isValidElement } from 'react';
import classnames from 'classnames';

var getChildChecked = function getChildChecked(children) {
  var checkedValue = [];
  React.Children.map(children, function (element) {
    if ( /*#__PURE__*/React.isValidElement(element) && element.props && element.props.checked) {
      checkedValue.push(element.props.value);
    }
  });
  return checkedValue;
};

var getValue = function getValue(props, defaultValue) {
  if (typeof props.value !== 'undefined') {
    return props.value;
  }

  if (typeof props.defaultValue !== 'undefined') {
    return props.defaultValue;
  }

  if (getChildChecked(props.children).length > 0) {
    return getChildChecked(props.children);
  }

  return defaultValue;
};

var CheckboxGroup = /*#__PURE__*/function (_PureComponent) {
  _inherits(CheckboxGroup, _PureComponent);

  var _super = _createSuper(CheckboxGroup);

  function CheckboxGroup(props) {
    var _this;

    _classCallCheck(this, CheckboxGroup);

    _this = _super.call(this, props);

    _this.onChildChange = function (value) {
      var valueState = _this.state.value;
      var onChange = _this.props.onChange;
      var values = valueState.slice();
      var index = values.indexOf(value);

      if (index < 0) {
        values.push(value);
      } else {
        values.splice(index, 1);
      }

      _this.setState({
        value: values
      });

      typeof onChange === 'function' && onChange(values);
    };

    _this.state = {
      value: getValue(props, [])
    };
    return _this;
  }

  _createClass(CheckboxGroup, [{
    key: "render",
    value: function render() {
      var _this2 = this,
          _classnames;

      var _this$props = this.props,
          prefixCls = _this$props.prefixCls,
          className = _this$props.className,
          size = _this$props.size,
          shape = _this$props.shape,
          type = _this$props.type,
          block = _this$props.block,
          disabled = _this$props.disabled,
          compact = _this$props.compact,
          ghost = _this$props.ghost,
          children = _this$props.children,
          onChange = _this$props.onChange,
          defaultValue = _this$props.defaultValue,
          value = _this$props.value,
          rest = _objectWithoutProperties(_this$props, ["prefixCls", "className", "size", "shape", "type", "block", "disabled", "compact", "ghost", "children", "onChange", "defaultValue", "value"]);

      var valueState = this.state.value;
      var items = React.Children.map(children, function (element, index) {
        if ( /*#__PURE__*/isValidElement(element)) {
          return /*#__PURE__*/cloneElement(element, {
            key: index,
            type: type,
            shape: shape,
            disabled: disabled || element.props.disabled,
            checked: valueState.indexOf(element.props.value) > -1,
            onChange: function onChange(checked) {
              typeof element.props.onChange === 'function' && element.props.onChange(checked);

              _this2.onChildChange(element.props.value);
            }
          });
        }

        return null;
      });
      var cls = classnames(prefixCls, className, (_classnames = {}, _defineProperty(_classnames, "".concat(prefixCls, "--").concat(type), !!type), _defineProperty(_classnames, "".concat(prefixCls, "--").concat(size), !!size), _defineProperty(_classnames, "".concat(prefixCls, "--").concat(shape), !!shape), _defineProperty(_classnames, "".concat(prefixCls, "--block"), block), _defineProperty(_classnames, "".concat(prefixCls, "--disabled"), disabled), _defineProperty(_classnames, "".concat(prefixCls, "--compact"), compact), _defineProperty(_classnames, "".concat(prefixCls, "--ghost"), ghost), _classnames));
      return /*#__PURE__*/React.createElement("div", _extends({
        className: cls
      }, rest), /*#__PURE__*/React.createElement("div", {
        className: "".concat(prefixCls, "__inner")
      }, items));
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(nextProps) {
      if ('value' in nextProps) {
        return {
          value: getValue(nextProps, [])
        };
      }

      return null;
    }
  }]);

  return CheckboxGroup;
}(PureComponent);

CheckboxGroup.displayName = 'CheckboxGroup';
CheckboxGroup.defaultProps = {
  prefixCls: 'za-checkbox-group',
  shape: 'radius',
  block: false,
  disabled: false,
  compact: false,
  ghost: false,
  size: 'xs'
};
export { CheckboxGroup as default };