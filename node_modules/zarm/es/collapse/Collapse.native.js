import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

import React, { Component, Children, cloneElement } from 'react';
import { StyleSheet, View } from 'react-native';
import collapaseStyle from './style/index.native';
import { isArray } from '../utils/validate';
var collapseStyles = StyleSheet.create(collapaseStyle);

var isPropEqual = function isPropEqual(cur, next) {
  if (isArray(next) && isArray(cur)) {
    return next.length === cur.length && next.every(function (key, i) {
      return key === cur[i];
    });
  }

  return cur === next;
};

var getActiveKey = function getActiveKey(props) {
  var activeKey = props.activeKey,
      defaultActiveKey = props.defaultActiveKey,
      multiple = props.multiple;
  var defaultKey = activeKey || activeKey === 0 ? activeKey : defaultActiveKey;

  if (defaultKey || defaultKey === 0) {
    if (isArray(defaultKey)) {
      return !multiple ? [String(defaultKey[0])] : defaultKey.map(function (key) {
        return String(key);
      });
    }

    return [String(defaultKey)];
  }

  return [];
};

var Collapse = /*#__PURE__*/function (_Component) {
  _inherits(Collapse, _Component);

  var _super = _createSuper(Collapse);

  function Collapse(props) {
    var _this;

    _classCallCheck(this, Collapse);

    _this = _super.call(this, props);

    _this.onChange = function (onItemChange, key) {
      var _this$props = _this.props,
          multiple = _this$props.multiple,
          onChange = _this$props.onChange;
      var activeKey = _this.state.activeKey;
      var hasKey = activeKey.indexOf(key) > -1;
      var newactiveKey = [];

      if (multiple) {
        if (hasKey) {
          newactiveKey = activeKey.filter(function (i) {
            return i !== key;
          });
        } else {
          newactiveKey = activeKey.slice(0);
          newactiveKey.push(key);
        }
      } else {
        newactiveKey = hasKey ? [] : [key];
      }

      if (typeof onItemChange === 'function') {
        var isActive = newactiveKey.indexOf(key) > -1;
        onItemChange(isActive);
      }

      _this.setState({
        activeKey: newactiveKey
      });

      onChange(key);
    };

    _this.state = {
      activeKey: getActiveKey(props)
    };
    return _this;
  }

  _createClass(Collapse, [{
    key: "shouldComponentUpdate",
    value: function shouldComponentUpdate(nextProps, nextState) {
      return !isPropEqual(this.props, nextProps) || !isPropEqual(this.state, nextState);
    }
  }, {
    key: "renderItems",
    value: function renderItems() {
      var _this2 = this;

      var _this$props2 = this.props,
          animated = _this$props2.animated,
          children = _this$props2.children;
      var activeKey = this.state.activeKey;
      return Children.map(children, function (ele) {
        var _ele$props = ele.props,
            disabled = _ele$props.disabled,
            onChange = _ele$props.onChange;
        var key = ele.key;
        var isActive = activeKey.indexOf(key) > -1;
        return /*#__PURE__*/cloneElement(ele, {
          key: key,
          isActive: isActive,
          animated: animated,
          onChange: disabled ? function () {} : function () {
            return _this2.onChange(onChange, key);
          }
        });
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props3 = this.props,
          style = _this$props3.style,
          styles = _this$props3.styles;
      var wrapperStyle = [styles.container, style];
      return /*#__PURE__*/React.createElement(View, {
        style: wrapperStyle
      }, this.renderItems());
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(nextProps, state) {
      var newState = {};

      if ('activeKey' in nextProps && nextProps.activeKey !== state.prevActiveKey) {
        newState.activeKey = getActiveKey(nextProps);
        newState.prevActiveKey = nextProps.activeKey;
      }

      if ('animated' in nextProps) {
        newState.animated = nextProps.animated;
      }

      if ('multiple' in nextProps) {
        newState.multiple = nextProps.multiple;
      }

      return newState.activeKey || newState.animated || newState.multiple ? newState : null;
    }
  }]);

  return Collapse;
}(Component);

Collapse.defaultProps = {
  multiple: false,
  animated: false,
  styles: collapseStyles,
  onChange: function onChange() {}
};
Collapse.Item = void 0;
export { Collapse as default };