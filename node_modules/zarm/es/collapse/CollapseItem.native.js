import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

import React, { PureComponent } from 'react';
import { StyleSheet, Text, View, TouchableHighlight, Animated } from 'react-native';
import collapaseStyle from './style/index.native';
import variables from '../style/themes/default.native';
var collapseStyles = StyleSheet.create(collapaseStyle);

var CollapseItem = /*#__PURE__*/function (_PureComponent) {
  _inherits(CollapseItem, _PureComponent);

  var _super = _createSuper(CollapseItem);

  // 标题的高度
  // 内容的高度
  function CollapseItem(_props) {
    var _this;

    _classCallCheck(this, CollapseItem);

    _this = _super.call(this, _props);
    _this.titleHeight = variables.collapse_height;
    _this.bodyHeight = 0;

    _this.getHeight = function () {
      return _this.state.active ? _this.titleHeight + _this.bodyHeight : _this.titleHeight;
    };

    _this.getRotate = function () {
      return _this.state.active ? 1 : 0;
    };

    _this.onPress = function () {
      var _this$props = _this.props,
          disabled = _this$props.disabled,
          onChange = _this$props.onChange;

      if (disabled) {
        return null;
      }

      var active = _this.state.active;

      if (typeof onChange === 'function') {
        onChange(active);
      }
    };

    _this.onLayoutTrimmedText = function (event) {
      var height = event.nativeEvent.layout.height;
      _this.bodyHeight = height;

      _this.state.height.setValue(_this.getHeight());

      _this.state.rotate.setValue(_this.getRotate());
    };

    _this.isActive = function (props) {
      var isActive = props.isActive;
      return isActive;
    };

    _this.animate = function () {
      var animated = _this.props.animated;
      var duration = animated ? 150 : 0;

      var height = _this.getHeight();

      var rotate = _this.getRotate();

      Animated.parallel([Animated.timing(_this.state.height, {
        toValue: height,
        duration: duration,
        useNativeDriver: true
      }), Animated.timing(_this.state.rotate, {
        toValue: rotate,
        duration: 150,
        useNativeDriver: true
      })]).start();
    };

    _this.state = {
      active: _this.isActive(_this.props),
      height: new Animated.Value(_this.titleHeight),
      rotate: new Animated.Value(0)
    };
    return _this;
  }

  _createClass(CollapseItem, [{
    key: "componentDidUpdate",
    value: function componentDidUpdate() {
      this.animate();
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
          title = _this$props2.title,
          children = _this$props2.children,
          style = _this$props2.style,
          disabled = _this$props2.disabled;
      var _this$state = this.state,
          height = _this$state.height,
          rotate = _this$state.rotate;
      var disabledColorStyle = disabled ? collapseStyles.titleTextDisabledStyle : null;
      var disabledBorderColorStyle = disabled ? collapseStyles.titleArrowDisabledStyle : null;
      var wrapperStyle = [collapseStyles.itemWrapperStyle, {
        height: height
      }, style];
      var titleStyle = [collapseStyles.titleWrapperStyle];
      var titleInnerStyle = [collapseStyles.titleInnerStyle];
      var titleTextStyle = [collapseStyles.titleTextStyle, disabledColorStyle];
      var titleArrowStyle = [collapseStyles.titleArrowStyle, {
        transform: [{
          rotate: rotate.interpolate({
            inputRange: [0, 1],
            outputRange: ['45deg', '-135deg']
          })
        }],
        top: rotate.interpolate({
          inputRange: [0, 1],
          outputRange: [0, Math.sqrt(50) / 2]
        })
      }, disabledBorderColorStyle];
      var bodyStyle = [collapseStyles.itemBodyStyle];
      return /*#__PURE__*/React.createElement(Animated.View, {
        style: wrapperStyle
      }, /*#__PURE__*/React.createElement(TouchableHighlight, {
        style: collapseStyles.touchStyle,
        onPress: this.onPress,
        underlayColor: "#eee",
        activeOpacity: disabled ? 1 : 0.8
      }, /*#__PURE__*/React.createElement(View, {
        style: titleStyle
      }, /*#__PURE__*/React.createElement(View, {
        style: titleInnerStyle
      }, /*#__PURE__*/React.createElement(Text, {
        style: titleTextStyle
      }, title), /*#__PURE__*/React.createElement(Animated.View, {
        style: titleArrowStyle
      })))), /*#__PURE__*/React.createElement(View, {
        onLayout: this.onLayoutTrimmedText,
        style: bodyStyle
      }, children));
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(nextProps) {
      if ('isActive' in nextProps) {
        return {
          active: nextProps.isActive
        };
      }

      return null;
    }
  }]);

  return CollapseItem;
}(PureComponent);

CollapseItem.defaultProps = {
  animated: false,
  disabled: false
};
export { CollapseItem as default };