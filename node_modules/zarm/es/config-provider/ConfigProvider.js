import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

import React, { PureComponent, createContext } from 'react';
import setTheme from './setTheme';
import setPrimaryColor from './setPrimaryColor';
var defaultConfig = {
  locale: {},
  theme: 'light',
  primaryColor: '#00bc70'
};
export var LocaleContext = /*#__PURE__*/createContext(defaultConfig.locale);
export var ConfigContext = /*#__PURE__*/createContext(defaultConfig);
var runTimeLocale;

var changeRunTimeLocale = function changeRunTimeLocale(locale) {
  runTimeLocale = locale;
};

export var getRunTimeLocale = function getRunTimeLocale() {
  return runTimeLocale;
};

var ConfigProvider = /*#__PURE__*/function (_PureComponent) {
  _inherits(ConfigProvider, _PureComponent);

  var _super = _createSuper(ConfigProvider);

  function ConfigProvider() {
    _classCallCheck(this, ConfigProvider);

    return _super.apply(this, arguments);
  }

  _createClass(ConfigProvider, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.update();
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate() {
      this.update();
    }
  }, {
    key: "update",
    value: function update() {
      var _this$props = this.props,
          locale = _this$props.locale,
          theme = _this$props.theme,
          primaryColor = _this$props.primaryColor;
      changeRunTimeLocale(locale);
      setTheme(theme);
      setPrimaryColor(primaryColor);
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
          locale = _this$props2.locale,
          theme = _this$props2.theme,
          primaryColor = _this$props2.primaryColor,
          children = _this$props2.children;
      return /*#__PURE__*/React.createElement(ConfigContext.Provider, {
        value: {
          locale: locale,
          theme: theme,
          primaryColor: primaryColor
        }
      }, React.Children.only(children));
    }
  }]);

  return ConfigProvider;
}(PureComponent);

ConfigProvider.defaultProps = defaultConfig;
export { ConfigProvider as default };