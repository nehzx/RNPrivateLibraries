import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

import React, { Component } from 'react';
import isEqual from 'lodash/isEqual';
import Popup from '../popup';
import removeFnFromProps from '../picker-view/utils/removeFnFromProps';
import DatePickerView from '../date-picker-view';
import { parseState } from '../date-picker-view/utils/parseState';

var DatePicker = /*#__PURE__*/function (_Component) {
  _inherits(DatePicker, _Component);

  var _super = _createSuper(DatePicker);

  function DatePicker(props) {
    var _this;

    _classCallCheck(this, DatePicker);

    _this = _super.call(this, props);

    _this.onCancel = function () {
      var onCancel = _this.props.onCancel;

      if (typeof onCancel === 'function') {
        onCancel();
      }
    };

    _this.onOk = function () {
      var onOk = _this.props.onOk;

      _this.setState({
        stopScroll: true
      }, function () {
        _this.setState({
          stopScroll: false
        }, function () {
          if (typeof onOk === 'function') {
            onOk(_this.state.date);
          }
        });
      });
    };

    _this.onInit = function (selected) {
      _this.setState({
        date: selected
      });
    };

    _this.onValueChange = function (newValue) {
      var onChange = _this.props.onChange;

      _this.setState({
        date: newValue
      });

      if (typeof onChange === 'function') {
        onChange(newValue);
      }
    };

    _this.state = _objectSpread(_objectSpread({}, parseState(props)), {}, {
      stopScroll: false
    });
    return _this;
  }

  _createClass(DatePicker, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          prefixCls = _this$props.prefixCls,
          className = _this$props.className,
          title = _this$props.title,
          okText = _this$props.okText,
          cancelText = _this$props.cancelText,
          locale = _this$props.locale,
          mountContainer = _this$props.mountContainer,
          maskClosable = _this$props.maskClosable,
          onOk = _this$props.onOk,
          onCancel = _this$props.onCancel,
          onInit = _this$props.onInit,
          visible = _this$props.visible,
          others = _objectWithoutProperties(_this$props, ["prefixCls", "className", "title", "okText", "cancelText", "locale", "mountContainer", "maskClosable", "onOk", "onCancel", "onInit", "visible"]);

      var _this$state = this.state,
          date = _this$state.date,
          stopScroll = _this$state.stopScroll;

      var noop = function noop() {};

      return /*#__PURE__*/React.createElement(Popup, {
        className: className,
        visible: visible,
        onMaskClick: maskClosable ? this.onCancel : noop,
        mountContainer: mountContainer,
        destroy: true
      }, /*#__PURE__*/React.createElement("div", {
        className: prefixCls,
        onClick: function onClick(e) {
          e.stopPropagation();
        }
      }, /*#__PURE__*/React.createElement("div", {
        className: "".concat(prefixCls, "__header")
      }, /*#__PURE__*/React.createElement("div", {
        className: "".concat(prefixCls, "__cancel"),
        onClick: this.onCancel
      }, cancelText || locale.cancelText), /*#__PURE__*/React.createElement("div", {
        className: "".concat(prefixCls, "__title")
      }, title || locale.title), /*#__PURE__*/React.createElement("div", {
        className: "".concat(prefixCls, "__submit"),
        onClick: this.onOk
      }, okText || locale.okText)), /*#__PURE__*/React.createElement(DatePickerView, _extends({}, others, {
        className: className,
        value: date,
        onInit: this.onInit,
        onChange: this.onValueChange,
        stopScroll: stopScroll
      }))));
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(props, state) {
      if (!isEqual(removeFnFromProps(props, ['onOk', 'onCancel', 'onChange']), removeFnFromProps(state.prevProps, ['onOk', 'onCancel', 'onChange']))) {
        return _objectSpread({
          prevProps: props
        }, parseState(props));
      }

      return null;
    }
  }]);

  return DatePicker;
}(Component);

DatePicker.defaultProps = {
  mode: 'date',
  minuteStep: 1,
  prefixCls: 'za-date-picker',
  valueMember: 'value',
  maskClosable: true,
  onCancel: function onCancel() {},
  onInit: function onInit() {}
};
export { DatePicker as default };