/* eslint-disable dot-notation */
import React from 'react';
import { render, mount } from 'enzyme';
import toJson from 'enzyme-to-json';
import Events from '../../utils/events';
import Drag from '../index';

function createPageXY(x, y) {
  return {
    pageX: x,
    pageY: y
  };
}

function createStartTouchEventObject(_ref) {
  var _ref$x = _ref.x,
      x = _ref$x === void 0 ? 0 : _ref$x,
      _ref$y = _ref.y,
      y = _ref$y === void 0 ? 0 : _ref$y;
  return {
    touches: [createPageXY(x, y)]
  };
}

describe('Drag', function () {
  afterEach(function () {
    jest.restoreAllMocks();
  });
  describe('snapshot', function () {
    it('renders correctly', function () {
      var props = {
        onDragStart: jest.fn(),
        onDragMove: jest.fn(),
        onDragEnd: jest.fn()
      };
      var wrapper = render( /*#__PURE__*/React.createElement(Drag, props, /*#__PURE__*/React.createElement("div", null)));
      expect(toJson(wrapper)).toMatchSnapshot();
    });
  });
  it('should handle touch start event triggered by touch', function () {
    var DateSpy = jest.spyOn(global, 'Date');
    var props = {
      onDragStart: jest.fn()
    };
    var wrapper = mount( /*#__PURE__*/React.createElement(Drag, props, /*#__PURE__*/React.createElement("div", null)));
    var mEvent = createStartTouchEventObject({
      x: 100,
      y: 0
    });
    wrapper.find('div').invoke('onTouchStart')(mEvent);
    expect(props.onDragStart).toBeCalledWith(mEvent, {
      startX: 100,
      startY: 0,
      startTime: DateSpy.mock.instances[0]
    });
  });
  it('should handle touch start event triggered by mouse', function () {
    var eventsOnSpy = jest.spyOn(Events, 'on');
    var DateSpy = jest.spyOn(global, 'Date');
    var props = {
      onDragStart: jest.fn()
    };
    var wrapper = mount( /*#__PURE__*/React.createElement(Drag, props, /*#__PURE__*/React.createElement("div", null)));
    var mEvent = {
      clientX: 100,
      clientY: 50
    };
    wrapper.find('div').invoke('onMouseDown')(mEvent);
    expect(props.onDragStart).toBeCalledWith(mEvent, {
      startX: 100,
      startY: 50,
      startTime: DateSpy.mock.instances[0]
    });
    expect(eventsOnSpy).toBeCalledWith(document.body, 'mousemove', expect.any(Function));
    expect(eventsOnSpy).toBeCalledWith(document.body, 'mouseup', expect.any(Function));
  });
  it('should handle touch move event triggerd by touch', function () {
    var mOnDragMove = jest.fn();
    var DateSpy = jest.spyOn(global, 'Date');
    var wrapper = mount( /*#__PURE__*/React.createElement(Drag, {
      onDragMove: mOnDragMove
    }, /*#__PURE__*/React.createElement("div", null)));
    var mTouchStartEvent = createStartTouchEventObject({
      x: 0,
      y: 9
    });
    var mTouchMoveEvent = {
      touches: [{
        pageX: 100,
        pageY: 99
      }]
    };
    var divWrapper = wrapper.find('div');
    divWrapper.invoke('onTouchStart')(mTouchStartEvent);
    divWrapper.invoke('onTouchMove')(mTouchMoveEvent);
    expect(mOnDragMove).toBeCalledWith(mTouchMoveEvent, {
      startX: 0,
      startY: 9,
      offsetX: 100,
      offsetY: 90,
      startTime: DateSpy.mock.instances[0]
    });
  });
  it('should handle touch move event triggerd by mouse', function () {
    var mOnDragMove = jest.fn();
    var DateSpy = jest.spyOn(global, 'Date');
    var wrapper = mount( /*#__PURE__*/React.createElement(Drag, {
      onDragMove: mOnDragMove
    }, /*#__PURE__*/React.createElement("div", null)));
    var mMouseDownEvent = {
      clientX: 100,
      clientY: 100
    };
    var mMouseMoveEvent = {
      clientX: 0,
      clientY: 50
    };
    var divWrapper = wrapper.find('div');
    divWrapper.invoke('onMouseDown')(mMouseDownEvent);
    expect(wrapper.instance()['dragState']).toEqual({
      startX: 100,
      startY: 100,
      startTime: DateSpy.mock.instances[0]
    });
    divWrapper.invoke('onMouseMove')(mMouseMoveEvent);
    expect(mOnDragMove).toBeCalledWith(mMouseMoveEvent, {
      startX: 100,
      startY: 100,
      offsetX: -100,
      offsetY: -50,
      startTime: DateSpy.mock.instances[0]
    });
    expect(wrapper.instance()['dragState']).toEqual({
      startX: 100,
      startY: 100,
      startTime: DateSpy.mock.instances[0]
    });
  });
  it('should set drag state if onDragMove handler does not exist', function () {
    var DateSpy = jest.spyOn(global, 'Date');
    var wrapper = mount( /*#__PURE__*/React.createElement(Drag, null, /*#__PURE__*/React.createElement("div", null)));
    var mMouseDownEvent = {
      clientX: 100,
      clientY: 100
    };
    var mMouseMoveEvent = {
      clientX: 0,
      clientY: 50
    };
    var divWrapper = wrapper.find('div');
    divWrapper.invoke('onMouseDown')(mMouseDownEvent);
    expect(wrapper.instance()['dragState']).toEqual({
      startX: 100,
      startY: 100,
      startTime: DateSpy.mock.instances[0]
    });
    divWrapper.invoke('onMouseMove')(mMouseMoveEvent);
    expect(wrapper.instance()['dragState']).toEqual({
      startX: 100,
      startY: 100,
      offsetX: -100,
      offsetY: -50,
      startTime: DateSpy.mock.instances[0]
    });
  });
  it('should handle touch end event triggered by touch', function () {
    var mOnDragEnd = jest.fn();
    var wrapper = mount( /*#__PURE__*/React.createElement(Drag, {
      onDragEnd: mOnDragEnd
    }, /*#__PURE__*/React.createElement("div", null)));
    var mTouchStartEvent = createStartTouchEventObject({
      x: 100,
      y: 0
    });
    var mTouchEndEvent = {
      touches: []
    };
    var divWrapper = wrapper.find('div');
    divWrapper.invoke('onTouchStart')(mTouchStartEvent); // eslint-disable-next-line prefer-destructuring

    var dragState = wrapper.instance()['dragState'];
    divWrapper.invoke('onTouchEnd')(mTouchEndEvent);
    expect(mOnDragEnd).toBeCalledWith(mTouchEndEvent, dragState);
  });
  it('should handle touch end event triggered by mouse', function () {
    var eventsOffSpy = jest.spyOn(Events, 'off');
    var mOnDragEnd = jest.fn();
    var wrapper = mount( /*#__PURE__*/React.createElement(Drag, {
      onDragEnd: mOnDragEnd
    }, /*#__PURE__*/React.createElement("div", null)));
    var mMouseStartEvent = {
      clientX: 100,
      clientY: 100
    };
    var mMouseEndEvent = {
      clientX: 0,
      clientY: 50
    };
    var divWrapper = wrapper.find('div');
    divWrapper.invoke('onMouseDown')(mMouseStartEvent); // eslint-disable-next-line prefer-destructuring

    var dragState = wrapper.instance()['dragState'];
    divWrapper.invoke('onMouseUp')(mMouseEndEvent);
    expect(mOnDragEnd).toBeCalledWith(mMouseEndEvent, dragState);
    expect(eventsOffSpy).toBeCalledWith(document.body, 'mousemove', expect.any(Function));
    expect(eventsOffSpy).toBeCalledWith(document.body, 'mouseup', expect.any(Function));
  });
  it('should not call onDragEnd event handler if it does not exist', function () {
    var DateSpy = jest.spyOn(global, 'Date');
    var wrapper = mount( /*#__PURE__*/React.createElement(Drag, null, /*#__PURE__*/React.createElement("div", null)));
    var mTouchStartEvent = createStartTouchEventObject({
      x: 100,
      y: 0
    });
    var mTouchEndEvent = {
      touches: []
    };
    var divWrapper = wrapper.find('div');
    divWrapper.invoke('onTouchStart')(mTouchStartEvent);
    expect(wrapper.instance()['dragState']).toEqual({
      startX: 100,
      startY: 0,
      startTime: DateSpy.mock.instances[0]
    });
    divWrapper.invoke('onTouchEnd')(mTouchEndEvent);
    expect(wrapper.instance()['dragState']).toEqual({});
  });
});