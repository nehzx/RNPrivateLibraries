import _extends from "@babel/runtime/helpers/extends";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

/**
 * 设置选择前的方法，获取选择文件的相关信息。
 *
 * multiple: 默认为 false，设置为 true 之后一次可以选择多张，onChange 事件调用之后返回一个数组，
 *           不设置或者设置为 false，onChange 事件调用之后返回一个对象
 * disabled: 传递之后不可以点击上传，整个选择组件会设置为半透明状态，透明度为 0.5
 * maximum: 允许选择几张图片，默认为 5
 * accept: 设置选择的文件类型，默认为图片，参数有 'images/* | Photos | Videos | All'
 * onChange: () => { file, fileType, fileSize, fileName, thumbnail }
 * onBeforeSelect: () => boolean，返回 false 的时候阻止后续的选择事件
 */
import React, { PureComponent } from 'react';
import { StyleSheet, View, TouchableOpacity, Modal } from 'react-native';
import CameraRollPicker from 'react-native-camera-roll-picker';
import NavBar from '../nav-bar/index.native';
import filePickerStyle from './style/index.native';
var filePickerStyles = StyleSheet.create(filePickerStyle);
var cameraRollOptions = {
  scrollRenderAheadDistance: 500,
  initialListSize: 1,
  pageSize: 3,
  removeClippedSubviews: false,
  groupTypes: 'All',
  batchSize: 1000,
  maximum: 5,
  imagesPerRow: 5,
  imageMargin: 5
};

var FilePicker = /*#__PURE__*/function (_PureComponent) {
  _inherits(FilePicker, _PureComponent);

  var _super = _createSuper(FilePicker);

  function FilePicker() {
    var _this;

    _classCallCheck(this, FilePicker);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.state = {
      isShowRoll: false,
      imageList: [],
      selectedImages: []
    };

    _this.getFileInfo = function (file) {
      var fileType = file && file.filename.substr(file.filename.lastIndexOf('.') + 1);
      var thumbnail = file && file.uri;
      return _objectSpread(_objectSpread({}, file), {}, {
        fileType: fileType,
        thumbnail: thumbnail
      });
    };

    _this.handleShowCameraRoll = function () {
      var _this$props = _this.props,
          disabled = _this$props.disabled,
          onBeforeSelect = _this$props.onBeforeSelect;

      if (onBeforeSelect() === false || disabled) {
        return;
      }

      _this.setState(function (_ref) {
        var isShowRoll = _ref.isShowRoll;
        return {
          isShowRoll: !isShowRoll,
          selectedImages: [],
          imageList: []
        };
      });
    };

    _this.getSelectedImages = function (images) {
      var _this$props2 = _this.props,
          multiple = _this$props2.multiple,
          onChange = _this$props2.onChange;

      if (!images.length) {
        return;
      }

      if (multiple) {
        var data = images.map(function (item) {
          return _this.getFileInfo(item);
        });

        _this.setState({
          imageList: data,
          selectedImages: images
        });
      } else {
        var _data = _this.getFileInfo(images[0]);

        onChange(_data);

        _this.handleShowCameraRoll();
      } // this.setState({
      //   num: images.length,
      // });

    };

    _this.handleConfirm = function () {
      var onChange = _this.props.onChange;
      onChange(_this.state.imageList);

      _this.handleShowCameraRoll();
    };

    return _this;
  }

  _createClass(FilePicker, [{
    key: "render",
    value: function render() {
      var _this$props3 = this.props,
          disabled = _this$props3.disabled,
          styles = _this$props3.styles,
          children = _this$props3.children,
          accept = _this$props3.accept,
          maximum = _this$props3.maximum;
      var _this$state = this.state,
          isShowRoll = _this$state.isShowRoll,
          selectedImages = _this$state.selectedImages;
      var assetType = accept.indexOf('image') > -1 ? 'Photos' : accept;
      var content = disabled ? /*#__PURE__*/React.createElement(View, null, children) : /*#__PURE__*/React.createElement(TouchableOpacity, {
        onPress: this.handleShowCameraRoll
      }, children);
      var cameraRollPicker = /*#__PURE__*/React.createElement(Modal, {
        visible: isShowRoll,
        animationType: "slide",
        transparent: false,
        onRequestClose: function onRequestClose() {}
      }, /*#__PURE__*/React.createElement(View, {
        style: {
          flex: 1
        }
      }, /*#__PURE__*/React.createElement(NavBar, null), /*#__PURE__*/React.createElement(CameraRollPicker, _extends({}, cameraRollOptions, {
        assetType: assetType,
        maximum: maximum,
        selected: selectedImages,
        callback: this.getSelectedImages
      }))));
      return /*#__PURE__*/React.createElement(View, {
        style: disabled && styles.disabledWrapper
      }, content, cameraRollPicker);
    }
  }]);

  return FilePicker;
}(PureComponent);

FilePicker.defaultProps = {
  accept: 'images/*',
  disabled: false,
  multiple: false,
  styles: filePickerStyles,
  onBeforeSelect: function onBeforeSelect() {
    return true;
  },
  onChange: function onChange() {}
};
export { FilePicker as default };