import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

import React, { PureComponent } from 'react';
import InputNumber from './InputNumber';
import InputBase from './InputBase';
import InputTextarea from './InputTextarea';

var Input = /*#__PURE__*/function (_PureComponent) {
  _inherits(Input, _PureComponent);

  var _super = _createSuper(Input);

  function Input() {
    var _this;

    _classCallCheck(this, Input);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.input = void 0;
    return _this;
  }

  _createClass(Input, [{
    key: "focus",
    value: function focus() {
      if (this.input) {
        this.input.focus();
      }
    }
  }, {
    key: "blur",
    value: function blur() {
      if (this.input) {
        this.input.blur();
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props = this.props,
          type = _this$props.type,
          rest = _objectWithoutProperties(_this$props, ["type"]);

      if (type === 'text' && 'rows' in this.props) {
        return /*#__PURE__*/React.createElement(InputTextarea, _extends({
          ref: function ref(ele) {
            _this2.input = ele;
          }
        }, rest));
      }

      switch (type) {
        case 'idcard':
        case 'price':
        case 'number':
          return /*#__PURE__*/React.createElement(InputNumber, _extends({
            ref: function ref(ele) {
              _this2.input = ele;
            }
          }, this.props));

        case 'text':
        case 'search':
        case 'password':
        default:
          return /*#__PURE__*/React.createElement(InputBase, _extends({
            ref: function ref(ele) {
              _this2.input = ele;
            }
          }, this.props));
      }
    }
  }]);

  return Input;
}(PureComponent);

Input.defaultProps = {
  type: 'text'
};
export { Input as default };