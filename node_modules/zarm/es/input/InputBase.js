import _extends from "@babel/runtime/helpers/extends";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

import React, { PureComponent } from 'react';
import classnames from 'classnames';
import { CloseCircleFill } from '@zarm-design/icons';
import { getValue } from './utils';

var InputBase = /*#__PURE__*/function (_PureComponent) {
  _inherits(InputBase, _PureComponent);

  var _super = _createSuper(InputBase);

  function InputBase(props) {
    var _this;

    _classCallCheck(this, InputBase);

    _this = _super.call(this, props);
    _this.input = void 0;
    _this.onBlurTimeout = void 0;
    _this.blurFromClear = void 0;

    _this.onFocus = function (e) {
      _this.setState({
        focused: true
      });

      var onFocus = _this.props.onFocus;

      if (typeof onFocus === 'function') {
        onFocus(e.target.value);
      }
    };

    _this.onBlur = function (e) {
      var onBlur = _this.props.onBlur;
      var value = e.target.value;
      _this.onBlurTimeout = setTimeout(function () {
        if (!_this.blurFromClear && document.activeElement !== _this.input) {
          _this.setState({
            focused: false
          });

          if (typeof onBlur === 'function') {
            onBlur(value);
          }
        }

        _this.blurFromClear = false;
      }, 200);
    };

    _this.onChange = function (e) {
      var onChange = _this.props.onChange;
      var focused = _this.state.focused;
      var value = e.target.value;

      if (!focused) {
        _this.setState({
          focused: true
        });
      }

      if (!('value' in _this.props)) {
        _this.setState({
          value: value
        });
      }

      if (typeof onChange === 'function') {
        onChange(value);
      }
    };

    _this.onClear = function () {
      var isOnComposition = _this.state.isOnComposition;
      var _this$props = _this.props,
          onChange = _this$props.onChange,
          onClear = _this$props.onClear;
      _this.blurFromClear = true;

      _this.setState({
        value: ''
      });

      !isOnComposition && _this.focus();
      typeof onChange === 'function' && onChange('');
      typeof onClear === 'function' && onClear('');
    };

    _this.handleComposition = function (e) {
      var _this$props2 = _this.props,
          onCompositionStart = _this$props2.onCompositionStart,
          onCompositionUpdate = _this$props2.onCompositionUpdate,
          onCompositionEnd = _this$props2.onCompositionEnd,
          onChange = _this$props2.onChange;

      if (e.type === 'compositionstart') {
        _this.setState({
          isOnComposition: true
        });

        if (typeof onCompositionStart === 'function') {
          onCompositionStart(e);
        }
      }

      if (e.type === 'compositionupdate') {
        if (typeof onCompositionUpdate === 'function') {
          onCompositionUpdate(e);
        }
      }

      if (e.type === 'compositionend') {
        var value = e.target.value; // composition is end

        _this.setState({
          isOnComposition: false
        });

        if (typeof onCompositionEnd === 'function') {
          onCompositionEnd(e);
        }

        if (typeof onChange === 'function') {
          onChange(value);
        }
      }
    };

    _this.focus = function () {
      _this.input.focus();
    };

    _this.blur = function () {
      _this.input.blur();
    };

    _this.state = {
      focused: props.autoFocus || false,
      value: getValue(props)
    };
    return _this;
  }

  _createClass(InputBase, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var focused = this.state.focused;

      if (focused) {
        this.input.focus();
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      if (this.onBlurTimeout) {
        clearTimeout(this.onBlurTimeout);
        this.onBlurTimeout = null;
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _classnames,
          _this2 = this;

      var _this$props3 = this.props,
          prefixCls = _this$props3.prefixCls,
          className = _this$props3.className,
          disabled = _this$props3.disabled,
          clearable = _this$props3.clearable,
          readOnly = _this$props3.readOnly,
          type = _this$props3.type,
          onClear = _this$props3.onClear,
          rest = _objectWithoutProperties(_this$props3, ["prefixCls", "className", "disabled", "clearable", "readOnly", "type", "onClear"]);

      var _this$state = this.state,
          value = _this$state.value,
          focused = _this$state.focused;
      var showClearIcon = clearable && 'value' in this.props && 'onChange' in this.props;
      var cls = classnames(prefixCls, className, (_classnames = {}, _defineProperty(_classnames, "".concat(prefixCls, "--disabled"), disabled), _defineProperty(_classnames, "".concat(prefixCls, "--focus"), focused && value && value.length > 0), _defineProperty(_classnames, "".concat(prefixCls, "--clearable"), showClearIcon), _defineProperty(_classnames, "".concat(prefixCls, "--readonly"), readOnly), _classnames));
      var renderInput = /*#__PURE__*/React.createElement("input", _extends({}, rest, {
        value: 'value' in this.props ? value : undefined,
        autoComplete: "off",
        ref: function ref(ele) {
          _this2.input = ele;
        },
        type: type,
        disabled: disabled,
        onChange: this.onChange,
        onBlur: this.onBlur,
        onFocus: this.onFocus,
        onCompositionStart: function onCompositionStart(e) {
          _this2.handleComposition(e);
        },
        onCompositionUpdate: function onCompositionUpdate(e) {
          _this2.handleComposition(e);
        },
        onCompositionEnd: function onCompositionEnd(e) {
          _this2.handleComposition(e);
        }
      }));
      var renderText = /*#__PURE__*/React.createElement("div", {
        className: "".concat(prefixCls, "__content")
      }, value); // clear icon

      var renderClearIcon = showClearIcon && /*#__PURE__*/React.createElement(CloseCircleFill, {
        className: "".concat(prefixCls, "__clear"),
        onClick: function onClick() {
          _this2.onClear();
        }
      });
      return /*#__PURE__*/React.createElement("div", {
        className: cls
      }, readOnly ? renderText : renderInput, renderClearIcon);
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(nextProps) {
      if ('value' in nextProps) {
        return {
          value: getValue(nextProps)
        };
      }

      return null;
    }
  }]);

  return InputBase;
}(PureComponent);

InputBase.defaultProps = {
  prefixCls: 'za-input',
  disabled: false,
  type: 'text',
  clearable: true,
  readOnly: false
};
export { InputBase as default };