import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

import React, { Component } from 'react';
import classnames from 'classnames';
import { CloseCircleFill } from '@zarm-design/icons';
import Events from '../utils/events';
import KeyboardPicker from '../keyboard-picker';
import { getValue } from './utils';

var InputNumber = /*#__PURE__*/function (_Component) {
  _inherits(InputNumber, _Component);

  var _super = _createSuper(InputNumber);

  function InputNumber(props) {
    var _this;

    _classCallCheck(this, InputNumber);

    _this = _super.call(this, props);
    _this.content = void 0;
    _this.picker = void 0;
    _this.container = void 0;

    _this.addBlurListener = function () {
      Events.on(document.body, 'click', _this.onMaskClick);
    };

    _this.removeBlurListener = function () {
      Events.off(document.body, 'click', _this.onMaskClick);
    };

    _this.onMaskClick = function (e) {
      var clsRegExp = new RegExp("(^|\\s)".concat(_this.picker.props.prefixCls, "(\\s|$)"), 'g');

      if (!_this.state.visible || _this.state.focused) {
        return;
      }

      var cNode = function (node) {
        while (node.parentNode && node.parentNode !== document.body) {
          if (node === _this.picker || node === _this.container || clsRegExp.test(node.className)) {
            return node;
          }

          node = node.parentNode;
        }
      }(e.target);

      if (!cNode) {
        _this.onBlur();
      }
    };

    _this.onKeyClick = function (key) {
      if (['close', 'ok'].indexOf(key) > -1) {
        _this.onBlur();

        return;
      }

      var value = _this.state.value;
      var newValue = key === 'delete' ? String(value).slice(0, String(value).length - 1) : value + key;

      if (!('value' in _this.props)) {
        _this.setState({
          value: newValue
        });
      }

      var onChange = _this.props.onChange;

      if (typeof onChange === 'function') {
        onChange(newValue);
      }
    };

    _this.onFocus = function () {
      var _this$props = _this.props,
          disabled = _this$props.disabled,
          readOnly = _this$props.readOnly,
          onFocus = _this$props.onFocus;
      var _this$state = _this.state,
          visible = _this$state.visible,
          value = _this$state.value;

      if (disabled || readOnly || visible) {
        return;
      } // 定位到文本尾部


      _this.setState({
        visible: true
      });

      if (typeof onFocus === 'function') {
        onFocus(value);
      }
    };

    _this.onBlur = function () {
      var _this$state2 = _this.state,
          visible = _this$state2.visible,
          value = _this$state2.value;

      if (!visible) {
        return;
      } // 定位到文本首部


      _this.setState({
        visible: false
      });

      var onBlur = _this.props.onBlur;

      if (typeof onBlur === 'function') {
        onBlur(value);
      }
    };

    _this.onClear = function () {
      var _this$props2 = _this.props,
          onChange = _this$props2.onChange,
          onClear = _this$props2.onClear;

      _this.setState({
        value: ''
      }, _this.onFocus);

      if (onClear) {
        onClear('');
      }

      if (typeof onChange === 'function') {
        onChange('');
      }
    };

    _this.scrollToStart = function () {
      _this.content.scrollLeft = 0;
    };

    _this.scrollToEnd = function () {
      _this.content.scrollLeft = _this.content.scrollWidth;
    };

    _this.focus = function () {
      _this.removeBlurListener();

      _this.onFocus();

      setTimeout(function () {
        _this.addBlurListener();
      }, 50);
    };

    _this.blur = function () {
      _this.onBlur();
    };

    _this.state = {
      value: getValue(props),
      visible: props.focused || false,
      focused: false
    };
    return _this;
  }

  _createClass(InputNumber, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this$props3 = this.props,
          autoFocus = _this$props3.autoFocus,
          focused = _this$props3.focused;
      this.addBlurListener();

      if (autoFocus || focused) {
        this.onFocus();
      }
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate() {
      var visible = this.state.visible;

      if (visible) {
        this.scrollToEnd();
      } else {
        this.scrollToStart();
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.removeBlurListener();
    }
  }, {
    key: "render",
    value: function render() {
      var _classnames,
          _this2 = this;

      var _this$props4 = this.props,
          prefixCls = _this$props4.prefixCls,
          className = _this$props4.className,
          type = _this$props4.type,
          clearable = _this$props4.clearable,
          disabled = _this$props4.disabled,
          readOnly = _this$props4.readOnly,
          placeholder = _this$props4.placeholder;
      var _this$state3 = this.state,
          visible = _this$state3.visible,
          value = _this$state3.value;
      var showClearIcon = clearable && 'value' in this.props && value.length > 0 && 'onChange' in this.props;
      var cls = classnames(prefixCls, "".concat(prefixCls, "--").concat(type), className, (_classnames = {}, _defineProperty(_classnames, "".concat(prefixCls, "--disabled"), disabled), _defineProperty(_classnames, "".concat(prefixCls, "--focus"), visible), _defineProperty(_classnames, "".concat(prefixCls, "--clearable"), showClearIcon), _defineProperty(_classnames, "".concat(prefixCls, "--readonly"), readOnly), _classnames));
      var renderInput = /*#__PURE__*/React.createElement("div", {
        className: "".concat(prefixCls, "__content")
      }, (value === undefined || value === '') && !readOnly && /*#__PURE__*/React.createElement("div", {
        className: "".concat(prefixCls, "__placeholder")
      }, placeholder), /*#__PURE__*/React.createElement("div", {
        className: "".concat(prefixCls, "__virtual-input"),
        ref: function ref(ele) {
          _this2.content = ele;
        }
      }, value), /*#__PURE__*/React.createElement("input", {
        type: "hidden",
        value: value,
        disabled: disabled
      }), /*#__PURE__*/React.createElement(KeyboardPicker, {
        ref: function ref(ele) {
          _this2.picker = ele;
        },
        visible: visible,
        type: type,
        onKeyClick: this.onKeyClick
      }));
      var renderText = /*#__PURE__*/React.createElement("div", {
        className: "".concat(prefixCls, "__content")
      }, value);
      var renderClearIcon = showClearIcon && /*#__PURE__*/React.createElement(CloseCircleFill, {
        className: "".concat(prefixCls, "__clear"),
        onClick: function onClick(e) {
          e.stopPropagation();

          _this2.onClear();
        }
      });
      return /*#__PURE__*/React.createElement("div", {
        className: cls,
        onClick: this.onFocus,
        ref: function ref(ele) {
          _this2.container = ele;
        }
      }, readOnly ? renderText : renderInput, renderClearIcon);
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(nextProps, state) {
      if ('value' in nextProps && nextProps.value !== state.prevValue) {
        return {
          value: getValue(nextProps),
          prevValue: getValue(nextProps)
        };
      }

      return null;
    }
  }]);

  return InputNumber;
}(Component);

InputNumber.defaultProps = {
  prefixCls: 'za-input',
  disabled: false,
  clearable: true
};
export { InputNumber as default };