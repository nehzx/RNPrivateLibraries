import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

import React, { PureComponent } from 'react';
import Keyboard from '../keyboard';
import Popup from '../popup';

var KeyboardPicker = /*#__PURE__*/function (_PureComponent) {
  _inherits(KeyboardPicker, _PureComponent);

  var _super = _createSuper(KeyboardPicker);

  // static show = (props) => {
  //   ReactDOM.render(<KeyboardPicker {...props} visible />, window.zarmKeyboardPicker);
  // }
  // static hide = () => {
  //   ReactDOM.render(<KeyboardPicker visible={false} />, window.zarmKeyboardPicker);
  // }
  function KeyboardPicker(props) {
    var _this;

    _classCallCheck(this, KeyboardPicker);

    _this = _super.call(this, props);

    _this.onKeyClick = function (key) {
      if (['ok', 'close'].indexOf(key) > -1) {
        _this.setState({
          visible: false
        });
      }

      var onKeyClick = _this.props.onKeyClick;

      if (typeof onKeyClick === 'function') {
        onKeyClick(key);
      }
    };

    _this.state = {
      visible: props.visible
    };
    return _this;
  }

  _createClass(KeyboardPicker, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          prefixCls = _this$props.prefixCls,
          className = _this$props.className,
          destroy = _this$props.destroy,
          others = _objectWithoutProperties(_this$props, ["prefixCls", "className", "destroy"]);

      var visible = this.state.visible;
      return /*#__PURE__*/React.createElement(Popup, {
        className: className,
        visible: visible,
        mask: false,
        destroy: destroy
      }, /*#__PURE__*/React.createElement("div", {
        className: prefixCls
      }, /*#__PURE__*/React.createElement(Keyboard, _extends({}, others, {
        onKeyClick: this.onKeyClick
      }))));
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(nextProps) {
      if ('visible' in nextProps) {
        return {
          visible: nextProps.visible
        };
      }

      return null;
    }
  }]);

  return KeyboardPicker;
}(PureComponent); // if (typeof window !== 'undefined') {
//   if (!window.zarmKeyboardPicker) {
//     window.zarmKeyboardPicker = document.createElement('div');
//     document.body.appendChild(window.zarmKeyboardPicker);
//   }
//   ReactDOM.render(<KeyboardPicker visible={false} />, window.zarmKeyboardPicker);
// }


KeyboardPicker.defaultProps = {
  prefixCls: 'za-keyboard-picker',
  visible: false,
  type: 'number',
  destroy: true
};
export { KeyboardPicker as default };