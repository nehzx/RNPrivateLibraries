import React from 'react';
import { mount, shallow } from 'enzyme';
describe('Loading', function () {
  var Loading;
  var ReactDOM;
  var renderSpy;
  var unmountNodeSpy;
  var createElementSpy;
  beforeEach(function () {
    jest.resetModules();
    ReactDOM = require('react-dom');
    renderSpy = jest.spyOn(ReactDOM, 'render');
    createElementSpy = jest.spyOn(document, 'createElement'); // eslint-disable-next-line @typescript-eslint/no-var-requires

    Loading = require('../index').default;
    unmountNodeSpy = jest.spyOn(Loading, 'unmountNode');
  });
  afterEach(function () {
    jest.useRealTimers();
    jest.restoreAllMocks();
    var LoadingContainer = document.body.querySelector('.za-loading-container');

    if (LoadingContainer) {
      document.body.removeChild(LoadingContainer);
    }
  });
  describe('snapshot', function () {
    it('renders correctly', function () {
      var wrapper = mount( /*#__PURE__*/React.createElement(Loading, {
        visible: true
      }, "foo"));
      expect(wrapper).toMatchSnapshot();
    });
    it('visible change true', function () {
      var wrapper = mount( /*#__PURE__*/React.createElement(Loading, null));
      wrapper.setProps({
        visible: true
      });
      expect(wrapper).toMatchSnapshot();
    });
    it('visible change false', function () {
      var afterClose = jest.fn();
      var wrapper = mount( /*#__PURE__*/React.createElement(Loading, {
        visible: true,
        afterClose: afterClose
      }));
      wrapper.setProps({
        visible: false
      });
      wrapper.simulate('transitionEnd');
      wrapper.simulate('animationEnd');
      expect(wrapper.state('visible')).toEqual(false);
      expect(wrapper).toMatchSnapshot();
    });
  });
  it('static function pass params', function () {
    jest.useFakeTimers();
    Loading.show({
      content: /*#__PURE__*/React.createElement("div", null, "loading...")
    });
    jest.runAllTimers();
    var LoadingContainer = document.getElementsByClassName('za-loading-container');
    expect(LoadingContainer.length).toEqual(1);
  });
  it('should create zarm loading DOM element inside document body and render Loading component inside zarm loading DOM element', function () {
    Loading.show();
    expect(unmountNodeSpy).toBeCalledTimes(1);
    expect(createElementSpy).toBeCalledWith('div');
    var zarmLoading = document.body.querySelector('.za-loading-container');
    expect(zarmLoading).toBeTruthy();
    var LoadingReactElement = renderSpy.mock.calls[0][0];
    expect(LoadingReactElement.props).toEqual({
      prefixCls: 'za-loading',
      mask: true,
      visible: true,
      mountContainer: false
    });
    expect(renderSpy).toBeCalledWith(LoadingReactElement, zarmLoading);
  });
  it('should create zarm loading DOM element inside mount container and render Loading component inside zarm loading DOM element', function () {
    var mountContainer = document.createElement('div');
    Loading.show({
      mountContainer: mountContainer,
      className: 'test-za-loading'
    });
    expect(unmountNodeSpy).toBeCalledTimes(1);
    expect(createElementSpy).toBeCalledWith('div');
    var zarmLoading = mountContainer.querySelector('.test-za-loading');
    expect(zarmLoading).toBeTruthy();
    var LoadingReactElement = renderSpy.mock.calls[0][0];
    expect(LoadingReactElement.props).toEqual({
      prefixCls: 'za-loading',
      mask: true,
      className: 'test-za-loading',
      visible: true,
      mountContainer: false
    });
    expect(renderSpy).toBeCalledWith(LoadingReactElement, zarmLoading);
  });
  it('should create hideHelper static method on Loading component class', function () {
    Loading.show();
    expect(Loading.hideHelper).toBeDefined();
  });
  it('should hide loading', function () {
    Loading.show();
    var hideHelperSpy = jest.spyOn(Loading, 'hideHelper');
    var loadingReactElement = renderSpy.mock.calls[0][0];
    expect(loadingReactElement.props.visible).toBeTruthy();
    Loading.hide();
    expect(hideHelperSpy).toBeCalledTimes(1);
    loadingReactElement = renderSpy.mock.calls[1][0];
    expect(loadingReactElement.props.visible).toBeFalsy();
  });
  it('should do nothing if zarm loading has been removed when hide it', function () {
    Loading.show();
    var hideHelperSpy = jest.spyOn(Loading, 'hideHelper');
    Loading.zarmLoading = null;
    Loading.hide();
    expect(hideHelperSpy).not.toBeCalled();
  });
  it('should unmount zarm loading from the DOM tree', function () {
    expect.assertions(5);
    Loading.show();
    var zarmLoading = document.body.querySelector('.za-loading-container');
    expect(zarmLoading).toBeTruthy();

    if (zarmLoading) {
      var loadingReactElement = zarmLoading.firstChild;
      expect(loadingReactElement).toBeTruthy();
      Loading.unmountNode();
      expect(zarmLoading.firstChild).toBeFalsy();
      zarmLoading = document.body.querySelector('.za-loading-container');
      expect(zarmLoading).toBeFalsy();
      expect(Loading.zarmLoading).toBeNull();
    }
  });
  it('should auto close loading if stay time greater than 0', function () {
    jest.useFakeTimers();
    var setTimeoutSpy = jest.spyOn(global, 'setTimeout');
    var clearTimeoutSpy = jest.spyOn(global, 'clearTimeout');
    var wrapper = shallow( /*#__PURE__*/React.createElement(Loading, {
      visible: true,
      stayTime: 100
    }));
    expect(wrapper.state('visible')).toBeTruthy();
    expect(setTimeoutSpy).toBeCalledWith(expect.any(Function), 100);
    jest.advanceTimersByTime(100);
    expect(wrapper.state('visible')).toBeFalsy();
    expect(clearTimeoutSpy).toBeCalledWith(expect.any(Number));
  });
  it('should call after close handler and remove zarm loading element from the DOM tree', function () {
    var mAfterClose = jest.fn();
    Loading.show();
    var wrapper = shallow( /*#__PURE__*/React.createElement(Loading, {
      afterClose: mAfterClose
    }));
    var zarmLoading = document.body.querySelector('.za-loading-container');
    expect(zarmLoading).toBeTruthy();
    wrapper.invoke('afterClose')();
    zarmLoading = document.body.querySelector('.za-loading-container');
    expect(zarmLoading).toBeFalsy();
    expect(Loading.zarmLoading).toBeNull();
    expect(mAfterClose).toBeCalledTimes(1);
  });
  it('should do nothing after close if someone force remove the zarm loading dom', function () {
    Loading.show();
    Loading.zarmLoading = null;
    var removeChildSpy = jest.spyOn(document.body, 'removeChild');
    var wrapper = shallow( /*#__PURE__*/React.createElement(Loading, null));
    wrapper.invoke('afterClose')();
    expect(removeChildSpy).not.toBeCalled();
  });
  it('should show loading if nextProps.visible is true', function () {
    var wrapper = shallow( /*#__PURE__*/React.createElement(Loading, {
      visible: false
    }));
    expect(wrapper.state('visible')).toBeFalsy();
    wrapper.setProps({
      visible: true
    });
    expect(wrapper.state('visible')).toBeTruthy();
  });
  it('should hide loading if nextProps.visible is false', function () {
    var wrapper = shallow( /*#__PURE__*/React.createElement(Loading, {
      visible: true
    }));
    expect(wrapper.state('visible')).toBeTruthy();
    wrapper.setProps({
      visible: false
    });
    expect(wrapper.state('visible')).toBeFalsy();
  });
  it('should render again if zarm loading alreay exists', function () {
    jest.spyOn(Loading, 'unmountNode').mockImplementation(function () {
      return 'assume this method broken';
    });
    renderSpy.mockImplementation();
    Loading.show();
    expect(renderSpy).toBeCalledTimes(1);
    Loading.show();
    expect(renderSpy).toBeCalledTimes(2);
    expect(createElementSpy).toBeCalledTimes(1);
  });
});