import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

import React, { PureComponent } from 'react';
import ReactDOM from 'react-dom';
import Popup from '../popup';
import { getMountContainer } from '../utils/dom';
import ActivityIndicator from '../activity-indicator';

var Loading = /*#__PURE__*/function (_PureComponent) {
  _inherits(Loading, _PureComponent);

  var _super = _createSuper(Loading);

  function Loading() {
    var _this;

    _classCallCheck(this, Loading);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.timer = void 0;
    _this.state = {
      visible: _this.props.visible
    };

    _this.afterClose = function () {
      var afterClose = _this.props.afterClose;

      if (Loading.zarmLoading) {
        ReactDOM.unmountComponentAtNode(Loading.zarmLoading);
        Loading.loadingContainer.removeChild(Loading.zarmLoading);
        Loading.zarmLoading = null;
      }

      if (typeof afterClose === 'function') {
        afterClose();
      }
    };

    _this._hide = function () {
      _this.setState({
        visible: false
      });
    };

    return _this;
  }

  _createClass(Loading, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.autoClose();
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      var visible = this.props.visible;

      if (prevProps.visible !== visible) {
        if (visible) {
          // eslint-disable-next-line
          this.setState({
            visible: true
          });
          this.autoClose();
        } else {
          this._hide();
        }
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      clearTimeout(this.timer);
    }
  }, {
    key: "autoClose",
    value: function autoClose() {
      var _this2 = this;

      var stayTime = this.props.stayTime;

      if (stayTime && stayTime > 0) {
        this.timer = setTimeout(function () {
          _this2._hide();

          clearTimeout(_this2.timer);
        }, stayTime);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          prefixCls = _this$props.prefixCls,
          content = _this$props.content,
          stayTime = _this$props.stayTime,
          className = _this$props.className,
          others = _objectWithoutProperties(_this$props, ["prefixCls", "content", "stayTime", "className"]);

      var visible = this.state.visible;
      return /*#__PURE__*/React.createElement(Popup, _extends({
        direction: "center",
        maskType: "transparent",
        width: "70%"
      }, others, {
        visible: visible,
        afterClose: this.afterClose
      }), /*#__PURE__*/React.createElement("div", {
        className: prefixCls
      }, /*#__PURE__*/React.createElement("div", {
        className: "".concat(prefixCls, "__container")
      }, content || /*#__PURE__*/React.createElement(ActivityIndicator, {
        type: "spinner",
        size: "lg"
      }))));
    }
  }]);

  return Loading;
}(PureComponent);

Loading.defaultProps = {
  prefixCls: 'za-loading',
  mask: true
};
Loading.zarmLoading = void 0;
Loading.loadingContainer = void 0;
Loading.hideHelper = void 0;

Loading.show = function (content) {
  Loading.unmountNode(); // TODO: after calling .unmountNode(), Loading.zarmLoading is null. Is this check necessary?

  if (!Loading.zarmLoading) {
    Loading.zarmLoading = document.createElement('div');
    Loading.zarmLoading.classList.add('za-loading-container');

    if (content && content.className) {
      Loading.zarmLoading.classList.add(content.className);
    }

    Loading.loadingContainer = content && content.mountContainer ? getMountContainer(content.mountContainer) : getMountContainer();
    Loading.loadingContainer.appendChild(Loading.zarmLoading);
  }

  var props = _objectSpread(_objectSpread(_objectSpread({}, Loading.defaultProps), content), {
    visible: true,
    mountContainer: false
  });

  Loading.hideHelper = function () {
    ReactDOM.render( /*#__PURE__*/React.createElement(Loading, _extends({}, props, {
      visible: false
    })), Loading.zarmLoading);
  };

  ReactDOM.render( /*#__PURE__*/React.createElement(Loading, props), Loading.zarmLoading);
};

Loading.hide = function () {
  if (Loading.zarmLoading) {
    Loading.hideHelper();
  }
};

Loading.unmountNode = function () {
  var zarmLoading = Loading.zarmLoading;

  if (zarmLoading) {
    ReactDOM.render( /*#__PURE__*/React.createElement(React.Fragment, null), zarmLoading);
    Loading.loadingContainer.removeChild(zarmLoading);
    Loading.zarmLoading = null;
  }
};

export { Loading as default };