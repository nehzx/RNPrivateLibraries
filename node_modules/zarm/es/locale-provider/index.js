import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";

var _dec, _class;

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

import ConfigProvider from '../config-provider';
import warnIfDeprecated from '../utils/warnIfDeprecated';
var LocaleProvider = (_dec = warnIfDeprecated([{
  oldComponent: 'LocaleProvider',
  newComponent: 'ConfigProvider'
}]), _dec(_class = /*#__PURE__*/function (_ConfigProvider) {
  _inherits(LocaleProvider, _ConfigProvider);

  var _super = _createSuper(LocaleProvider);

  function LocaleProvider() {
    _classCallCheck(this, LocaleProvider);

    return _super.apply(this, arguments);
  }

  return LocaleProvider;
}(ConfigProvider)) || _class);
export { LocaleProvider as default };