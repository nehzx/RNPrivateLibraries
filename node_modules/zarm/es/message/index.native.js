import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

import React, { PureComponent } from 'react';
import { View, StyleSheet, TouchableWithoutFeedback } from 'react-native';
import messageStyle from './style/index.native';
import { RenderWithText } from '../utils/renderWithText.native';
var messageStyles = StyleSheet.create(messageStyle);

var Message = /*#__PURE__*/function (_PureComponent) {
  _inherits(Message, _PureComponent);

  var _super = _createSuper(Message);

  function Message(props) {
    var _this;

    _classCallCheck(this, Message);

    _this = _super.call(this, props);

    _this.onPressClose = function () {
      _this.setState({
        visible: false
      });
    };

    _this.state = {
      visible: true
    };
    return _this;
  }

  _createClass(Message, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          theme = _this$props.theme,
          icon = _this$props.icon,
          hasArrow = _this$props.hasArrow,
          closable = _this$props.closable,
          styles = _this$props.styles,
          style = _this$props.style,
          onClick = _this$props.onClick,
          children = _this$props.children,
          size = _this$props.size;
      var visible = this.state.visible;
      var wrapperStyle = [styles.wrapper, styles["".concat(theme, "Wrapper")], styles["".concat(size, "Wrapper")], style];
      var textStyle = [styles["".concat(theme, "TextStyle")], styles["".concat(size, "TextStyle")]];
      var arrowStyle = [styles.arrowStyle, styles["".concat(theme, "ArrowStyle")], styles["".concat(size, "ArrowStyle")]];
      var closeIconStyle = [styles.closeIconStyle, styles["".concat(theme, "CloseIconStyle")], styles["".concat(size, "CloseIconStyle")]];
      var closeRender = closable && /*#__PURE__*/React.createElement(TouchableWithoutFeedback, {
        onPress: this.onPressClose
      }, /*#__PURE__*/React.createElement(View, {
        style: styles.closeIconWrapperStyle
      }, /*#__PURE__*/React.createElement(View, {
        style: [closeIconStyle, styles.closeIconLeft]
      }), /*#__PURE__*/React.createElement(View, {
        style: [closeIconStyle, styles.closeIconRight]
      })));
      var arrowRender = hasArrow && /*#__PURE__*/React.createElement(View, {
        style: styles.arrowWrapperStyle
      }, /*#__PURE__*/React.createElement(View, {
        style: arrowStyle
      }));
      var footerRender = (closable || hasArrow) && /*#__PURE__*/React.createElement(View, {
        style: styles.footerStyle
      }, closeRender, arrowRender);
      var messageRender = /*#__PURE__*/React.createElement(View, {
        style: wrapperStyle
      }, icon && /*#__PURE__*/React.createElement(View, {
        style: styles.headerStyle
      }), /*#__PURE__*/React.createElement(RenderWithText, {
        viewStyle: styles.bodyStyle,
        textStyle: textStyle,
        component: children
      }), footerRender);
      var wrapperProps = {
        onPress: onClick
      };
      return visible && (onClick ? /*#__PURE__*/React.createElement(TouchableWithoutFeedback, wrapperProps, messageRender) : messageRender);
    }
  }]);

  return Message;
}(PureComponent);

Message.defaultProps = {
  theme: 'primary',
  size: 'md',
  hasArrow: false,
  closable: false,
  styles: messageStyles
};
export { Message as default };