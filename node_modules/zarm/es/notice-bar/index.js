import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

import React, { PureComponent } from 'react';
import { Volume as VolumeIcon } from '@zarm-design/icons';
import Message from '../message';
import { addKeyframe, removeKeyframe, existKeyframe } from '../utils/keyframes';
var NOTICEBAR_KEYFRAME_NAME = 'za-notice-bar-scrolling';

var NoticeBar = /*#__PURE__*/function (_PureComponent) {
  _inherits(NoticeBar, _PureComponent);

  var _super = _createSuper(NoticeBar);

  function NoticeBar() {
    var _this;

    _classCallCheck(this, NoticeBar);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.wrapper = null;
    _this.content = null;
    _this.state = {
      animationDuration: 0
    };
    return _this;
  }

  _createClass(NoticeBar, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.updateScrolling();
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate() {
      this.updateScrolling();
    }
  }, {
    key: "updateScrolling",
    value: function updateScrolling() {
      var _this$props = this.props,
          speed = _this$props.speed,
          delay = _this$props.delay;
      var wrapWidth = this.wrapper.getBoundingClientRect().width;
      var offsetWidth = this.content.getBoundingClientRect().width;

      if (offsetWidth > wrapWidth) {
        // 完整的执行时间 = 前后停留时间 + 移动时间
        var animationDuration = Math.round(delay * 2 + offsetWidth / speed * 1000); // 计算停留时间占总时间的百分比

        var delayPercent = Math.round(delay * 100 / animationDuration); // 删除之前的 keyframe 定义

        if (existKeyframe(NOTICEBAR_KEYFRAME_NAME)) {
          removeKeyframe(NOTICEBAR_KEYFRAME_NAME);
        } // 增加重新计算后的 keyframe


        addKeyframe(NOTICEBAR_KEYFRAME_NAME, "\n        0%, ".concat(delayPercent, "% {\n          -webkit-transform: translate3d(0, 0, 0);\n          transform: translate3d(0, 0, 0);\n        }\n\n        ").concat(100 - delayPercent, "%, 100% {\n          -webkit-transform: translate3d(").concat(-(offsetWidth - wrapWidth), "px, 0, 0);\n          transform: translate3d(").concat(-(offsetWidth - wrapWidth), "px, 0, 0);\n        }\n      "));
        this.setState({
          animationDuration: animationDuration
        });
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props2 = this.props,
          prefixCls = _this$props2.prefixCls,
          children = _this$props2.children,
          others = _objectWithoutProperties(_this$props2, ["prefixCls", "children"]);

      var animationDuration = this.state.animationDuration;
      return /*#__PURE__*/React.createElement(Message, _extends({}, others, {
        size: "lg"
      }), /*#__PURE__*/React.createElement("div", {
        className: prefixCls,
        ref: function ref(ele) {
          _this2.wrapper = ele;
        }
      }, /*#__PURE__*/React.createElement("div", {
        className: "".concat(prefixCls, "__body"),
        ref: function ref(ele) {
          _this2.content = ele;
        },
        style: animationDuration > 0 ? {
          WebkitAnimation: "".concat(NOTICEBAR_KEYFRAME_NAME, " ").concat(animationDuration, "ms linear infinite"),
          animation: "".concat(NOTICEBAR_KEYFRAME_NAME, " ").concat(animationDuration, "ms linear infinite")
        } : undefined
      }, children)));
    }
  }]);

  return NoticeBar;
}(PureComponent);

NoticeBar.displayName = 'NoticeBar';
NoticeBar.defaultProps = {
  prefixCls: 'za-notice-bar',
  theme: 'warning',
  icon: /*#__PURE__*/React.createElement(VolumeIcon, null),
  hasArrow: false,
  closable: false,
  speed: 50,
  delay: 2000
};
export { NoticeBar as default };