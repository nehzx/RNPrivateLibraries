import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _regeneratorRuntime from "@babel/runtime/regenerator";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

import React, { PureComponent } from 'react';
import { Text, StyleSheet, UIManager, ScrollView, findNodeHandle } from 'react-native';
import noticeBarStyle from './style/index.native';
import Message from '../message/index.native';
var noticeBarStyles = StyleSheet.create(noticeBarStyle);

var NoticeBar = /*#__PURE__*/function (_PureComponent) {
  _inherits(NoticeBar, _PureComponent);

  var _super = _createSuper(NoticeBar);

  function NoticeBar(props) {
    var _this;

    _classCallCheck(this, NoticeBar);

    _this = _super.call(this, props);
    _this.content = void 0;
    _this.wrapper = void 0;
    _this.moveInterval = void 0;

    _this.layout = function (ref) {
      var handle = findNodeHandle(ref);

      if (!handle) {
        return Promise.resolve(0);
      }

      return new Promise(function (resolve) {
        setTimeout(function () {
          UIManager.measure(handle, function (x, y, width, height, pageX, pageY) {
            // x,y 当前container的坐标, width, height 是宽高, pageX, pageY 是在屏幕中的坐标（起始坐标）
            var result = {
              x: x,
              y: y,
              width: width,
              height: height,
              pageX: pageX,
              pageY: pageY
            };
            resolve(result.width);
          });
        });
      });
    };

    _this.state = {
      offset: 0
    };
    return _this;
  }

  _createClass(NoticeBar, [{
    key: "componentDidMount",
    value: function () {
      var _componentDidMount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        var _this2 = this;

        var _this$props, delay, speed, asyncWrapper, asyncContent, wrapperWidth, contentWidth, distance, animateDelay;

        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _this$props = this.props, delay = _this$props.delay, speed = _this$props.speed;
                asyncWrapper = this.layout(this.wrapper);
                asyncContent = this.layout(this.content);
                _context.next = 5;
                return asyncWrapper;

              case 5:
                wrapperWidth = _context.sent;
                _context.next = 8;
                return asyncContent;

              case 8:
                contentWidth = _context.sent;
                distance = wrapperWidth - contentWidth;

                if (!(distance > 0)) {
                  _context.next = 12;
                  break;
                }

                return _context.abrupt("return");

              case 12:
                animateDelay = delay;
                this.moveInterval = setInterval(function () {
                  var offset = _this2.state.offset;

                  if ((offset < distance || offset >= 0) && animateDelay > 0) {
                    animateDelay -= speed;
                    return;
                  }

                  animateDelay = delay;
                  offset = offset < distance ? 0 : offset - 1;

                  _this2.setState({
                    offset: offset
                  });
                }, 50);

              case 14:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function componentDidMount() {
        return _componentDidMount.apply(this, arguments);
      }

      return componentDidMount;
    }()
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      if (this.moveInterval) {
        clearInterval(this.moveInterval);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this3 = this;

      var _this$props2 = this.props,
          theme = _this$props2.theme,
          closable = _this$props2.closable,
          styles = _this$props2.styles,
          children = _this$props2.children,
          others = _objectWithoutProperties(_this$props2, ["theme", "closable", "styles", "children"]);

      var offset = this.state.offset;
      var textStyle = [styles.textStyle, styles["".concat(theme, "TextStyle")]];
      var wrapperProps = {
        theme: theme,
        closable: closable,
        children: children
      };
      return /*#__PURE__*/React.createElement(Message, _extends({}, wrapperProps, others, {
        size: "lg"
      }), /*#__PURE__*/React.createElement(ScrollView, {
        horizontal: true,
        ref: function ref(view) {
          _this3.wrapper = view;
        },
        scrollEnabled: false,
        showsHorizontalScrollIndicator: false
      }, /*#__PURE__*/React.createElement(Text, {
        ref: function ref(view) {
          _this3.content = view;
        },
        style: [textStyle, {
          left: offset
        }]
      }, children)));
    }
  }]);

  return NoticeBar;
}(PureComponent);

NoticeBar.defaultProps = {
  theme: 'warning',
  hasArrow: false,
  closable: false,
  speed: 50,
  delay: 2000,
  styles: noticeBarStyles
};
export { NoticeBar as default };