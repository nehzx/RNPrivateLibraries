import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

import React, { PureComponent } from 'react';
import classnames from 'classnames';

var Panel = /*#__PURE__*/function (_PureComponent) {
  _inherits(Panel, _PureComponent);

  var _super = _createSuper(Panel);

  function Panel() {
    _classCallCheck(this, Panel);

    return _super.apply(this, arguments);
  }

  _createClass(Panel, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          prefixCls = _this$props.prefixCls,
          className = _this$props.className,
          title = _this$props.title,
          more = _this$props.more,
          children = _this$props.children;
      var cls = classnames("".concat(prefixCls), className);
      return /*#__PURE__*/React.createElement("div", {
        className: cls
      }, /*#__PURE__*/React.createElement("div", {
        className: "".concat(prefixCls, "__header")
      }, title && /*#__PURE__*/React.createElement("div", {
        className: "".concat(prefixCls, "__header__title")
      }, title), more && /*#__PURE__*/React.createElement("div", {
        className: "".concat(prefixCls, "__header__more")
      }, more)), /*#__PURE__*/React.createElement("div", {
        className: "".concat(prefixCls, "__body")
      }, children));
    }
  }]);

  return Panel;
}(PureComponent);

Panel.defaultProps = {
  prefixCls: 'za-panel'
};
export { Panel as default };