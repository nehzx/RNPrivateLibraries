import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

import React, { Component } from 'react';
import classnames from 'classnames';
import isEqual from 'lodash/isEqual';
import Wheel from '../wheel';
import { isCascader } from '../utils/validate';
import parseProps from './utils/parseProps';
import removeFnFromProps from './utils/removeFnFromProps';

var PickerView = /*#__PURE__*/function (_Component) {
  _inherits(PickerView, _Component);

  var _super = _createSuper(PickerView);

  function PickerView() {
    var _this;

    _classCallCheck(this, PickerView);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.state = parseProps.getSource(_this.props);

    _this.onValueChange = function (selected, level) {
      var value = _this.state.value.slice();

      var _this$props = _this.props,
          dataSource = _this$props.dataSource,
          onChange = _this$props.onChange,
          valueMember = _this$props.valueMember,
          cols = _this$props.cols;

      if (isCascader({
        dataSource: dataSource
      })) {
        value.length = level + 1;
      }

      value[level] = selected;
      var newState = parseProps.getSource({
        dataSource: dataSource,
        value: value,
        valueMember: valueMember,
        cols: cols
      });

      _this.setState(newState);

      if (typeof onChange === 'function') {
        onChange(newState.objValue, level);
      }
    };

    _this.renderWheel = function () {
      var _this$props2 = _this.props,
          valueMember = _this$props2.valueMember,
          itemRender = _this$props2.itemRender,
          disabled = _this$props2.disabled,
          stopScroll = _this$props2.stopScroll;
      var _this$state = _this.state,
          dataSource = _this$state.dataSource,
          value = _this$state.value;
      return dataSource.map(function (item, index) {
        return /*#__PURE__*/React.createElement(Wheel, {
          key: +index,
          dataSource: item,
          value: value[index],
          valueMember: valueMember,
          itemRender: itemRender,
          disabled: disabled,
          onChange: function onChange(selected) {
            return _this.onValueChange(selected, index);
          },
          stopScroll: stopScroll
        });
      });
    };

    return _this;
  }

  _createClass(PickerView, [{
    key: "render",
    value: function render() {
      var _this$props3 = this.props,
          prefixCls = _this$props3.prefixCls,
          className = _this$props3.className;
      var cls = classnames(prefixCls, className);
      return /*#__PURE__*/React.createElement("div", {
        className: cls
      }, /*#__PURE__*/React.createElement("div", {
        className: "".concat(prefixCls, "__content")
      }, this.renderWheel()), /*#__PURE__*/React.createElement("div", {
        className: "".concat(prefixCls, "__mask ").concat(prefixCls, "__mask--top")
      }), /*#__PURE__*/React.createElement("div", {
        className: "".concat(prefixCls, "__mask ").concat(prefixCls, "__mask--bottom")
      }));
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: // TODO: is this method still be used?
    function getDerivedStateFromProps(props, state) {
      if (!isEqual(removeFnFromProps(props, ['onChange']), removeFnFromProps(state.prevProps, ['onChange']))) {
        return _objectSpread({
          prevProps: props
        }, parseProps.getSource(props));
      }

      return null;
    }
  }]);

  return PickerView;
}(Component);

PickerView.defaultProps = {
  prefixCls: 'za-picker-view',
  dataSource: [],
  cols: Infinity,
  valueMember: 'value',
  itemRender: function itemRender(data) {
    return data.label;
  },
  disabled: false
};
export { PickerView as default };