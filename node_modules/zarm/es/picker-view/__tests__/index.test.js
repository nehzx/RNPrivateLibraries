import React from 'react';
import { render, mount, shallow } from 'enzyme';
import toJson from 'enzyme-to-json';
import BScroll from 'better-scroll';
import { mocked } from 'ts-jest/utils';
import Wheel from '../../wheel';
import PickerView from '../index';
import parseProps from '../utils/parseProps'; // TODO: make mock package for better-scroll package

var bsScrollInstance = {
  on: jest.fn().mockImplementationOnce(function (event, handler) {
    if (event === 'scrollEnd') {
      handler();
    }
  }),
  destroy: jest.fn(),
  getSelectedIndex: jest.fn(),
  refresh: jest.fn(),
  wheelTo: jest.fn(),
  disable: jest.fn(),
  stop: jest.fn()
};
jest.mock('better-scroll', function () {
  return jest.fn(function () {
    return bsScrollInstance;
  });
});
var mockedBScroll = mocked(BScroll);
describe('PickerView', function () {
  afterAll(function () {
    jest.resetAllMocks();
  });
  afterEach(function () {
    jest.restoreAllMocks();
  });
  it('should not render wheels if datasource is empty', function () {
    var wrapper = shallow( /*#__PURE__*/React.createElement(PickerView, null));
    expect(wrapper.find('.za-picker-view__content').children()).toHaveLength(0);
  });
  it('should render wheels if datasource is not empty', function () {
    var dataSource = [{
      label: 'a',
      value: 1
    }, {
      label: 'b',
      value: 2
    }];
    var wrapper = shallow( /*#__PURE__*/React.createElement(PickerView, {
      dataSource: dataSource
    }));
    expect(wrapper.state('dataSource')).toEqual([[{
      label: 'a',
      value: 1
    }, {
      label: 'b',
      value: 2
    }]]);
    expect(wrapper.find('.za-picker-view__content').children()).toHaveLength(1);
    expect(wrapper.find(Wheel).props()).toEqual(expect.objectContaining({
      dataSource: [{
        label: 'a',
        value: 1
      }, {
        label: 'b',
        value: 2
      }],
      value: 1,
      valueMember: 'value',
      itemRender: PickerView.defaultProps.itemRender,
      disabled: false,
      onChange: expect.any(Function),
      stopScroll: false
    }));
  });
  it('should render with correct className', function () {
    var wrapper = shallow( /*#__PURE__*/React.createElement(PickerView, {
      className: "foo"
    }));
    expect(wrapper.at(0).prop('className')).toEqual('za-picker-view foo');
    expect(wrapper.find('.za-picker-view__content')).toHaveLength(1);
    expect(wrapper.find('.za-picker-view__mask')).toHaveLength(2);
    expect(wrapper.find('.za-picker-view__mask--top')).toHaveLength(1);
    expect(wrapper.find('.za-picker-view__mask--bottom')).toHaveLength(1);
  });
  it('should handle value change event and re-render wheels with new props', function () {
    var getSourceSpy = jest.spyOn(parseProps, 'getSource');
    bsScrollInstance.getSelectedIndex.mockReturnValueOnce(1);
    mockedBScroll.mockReturnValueOnce(bsScrollInstance);
    var dataSource = [{
      label: 'a',
      value: 1
    }, {
      label: 'b',
      value: 2
    }];
    var props = {
      onChange: jest.fn(),
      dataSource: dataSource
    };
    var wrapper = mount( /*#__PURE__*/React.createElement(PickerView, props));
    expect(bsScrollInstance.on).toBeCalledWith('scrollEnd', expect.any(Function));
    expect(getSourceSpy).toBeCalledWith({
      dataSource: props.dataSource,
      value: [2],
      valueMember: 'value',
      cols: Infinity
    });
    expect(props.onChange).toBeCalledWith([{
      label: 'b',
      value: 2
    }], 0);
    expect(wrapper.state('value')).toEqual([2]);
    expect(wrapper.state('objValue')).toEqual([{
      label: 'b',
      value: 2
    }]);
    expect(wrapper.state('dataSource')).toEqual([[{
      label: 'a',
      value: 1
    }, {
      label: 'b',
      value: 2
    }]]);
    expect(wrapper.find(Wheel).props()).toEqual(expect.objectContaining({
      dataSource: [{
        label: 'a',
        value: 1
      }, {
        label: 'b',
        value: 2
      }],
      value: 2,
      valueMember: 'value',
      itemRender: PickerView.defaultProps.itemRender,
      disabled: false,
      onChange: expect.any(Function),
      stopScroll: false
    }));
  });
  it('PickerView render visible', function () {
    var wrapper = render( /*#__PURE__*/React.createElement(PickerView, {
      dataSource: [{
        value: '1',
        label: '选项一'
      }, {
        value: '2',
        label: '选项二'
      }],
      defaultValue: "1",
      value: "1"
    }));
    expect(toJson(wrapper)).toMatchSnapshot();
  });
  it('PickerView disabled', function () {
    var onChange = jest.fn();
    var wrapper = mount( /*#__PURE__*/React.createElement(PickerView, {
      disabled: true,
      onChange: onChange,
      dataSource: [{
        value: '1',
        label: '选项一'
      }, {
        value: '2',
        label: '选项二'
      }]
    }));
    expect(onChange).not.toBeCalled();
    expect(toJson(wrapper)).toMatchSnapshot();
  });
});