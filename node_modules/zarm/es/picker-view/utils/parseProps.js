import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import { isArray, isCascader } from '../../utils/validate';
export var isValueValid = function isValueValid(value) {
  var valueArray = [].concat(value);
  return valueArray.some(function (item) {
    return !!item || item === 0 || item === false;
  });
};

var getValues = function getValues(props, defaultValue) {
  if ('value' in props && isValueValid(props.value)) {
    return [].concat(props.value);
  }

  if ('defaultValue' in props && isValueValid(props.defaultValue)) {
    return [].concat(props.defaultValue);
  }

  if ('wheelDefaultValue' in props && isValueValid(props.wheelDefaultValue)) {
    return [].concat(props.wheelDefaultValue);
  }

  return defaultValue;
};

export var normalState = function normalState(props) {
  var valueMember = props.valueMember,
      dataSource = props.dataSource;
  var value = getValues(props, dataSource.map(function (item) {
    return item[0] && item[0][valueMember];
  }));
  return {
    value: value,
    objValue: props.dataSource.map(function (item, index) {
      return item.filter(function (d) {
        return d[valueMember] === value[index];
      })[0];
    }),
    dataSource: props.dataSource
  };
};

var cascaderState = function cascaderState(props) {
  var valueMember = props.valueMember,
      cols = props.cols;
  var newValues = getValues(props, []);
  var newObjValues = [];
  var newDateSource = [];

  var parseLevel = function parseLevel(_ref) {
    var _ref$level = _ref.level,
        level = _ref$level === void 0 ? 0 : _ref$level,
        dataSource = _ref.dataSource;
    newDateSource[level] = dataSource.map(function (item, index) {
      var children = item.children,
          others = _objectWithoutProperties(item, ["children"]);

      if ( // eslint-disable-next-line operator-linebreak
      isValueValid(newValues[level]) && item[valueMember] === newValues[level] || !isValueValid(newValues[level]) && index === 0) {
        newValues[level] = item[valueMember];
        newObjValues[level] = others;

        if (isArray(children) && children.length > 0 && level + 1 < cols) {
          parseLevel({
            level: level + 1,
            dataSource: children
          });
        }
      }

      return others;
    });
    return newValues;
  };

  newValues = parseLevel({
    dataSource: props.dataSource
  });
  return {
    value: newValues,
    objValue: newObjValues,
    dataSource: newDateSource
  };
};

export default {
  getSource: function getSource(props) {
    return isCascader(props) ? cascaderState(props) : normalState(props);
  },
  isValueValid: isValueValid
};