import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

import React, { Component } from 'react';
import isEqual from 'lodash/isEqual';
import Popup from '../popup';
import PickerView from '../picker-view';
import parseProps from '../picker-view/utils/parseProps';
import removeFnFromProps from '../picker-view/utils/removeFnFromProps';

var Picker = /*#__PURE__*/function (_Component) {
  _inherits(Picker, _Component);

  var _super = _createSuper(Picker);

  function Picker() {
    var _this;

    _classCallCheck(this, Picker);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.state = _objectSpread(_objectSpread({}, parseProps.getSource(_this.props)), {}, {
      stopScroll: false
    });

    _this.onChange = function (selected) {
      var _this$props = _this.props,
          valueMember = _this$props.valueMember,
          onChange = _this$props.onChange;
      var value = selected.map(function (item) {
        return item[valueMember];
      });

      _this.setState({
        value: value,
        objValue: selected
      });

      if (typeof onChange === 'function') {
        onChange(selected);
      }
    };

    _this.onCancel = function () {
      var onCancel = _this.props.onCancel;
      var _this$state = _this.state,
          _this$state$tempValue = _this$state.tempValue,
          tempValue = _this$state$tempValue === void 0 ? [] : _this$state$tempValue,
          _this$state$tempObjVa = _this$state.tempObjValue,
          tempObjValue = _this$state$tempObjVa === void 0 ? [] : _this$state$tempObjVa;

      _this.setState({
        value: tempValue,
        objValue: tempObjValue
      });

      if (typeof onCancel === 'function') {
        onCancel();
      }
    };

    _this.onOk = function () {
      var onOk = _this.props.onOk;

      _this.setState({
        stopScroll: true
      }, function () {
        _this.setState({
          stopScroll: false
        }, function () {
          if (typeof onOk === 'function') {
            onOk(_this.state.objValue);
          }
        });
      });
    };

    return _this;
  }

  _createClass(Picker, [{
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
          prefixCls = _this$props2.prefixCls,
          className = _this$props2.className,
          cancelText = _this$props2.cancelText,
          okText = _this$props2.okText,
          title = _this$props2.title,
          locale = _this$props2.locale,
          maskClosable = _this$props2.maskClosable,
          mountContainer = _this$props2.mountContainer,
          destroy = _this$props2.destroy,
          onOk = _this$props2.onOk,
          onCancel = _this$props2.onCancel,
          visible = _this$props2.visible,
          others = _objectWithoutProperties(_this$props2, ["prefixCls", "className", "cancelText", "okText", "title", "locale", "maskClosable", "mountContainer", "destroy", "onOk", "onCancel", "visible"]);

      var _this$state2 = this.state,
          value = _this$state2.value,
          _this$state2$stopScro = _this$state2.stopScroll,
          stopScroll = _this$state2$stopScro === void 0 ? false : _this$state2$stopScro;

      var noop = function noop() {};

      return /*#__PURE__*/React.createElement(Popup, {
        className: className,
        visible: visible,
        onMaskClick: maskClosable ? this.onCancel : noop,
        mountContainer: mountContainer,
        destroy: destroy
      }, /*#__PURE__*/React.createElement("div", {
        className: prefixCls,
        onClick: function onClick(e) {
          e.stopPropagation();
        }
      }, /*#__PURE__*/React.createElement("div", {
        className: "".concat(prefixCls, "__header")
      }, /*#__PURE__*/React.createElement("div", {
        className: "".concat(prefixCls, "__cancel"),
        onClick: this.onCancel
      }, cancelText || locale.cancelText), /*#__PURE__*/React.createElement("div", {
        className: "".concat(prefixCls, "__title")
      }, title || locale.title), /*#__PURE__*/React.createElement("div", {
        className: "".concat(prefixCls, "__submit"),
        onClick: this.onOk
      }, okText || locale.okText)), /*#__PURE__*/React.createElement(PickerView, _extends({}, others, {
        value: value,
        onChange: this.onChange,
        stopScroll: stopScroll
      }))));
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(props, state) {
      if (!isEqual(removeFnFromProps(props, ['onOk', 'onCancel', 'onChange']), removeFnFromProps(state.prevProps, ['onOk', 'onCancel', 'onChange']))) {
        return _objectSpread(_objectSpread({
          prevProps: props
        }, parseProps.getSource(props)), {}, {
          tempValue: parseProps.getSource(props).value,
          tempObjValue: parseProps.getSource(props).objValue
        });
      }

      return null;
    }
  }]);

  return Picker;
}(Component);

Picker.defaultProps = {
  dataSource: [],
  prefixCls: 'za-picker',
  valueMember: 'value',
  cols: Infinity,
  maskClosable: true,
  itemRender: function itemRender(data) {
    return data.label;
  },
  destroy: false
};
export { Picker as default };