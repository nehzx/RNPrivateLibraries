import _extends from "@babel/runtime/helpers/extends";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

import React, { PureComponent } from 'react';
import Portal from './Portal';

var Popup = /*#__PURE__*/function (_PureComponent) {
  _inherits(Popup, _PureComponent);

  var _super = _createSuper(Popup);

  function Popup(props) {
    var _this;

    _classCallCheck(this, Popup);

    _this = _super.call(this, props);
    _this.portalRef = void 0;
    _this.state = {
      renderPortal: false,
      portalVisible: false
    };
    _this.handlePortalUnmount = _this.handlePortalUnmount.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(Popup, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var visible = this.props.visible;

      if (visible) {
        this.setState({
          renderPortal: true,
          portalVisible: true
        });
      }
    }
  }, {
    key: "handlePortalUnmount",
    value: function handlePortalUnmount() {
      var destroy = this.props.destroy;

      if (destroy) {
        this.setState({
          renderPortal: false
        });
      } else {
        this.setState({
          renderPortal: true,
          portalVisible: false
        });
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$state = this.state,
          renderPortal = _this$state.renderPortal,
          portalVisible = _this$state.portalVisible;
      return renderPortal && /*#__PURE__*/React.createElement(Portal, _extends({
        ref: function ref(_ref) {
          _this2.portalRef = _ref;
        }
      }, this.props, {
        visible: portalVisible,
        handlePortalUnmount: this.handlePortalUnmount
      }));
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(props, state) {
      if (props.visible !== state.portalVisible) {
        if (props.visible) {
          return {
            renderPortal: true,
            portalVisible: true
          };
        }

        return {
          portalVisible: false
        };
      }

      return null;
    }
  }]);

  return Popup;
}(PureComponent);

Popup.defaultProps = {
  prefixCls: 'za-popup',
  destroy: true,
  visible: false
};
export { Popup as default };