import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

import React, { PureComponent } from 'react';
import ReactDOM from 'react-dom';
import classnames from 'classnames';
import Events from '../utils/events';
import { canUseDOM, getMountContainer } from '../utils/dom';
import Mask from '../mask';
import Trigger from '../trigger';
var IS_REACT_16 = !!ReactDOM.createPortal;

var Portal = /*#__PURE__*/function (_PureComponent) {
  _inherits(Portal, _PureComponent);

  var _super = _createSuper(Portal);

  function Portal(props) {
    var _this;

    _classCallCheck(this, Portal);

    _this = _super.call(this, props);
    _this.enterTimer = void 0;
    _this.mountNode = void 0;
    _this._container = void 0;
    _this._reflow = void 0;
    _this.popup = void 0;

    _this.animationEnd = function (e) {
      if (e.target !== _this.popup) {
        return;
      }

      e.stopPropagation();
      var _this$props = _this.props,
          afterClose = _this$props.afterClose,
          afterOpen = _this$props.afterOpen,
          handlePortalUnmount = _this$props.handlePortalUnmount,
          visible = _this$props.visible,
          prefixCls = _this$props.prefixCls;
      var animationState = visible ? 'enter' : 'leave';

      if (animationState === 'leave') {
        _this._container && _this._container.classList.add("".concat(prefixCls, "--hidden"));

        if (typeof handlePortalUnmount === 'function') {
          handlePortalUnmount();
        }

        if (typeof afterClose === 'function') {
          afterClose();
        }
      } else if (typeof afterOpen === 'function') {
        afterOpen();
      }
    };

    _this.renderMask = function () {
      var _this$props2 = _this.props,
          mask = _this$props2.mask,
          maskType = _this$props2.maskType,
          animationDuration = _this$props2.animationDuration,
          visible = _this$props2.visible;
      var isPending = _this.state.isPending;
      var animationState = visible ? 'enter' : 'leave';
      var maskCls = classnames(_defineProperty({}, "za-fade-".concat(animationState), isPending));
      var maskStyle = {
        WebkitAnimationDuration: "".concat(animationDuration, "ms"),
        animationDuration: "".concat(animationDuration, "ms")
      };
      return mask && /*#__PURE__*/React.createElement(Mask, {
        className: maskCls,
        style: maskStyle,
        visible: true,
        type: maskType
      });
    };

    _this.onEsc = function () {
      var onEsc = _this.props.onEsc;
      onEsc && onEsc();
    };

    _this.handleMaskClick = function (e) {
      e.stopPropagation();
      var onMaskClick = _this.props.onMaskClick;

      if (typeof onMaskClick === 'function' && _this.popup !== e.target && _this.popup && !_this.popup.contains(e.target)) {
        onMaskClick();
      }
    };

    _this.getComponent = function () {
      var _classnames3;

      var _this$props3 = _this.props,
          prefixCls = _this$props3.prefixCls,
          animationType = _this$props3.animationType,
          animationDuration = _this$props3.animationDuration,
          direction = _this$props3.direction,
          mask = _this$props3.mask,
          children = _this$props3.children,
          width = _this$props3.width,
          visible = _this$props3.visible;
      var isPending = _this.state.isPending;
      var animationState = visible ? 'enter' : 'leave';
      var cls = {
        wrapper: classnames("".concat(prefixCls, "__wrapper"), _defineProperty({}, "za-fade-".concat(animationState), direction === 'center' && isPending)),
        popup: classnames(prefixCls, (_classnames3 = {}, _defineProperty(_classnames3, "".concat(prefixCls, "--").concat(direction), !!direction), _defineProperty(_classnames3, "".concat(prefixCls, "--nomask"), direction === 'center' && !mask), _defineProperty(_classnames3, "za-".concat(animationType, "-").concat(animationState), direction === 'center' && isPending), _classnames3))
      };
      var wrapStyle = direction === 'center' ? {
        WebkitAnimationDuration: "".concat(animationDuration, "ms"),
        animationDuration: "".concat(animationDuration, "ms")
      } : {};
      var popupStyle = direction === 'center' ? {
        width: width,
        WebkitAnimationDuration: "".concat(animationDuration, "ms"),
        animationDuration: "".concat(animationDuration, "ms")
      } : {
        WebkitTransitionDuration: "".concat(animationDuration, "ms"),
        transitionDuration: "".concat(animationDuration, "ms"),
        WebkitTransitionProperty: 'transform',
        transitionProperty: 'transform'
      };

      if (!mask) {
        return /*#__PURE__*/React.createElement("div", {
          className: cls.popup,
          style: popupStyle,
          role: "dialog",
          ref: function ref(_ref) {
            _this.popup = _ref;
          }
        }, children);
      }

      return /*#__PURE__*/React.createElement(React.Fragment, null, _this.renderMask(), /*#__PURE__*/React.createElement("div", {
        role: "dialog",
        className: cls.wrapper,
        style: wrapStyle,
        "data-width": _this._reflow,
        onClick: _this.handleMaskClick
      }, /*#__PURE__*/React.createElement("div", {
        ref: function ref(_ref2) {
          _this.popup = _ref2;
        },
        "data-width": _this._reflow,
        className: cls.popup,
        style: popupStyle,
        role: "document"
      }, children)));
    };

    _this.handleAnimation = function () {
      var _this$props4 = _this.props,
          visible = _this$props4.visible,
          prefixCls = _this$props4.prefixCls;

      if (visible) {
        if (_this.popup) {
          _this._container && _this._container.classList.remove("".concat(prefixCls, "--hidden"));

          _this.setState({
            isPending: true
          });

          _this._reflow = _this.popup.offsetWidth;

          _this.popup.classList.add("".concat(prefixCls, "--show"));
        }
      } else {
        _this.setState({
          isPending: true
        });

        if (_this.popup) {
          _this.popup.classList.remove("".concat(prefixCls, "--show"));
        }
      }
    };

    _this.renderPortal = function () {
      var _this$props5 = _this.props,
          mountContainer = _this$props5.mountContainer,
          className = _this$props5.className,
          prefixCls = _this$props5.prefixCls;

      if (!canUseDOM) {
        return null;
      }

      if (mountContainer === false) {
        return /*#__PURE__*/React.createElement("div", {
          className: classnames(["".concat(prefixCls, "-container"), className]),
          ref: function ref(_ref3) {
            _this._container = _ref3;
          }
        }, _this.getComponent());
      }

      if (_this._container) {
        if (!IS_REACT_16) {
          ReactDOM.unstable_renderSubtreeIntoContainer(_assertThisInitialized(_this), _this.getComponent(), _this._container);
          return null;
        }

        return /*#__PURE__*/ReactDOM.createPortal(_this.getComponent(), _this._container);
      }

      return null;
    };

    _this.createContainer = function () {
      var _this$props6 = _this.props,
          _this$props6$classNam = _this$props6.className,
          className = _this$props6$classNam === void 0 ? '' : _this$props6$classNam,
          prefixCls = _this$props6.prefixCls,
          mountContainer = _this$props6.mountContainer;

      if (mountContainer === false) {
        return;
      }

      if (!_this._container) {
        _this._container = document.createElement('div');
        _this._container.className += classnames(["".concat(prefixCls, "-container"), className]);
        _this.mountNode = getMountContainer(mountContainer);

        _this.mountNode.appendChild(_this._container);
      }

      return _this._container;
    };

    _this.state = {
      isPending: false
    };

    if (props.mountContainer !== false) {
      _this.createContainer();
    }

    return _this;
  }

  _createClass(Portal, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      if (this.popup) {
        Events.on(this.popup, 'webkitTransitionEnd', this.animationEnd);
        Events.on(this.popup, 'transitionend', this.animationEnd);
        Events.on(this.popup, 'webkitAnimationEnd', this.animationEnd);
        Events.on(this.popup, 'animationend', this.animationEnd);
      }

      this.handleAnimation();
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      var visible = this.props.visible;

      if (prevProps.visible !== visible) {
        this.handleAnimation();
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      if (this.popup) {
        Events.off(this.popup, 'webkitTransitionEnd', this.animationEnd);
        Events.off(this.popup, 'transitionend', this.animationEnd);
        Events.off(this.popup, 'webkitAnimationEnd', this.animationEnd);
        Events.off(this.popup, 'animationend', this.animationEnd);
      }

      clearTimeout(this.enterTimer);

      if (this._container && this.mountNode) {
        this.mountNode.removeChild(this._container);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var visible = this.props.visible;
      return /*#__PURE__*/React.createElement(Trigger, {
        visible: visible,
        onClose: this.onEsc
      }, this.renderPortal());
    }
  }]);

  return Portal;
}(PureComponent);

Portal.defaultProps = {
  prefixCls: 'za-popup',
  visible: false,
  mask: true,
  direction: 'bottom',
  animationType: 'fade',
  animationDuration: 200,
  maskType: Mask.defaultProps.type
};
export { Portal as default };