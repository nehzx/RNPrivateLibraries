import { shallow } from 'enzyme';
import React from 'react';
import Scroller from '../index';
import Events from '../../utils/events';
import throttle from '../../utils/throttle';
jest.mock('../../utils/throttle');
describe('Scroller', function () {
  var eventsOnSpy;
  var eventsOffSpy;
  var scrollContainerSpy;
  beforeEach(function () {
    eventsOnSpy = jest.spyOn(Events, 'on');
    eventsOffSpy = jest.spyOn(Events, 'off');
    scrollContainerSpy = jest.spyOn(Scroller.prototype, 'scrollContainer', 'get');
  });
  afterEach(function () {
    jest.restoreAllMocks();
  });
  it('should render null if no children', function () {
    var wrapper = shallow( /*#__PURE__*/React.createElement(Scroller, null));
    expect(wrapper.isEmptyRender()).toBeTruthy();
  });
  it('should bind scroll event on window container', function () {
    var divContainer = document.createElement('div');
    shallow( /*#__PURE__*/React.createElement(Scroller, {
      container: divContainer
    }));
    expect(scrollContainerSpy).toBeCalledTimes(2);
    expect(eventsOnSpy).toBeCalledWith(divContainer, 'scroll', expect.any(Function));
  });
  it('should not bind scroll event on window container by default', function () {
    shallow( /*#__PURE__*/React.createElement(Scroller, null));
    expect(scrollContainerSpy).toBeCalledTimes(2);
    expect(eventsOnSpy).toBeCalledWith(window, 'scroll', expect.any(Function));
  });
  it('should unbind event from the container when component wil unmount', function () {
    var wrapper = shallow( /*#__PURE__*/React.createElement(Scroller, null));
    wrapper.unmount();
    expect(eventsOffSpy).toBeCalledWith(window, 'scroll', expect.any(Function));
  });
  it('should throttle the scroll event handler with 250ms', function () {
    var mOnScroll = jest.fn();
    shallow( /*#__PURE__*/React.createElement(Scroller, {
      onScroll: mOnScroll
    }));
    expect(throttle).toBeCalledWith(mOnScroll, 250);
  });
  it('should not call scroll event handler if the component has been unmounted', function () {
    var onScrollRef;
    eventsOnSpy.mockImplementationOnce(function (_, __, onScroll) {
      onScrollRef = onScroll;
    });
    var mOnScroll = jest.fn();
    var wrapper = shallow( /*#__PURE__*/React.createElement(Scroller, {
      onScroll: mOnScroll
    }));
    wrapper.unmount();
    onScrollRef();
    expect(mOnScroll).not.toBeCalled();
  });
  it('should bind event for new container when component did update', function () {
    var wrapper = shallow( /*#__PURE__*/React.createElement(Scroller, null));
    var divContainer = document.createElement('div');
    expect(eventsOnSpy).toBeCalledWith(window, 'scroll', expect.any(Function));
    wrapper.setProps({
      container: divContainer
    });
    expect(eventsOnSpy).toBeCalledWith(divContainer, 'scroll', expect.any(Function));
    expect(eventsOnSpy).toBeCalledTimes(2);
  });
  describe('default container', function () {
    beforeEach(function () {
      jest.resetModules();
    });
    it("should use window as default container if it's DOM environment", function () {
      jest.doMock('../../utils/dom', function () {
        return {
          canUseDOM: true
        };
      }); // eslint-disable-next-line @typescript-eslint/no-var-requires

      var ScrollerCJS = require('../index').default;

      expect(ScrollerCJS.defaultProps.container).toEqual(window);
    });
    it("should set undefined for container if it's not DOM environment", function () {
      jest.doMock('../../utils/dom', function () {
        return {
          canUseDOM: false
        };
      }); // eslint-disable-next-line @typescript-eslint/no-var-requires

      var ScrollerCJS = require('../index').default;

      expect(ScrollerCJS.defaultProps.container).toBeUndefined();
    });
  });
});