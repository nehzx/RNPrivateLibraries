import _extends from "@babel/runtime/helpers/extends";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

import React, { PureComponent } from 'react';
import classnames from 'classnames';
import isEqual from 'lodash/isEqual';
import Picker from '../picker';
import parseProps from '../picker-view/utils/parseProps';
import removeFnFromProps from '../picker-view/utils/removeFnFromProps';

var Select = /*#__PURE__*/function (_PureComponent) {
  _inherits(Select, _PureComponent);

  var _super = _createSuper(Select);

  function Select(props) {
    var _this;

    _classCallCheck(this, Select);

    _this = _super.call(this, props);

    _this.handleClick = function () {
      var disabled = _this.props.disabled;

      if (disabled) {
        return false;
      }

      _this.setState({
        visible: true
      });
    };

    _this.onChange = function (selected) {
      var onChange = _this.props.onChange;

      if (typeof onChange === 'function') {
        onChange(selected);
      }
    };

    _this.onOk = function (selected) {
      var onOk = _this.props.onOk;

      _this.setState({
        selectValue: selected,
        visible: false
      }, function () {
        if (typeof onOk === 'function') {
          onOk(selected);
        }
      });
    };

    _this.onCancel = function () {
      var onCancel = _this.props.onCancel;

      _this.setState({
        visible: false
      });

      if (typeof onCancel === 'function') {
        onCancel();
      }
    };

    _this.state = {
      visible: false,
      selectValue: parseProps.isValueValid(props.defaultValue || props.value) && parseProps.getSource(props).objValue
    };
    return _this;
  }

  _createClass(Select, [{
    key: "render",
    value: function render() {
      var _classnames;

      var _this$props = this.props,
          prefixCls = _this$props.prefixCls,
          placeholder = _this$props.placeholder,
          className = _this$props.className,
          disabled = _this$props.disabled,
          displayRender = _this$props.displayRender,
          locale = _this$props.locale,
          value = _this$props.value,
          hasArrow = _this$props.hasArrow,
          others = _objectWithoutProperties(_this$props, ["prefixCls", "placeholder", "className", "disabled", "displayRender", "locale", "value", "hasArrow"]);

      var _this$state = this.state,
          visible = _this$state.visible,
          _this$state$selectVal = _this$state.selectValue,
          selectValue = _this$state$selectVal === void 0 ? [] : _this$state$selectVal;
      var cls = classnames(prefixCls, (_classnames = {}, _defineProperty(_classnames, "".concat(prefixCls, "--placeholder"), !selectValue.length), _defineProperty(_classnames, "".concat(prefixCls, "--disabled"), disabled), _defineProperty(_classnames, "".concat(prefixCls, "--arrow"), hasArrow), _classnames));
      return /*#__PURE__*/React.createElement("div", {
        className: cls,
        onClick: this.handleClick
      }, /*#__PURE__*/React.createElement("div", {
        className: "".concat(prefixCls, "__input")
      }, /*#__PURE__*/React.createElement("div", {
        className: "".concat(prefixCls, "__value")
      }, selectValue.length && displayRender(selectValue || []) || placeholder || locale.placeholder)), /*#__PURE__*/React.createElement(Picker, _extends({}, others, {
        className: className,
        visible: visible,
        value: value,
        onOk: this.onOk,
        onChange: this.onChange,
        onCancel: this.onCancel
      })));
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(props, state) {
      if (!isEqual(removeFnFromProps(props, ['onOk', 'onCancel', 'onChange']), removeFnFromProps(state.prevProps, ['onOk', 'onCancel', 'onChange']))) {
        return {
          prevProps: props,
          selectValue: parseProps.isValueValid(props.defaultValue || props.value) && parseProps.getSource(props).objValue
        };
      }

      return null;
    }
  }]);

  return Select;
}(PureComponent);

Select.defaultProps = {
  prefixCls: 'za-select',
  dataSource: [],
  valueMember: 'value',
  itemRender: function itemRender(data) {
    return data && data.label;
  },
  cols: Infinity,
  hasArrow: true,
  maskClosable: true,
  displayRender: function displayRender(selected) {
    return selected.map(function (item) {
      return item && item.label;
    });
  },
  onClick: function onClick() {}
};
export { Select as default };