import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

import React, { PureComponent } from 'react';
import { StyleSheet, Text, View, TextInput, TouchableOpacity } from 'react-native';
import stepperStyle from './style/index.native';

var getValue = function getValue(props, defaultValue) {
  if ('value' in props) {
    return props.value;
  }

  if ('defaultValue' in props) {
    return props.defaultValue;
  }

  return defaultValue;
};

var stepperStyles = StyleSheet.create(stepperStyle);

var Stepper = /*#__PURE__*/function (_PureComponent) {
  _inherits(Stepper, _PureComponent);

  var _super = _createSuper(Stepper);

  function Stepper(props) {
    var _this;

    _classCallCheck(this, Stepper);

    _this = _super.call(this, props);

    _this.onInputChange = function (value) {
      value = Number(value);
      var onInputChange = _this.props.onInputChange;

      _this.setState({
        value: value
      });

      if (typeof onInputChange === 'function') {
        onInputChange(value);
      }
    };

    _this.onInputBlur = function (value) {
      var _this$props = _this.props,
          min = _this$props.min,
          max = _this$props.max,
          onChange = _this$props.onChange;
      value = Number(value);

      if (value === '' || Number.isNaN(value)) {
        value = _this.state.lastValue;
      }

      if (min !== null && value < min) {
        value = min;
      }

      if (max !== null && value > max) {
        value = max;
      }

      _this.setState({
        value: value,
        lastValue: value
      });

      if (typeof onChange === 'function') {
        onChange(value);
      }
    };

    _this.onMinusClick = function () {
      var step = _this.props.step;
      var value = _this.state.value;

      if (_this.isMinusDisabled()) {
        return;
      }

      var newValue = Number(value) - step;

      _this.onInputBlur(newValue);
    };

    _this.onPlusClick = function () {
      var step = _this.props.step;
      var value = _this.state.value;

      if (_this.isPlusDisabled()) {
        return;
      }

      var newValue = Number(value) + step;

      _this.onInputBlur(newValue);
    };

    _this.isMinusDisabled = function () {
      var _this$props2 = _this.props,
          min = _this$props2.min,
          disabled = _this$props2.disabled;
      var value = _this.state.value;

      if (min === null) {
        return false;
      }

      return value <= min || disabled;
    };

    _this.isPlusDisabled = function () {
      var _this$props3 = _this.props,
          max = _this$props3.max,
          disabled = _this$props3.disabled;
      var value = _this.state.value;

      if (max === null) {
        return false;
      }

      return value >= max || disabled;
    };

    _this.renderButton = function (type) {
      var _this$props4 = _this.props,
          shape = _this$props4.shape,
          styles = _this$props4.styles;
      var isDisabled = type === 'minus' ? _this.isMinusDisabled() : _this.isPlusDisabled();
      var buttonStyle = [styles.button, styles["".concat(shape, "Button")], isDisabled && styles.disabledButton];
      var buttonTextStyle = [styles.buttonText, isDisabled && styles.disabledText];
      return /*#__PURE__*/React.createElement(TouchableOpacity, {
        activeOpacity: 0.6,
        style: buttonStyle,
        disabled: isDisabled,
        onPress: type === 'minus' ? _this.onMinusClick : _this.onPlusClick
      }, /*#__PURE__*/React.createElement(Text, {
        style: buttonTextStyle
      }, type === 'minus' ? '-' : '+'));
    };

    _this.renderInput = function () {
      var _this$props5 = _this.props,
          disabled = _this$props5.disabled,
          styles = _this$props5.styles;
      var inputStyle = [styles.input, disabled && styles.disabledText];
      return /*#__PURE__*/React.createElement(TextInput, {
        style: inputStyle,
        keyboardType: "numeric",
        value: _this.state.value.toString(),
        onChangeText: function onChangeText(value) {
          return _this.onInputChange(value);
        },
        onEndEditing: function onEndEditing() {
          return _this.onInputBlur(_this.state.value);
        },
        editable: !disabled,
        underlineColorAndroid: "transparent",
        returnKeyType: "done"
      });
    };

    _this.state = {
      value: getValue(props, 0),
      lastValue: getValue(props, 0)
    };
    return _this;
  }

  _createClass(Stepper, [{
    key: "render",
    value: function render() {
      var _this$props6 = this.props,
          styles = _this$props6.styles,
          style = _this$props6.style;
      var wrapperStyle = [styles.container, style];
      return /*#__PURE__*/React.createElement(View, {
        style: wrapperStyle
      }, this.renderButton('minus'), this.renderInput(), this.renderButton('plus'));
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(nextProps, state) {
      if ('value' in nextProps && nextProps.value !== state.prevValue) {
        var value = getValue(nextProps, 0);
        return {
          value: value,
          lastValue: value,
          prevValue: value
        };
      }

      return null;
    }
  }]);

  return Stepper;
}(PureComponent);

Stepper.defaultProps = {
  disabled: false,
  step: 1,
  styles: stepperStyles
};
export { Stepper as default };