import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

import React, { PureComponent, cloneElement } from 'react';
import classnames from 'classnames';
import Events from '../utils/events';
import Drag from '../drag';

var SwipeAction = /*#__PURE__*/function (_PureComponent) {
  _inherits(SwipeAction, _PureComponent);

  var _super = _createSuper(SwipeAction);

  function SwipeAction(props) {
    var _this;

    _classCallCheck(this, SwipeAction);

    _this = _super.call(this, props);
    _this.isOpen = false;
    _this.touchEnd = true;
    _this.wrap = void 0;
    _this.left = void 0;
    _this.right = void 0;

    _this.onDragStart = function () {
      if (_this.isOpen) {
        _this.touchEnd = false;

        _this.close();

        return;
      }

      _this.touchEnd = true;
    };

    _this.onDragMove = function (event, _ref) {
      var offsetX = _ref.offsetX,
          offsetY = _ref.offsetY;
      var disabled = _this.props.disabled;

      if (!_this.touchEnd || disabled) {
        return false;
      } // 拖动距离达到上限


      var offset = _this.props.offset;
      var offsetLeft = _this.state.offsetLeft;
      var btnsLeftWidth = _this.left && _this.left.offsetWidth;
      var btnsRightWidth = _this.right && _this.right.offsetWidth;

      if (offsetX > 0 && (!btnsLeftWidth || offsetLeft >= btnsLeftWidth + offset)) {
        return false;
      }

      if (offsetX < 0 && (!btnsRightWidth || offsetLeft <= -btnsRightWidth - offset)) {
        return false;
      } // 判断滚屏情况


      var distanceX = Math.abs(offsetX);
      var distanceY = Math.abs(offsetY);

      if (distanceX < 5 || distanceX >= 5 && distanceY >= 0.3 * distanceX) {
        return false;
      }

      if (!Events.supportsPassiveEvents) {
        event.preventDefault();
      }

      _this.doTransition({
        offsetLeft: offsetX,
        animationDuration: 0
      });

      return true;
    };

    _this.onDragEnd = function (_event, _ref2) {
      var offsetX = _ref2.offsetX,
          startTime = _ref2.startTime;
      var _this$props = _this.props,
          animationDuration = _this$props.animationDuration,
          moveDistanceRatio = _this$props.moveDistanceRatio,
          moveTimeSpan = _this$props.moveTimeSpan;
      var timeSpan = new Date().getTime() - startTime.getTime();
      var btnsLeftWidth = _this.left && _this.left.offsetWidth;
      var btnsRightWidth = _this.right && _this.right.offsetWidth; // if (this.left.offsetWidth) {
      //   this.props.onOpen!();
      // }

      var distanceX = 0;
      var isOpen = false;

      if (offsetX / btnsLeftWidth > moveDistanceRatio || offsetX > 0 && timeSpan <= moveTimeSpan) {
        distanceX = btnsLeftWidth;
        isOpen = true;
      } else if (offsetX / btnsRightWidth < -moveDistanceRatio || offsetX < 0 && timeSpan <= moveTimeSpan) {
        distanceX = -btnsRightWidth;
        isOpen = true;
      }

      if (isOpen && !_this.isOpen) {
        // 打开
        _this.open(distanceX);
      } else if (!isOpen && _this.isOpen) {
        // 关闭
        _this.close();
      } else {
        // 还原
        _this.doTransition({
          offsetLeft: distanceX,
          animationDuration: animationDuration
        });
      }
    };

    _this.onCloseSwipe = function (e) {
      if (!_this.wrap) {
        return;
      }

      if (_this.isOpen) {
        var pNode = function (node) {
          while (node.parentNode && node.parentNode !== document.body) {
            if (node === _this.wrap) {
              return node;
            }

            node = node.parentNode;
          }
        }(e.target);

        if (!pNode) {
          e.preventDefault();
          _this.touchEnd = true;

          _this.close();
        }
      }
    };

    _this.open = function (offsetLeft) {
      var _this$props2 = _this.props,
          animationDuration = _this$props2.animationDuration,
          onOpen = _this$props2.onOpen;
      _this.isOpen = true;

      _this.doTransition({
        offsetLeft: offsetLeft,
        animationDuration: animationDuration
      });

      if (typeof onOpen === 'function') {
        onOpen();
      }
    };

    _this.close = function () {
      var _this$props3 = _this.props,
          animationDuration = _this$props3.animationDuration,
          onClose = _this$props3.onClose;
      _this.isOpen = false;

      _this.doTransition({
        offsetLeft: 0,
        animationDuration: animationDuration
      });

      if (typeof onClose === 'function') {
        onClose();
      }
    };

    _this.doTransition = function (_ref3) {
      var offsetLeft = _ref3.offsetLeft,
          animationDuration = _ref3.animationDuration;

      _this.setState({
        offsetLeft: offsetLeft,
        animationDuration: animationDuration
      });
    };

    _this.renderButton = function (button, index) {
      return /*#__PURE__*/cloneElement(button, {
        key: +index,
        onClick: function onClick(e) {
          var onClick = button.props.onClick;
          onClick && onClick(e);

          if (_this.props.autoClose) {
            _this.close();
          }
        }
      });
    };

    _this.renderButtons = function (buttons, direction) {
      if (!buttons || buttons.length === 0) {
        return;
      }

      var prefixCls = _this.props.prefixCls;
      var cls = classnames("".concat(prefixCls, "__actions"), "".concat(prefixCls, "__actions--").concat(direction));
      return /*#__PURE__*/React.createElement("div", {
        className: cls,
        ref: function ref(el) {
          _this[direction] = el;
        }
      }, buttons.map(_this.renderButton));
    };

    _this.state = {
      offsetLeft: 0
    };
    return _this;
  }

  _createClass(SwipeAction, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      Events.on(document.body, 'touchstart', this.onCloseSwipe);
      Events.on(document.body, 'click', this.onCloseSwipe);
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      Events.off(document.body, 'touchstart', this.onCloseSwipe);
      Events.off(document.body, 'click', this.onCloseSwipe);
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props4 = this.props,
          prefixCls = _this$props4.prefixCls,
          className = _this$props4.className,
          left = _this$props4.left,
          right = _this$props4.right,
          children = _this$props4.children;
      var _this$state = this.state,
          offsetLeft = _this$state.offsetLeft,
          animationDuration = _this$state.animationDuration;
      var cls = classnames(prefixCls, className);
      var style = {
        WebkitTransitionDuration: "".concat(animationDuration, "ms"),
        transitionDuration: "".concat(animationDuration, "ms"),
        WebkitTransform: "translate3d(".concat(offsetLeft, "px, 0, 0)"),
        transform: "translate3d(".concat(offsetLeft, "px, 0, 0)")
      };
      return left || right ? /*#__PURE__*/React.createElement("div", {
        className: cls,
        ref: function ref(wrap) {
          _this2.wrap = wrap;
        }
      }, this.renderButtons(left, 'left'), this.renderButtons(right, 'right'), /*#__PURE__*/React.createElement(Drag, {
        onDragStart: this.onDragStart,
        onDragMove: this.onDragMove,
        onDragEnd: this.onDragEnd
      }, /*#__PURE__*/React.createElement("div", {
        className: "".concat(prefixCls, "__content"),
        style: style
      }, children))) : children;
    }
  }]);

  return SwipeAction;
}(PureComponent);

SwipeAction.defaultProps = {
  prefixCls: 'za-swipe-action',
  left: [],
  right: [],
  moveDistanceRatio: 0.5,
  moveTimeSpan: 300,
  animationDuration: 300,
  offset: 10,
  autoClose: true
};
export { SwipeAction as default };