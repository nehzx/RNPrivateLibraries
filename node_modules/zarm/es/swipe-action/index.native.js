import _extends from "@babel/runtime/helpers/extends";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

import React, { PureComponent, cloneElement } from 'react';
import { View, PanResponder, Animated, StyleSheet } from 'react-native';
import swipeActionStyle from './style/index.native';
var styles = StyleSheet.create(swipeActionStyle);

var SwipeAction = /*#__PURE__*/function (_PureComponent) {
  _inherits(SwipeAction, _PureComponent);

  var _super = _createSuper(SwipeAction);

  function SwipeAction(props) {
    var _this;

    _classCallCheck(this, SwipeAction);

    _this = _super.call(this, props);
    _this.isOpen = false;
    _this.touchEnd = true;
    _this.btnsLeftWidth = 0;
    _this.btnsRightWidth = 0;
    _this.startTime = void 0;
    _this.offsetLeft = void 0;
    _this.panResponder = void 0;

    _this.handleStartPanResponder = function () {
      if (_this.isOpen) {
        _this.touchEnd = false;

        _this.close();

        return false;
      }

      _this.startTime = new Date();
      _this.touchEnd = true;
      return true;
    };

    _this.handlePanResponderMove = function (_event, _ref) {
      var dx = _ref.dx,
          dy = _ref.dy;
      var disabled = _this.props.disabled;

      if (!_this.touchEnd || disabled) {
        return;
      } // 拖动距离达到上限


      var offset = _this.props.offset;

      if (dx > 0 && (!_this.btnsLeftWidth || dx >= _this.btnsLeftWidth + offset) || dx < 0 && (!_this.btnsRightWidth || dx <= -_this.btnsRightWidth - offset)) {
        return false;
      } // 判断滚屏情况


      var distanceX = Math.abs(dx);
      var distanceY = Math.abs(dy);

      if (distanceX < 5 || distanceX >= 5 && distanceY >= 0.3 * distanceX) {
        return false;
      }

      _this.doTransition({
        offsetLeft: dx,
        animationDuration: 0
      });
    };

    _this.handlePanResponderRelease = function (_event, _ref2) {
      var dx = _ref2.dx;
      var _this$props = _this.props,
          animationDuration = _this$props.animationDuration,
          moveDistanceRatio = _this$props.moveDistanceRatio,
          moveTimeSpan = _this$props.moveTimeSpan;

      var timeSpan = new Date().getTime() - _this.startTime.getTime();

      var distanceX = 0;
      var isOpen = false;

      if (dx / _this.btnsLeftWidth > moveDistanceRatio || dx > 0 && timeSpan <= moveTimeSpan) {
        distanceX = _this.btnsLeftWidth;
        isOpen = true;
      } else if (dx / _this.btnsRightWidth < -moveDistanceRatio || dx < 0 && timeSpan <= moveTimeSpan) {
        distanceX = -_this.btnsRightWidth;
        isOpen = true;
      }

      if (isOpen && !_this.isOpen) {
        // 打开
        _this.open(distanceX);
      } else if (!isOpen && _this.isOpen) {
        // 关闭
        _this.close();
      } else {
        // 还原
        _this.doTransition({
          offsetLeft: distanceX,
          animationDuration: animationDuration
        });
      }
    };

    _this.getBtnsWidth = function (_ref3, direction) {
      var nativeEvent = _ref3.nativeEvent;
      var width = nativeEvent.layout.width;

      if (direction === 'left') {
        _this.btnsLeftWidth = width;
      } else {
        _this.btnsRightWidth = width;
      }
    };

    _this.open = function (offsetLeft) {
      var _this$props2 = _this.props,
          animationDuration = _this$props2.animationDuration,
          onOpen = _this$props2.onOpen;
      _this.isOpen = true;

      _this.doTransition({
        offsetLeft: offsetLeft,
        animationDuration: animationDuration
      });

      if (typeof onOpen === 'function') {
        onOpen();
      }
    };

    _this.close = function () {
      var _this$props3 = _this.props,
          animationDuration = _this$props3.animationDuration,
          onClose = _this$props3.onClose;
      _this.isOpen = false;

      _this.doTransition({
        offsetLeft: 0,
        animationDuration: animationDuration
      });

      if (typeof onClose === 'function') {
        onClose();
      }
    };

    _this.doTransition = function (_ref4) {
      var offsetLeft = _ref4.offsetLeft,
          animationDuration = _ref4.animationDuration;
      Animated.timing(_this.offsetLeft, {
        toValue: offsetLeft,
        duration: animationDuration,
        useNativeDriver: true
      }).start();
    };

    _this.renderButton = function (button, index) {
      return /*#__PURE__*/cloneElement(button, {
        key: +index,
        styles: _objectSpread(_objectSpread({}, button.props.styles), StyleSheet.create({
          textStyle: swipeActionStyle.textStyle
        })),
        onClick: function onClick(e) {
          var onClick = button.props.onClick;

          if (onClick) {
            onClick(e);
          }

          if (_this.props.autoClose) {
            _this.close();
          }
        }
      });
    };

    _this.renderButtons = function (buttons, direction) {
      if (!buttons || buttons.length === 0) {
        return;
      }

      var btnStyle = [styles.btn, styles["".concat(direction, "Btn")]];
      return /*#__PURE__*/React.createElement(View, {
        style: btnStyle,
        onLayout: function onLayout(e) {
          return _this.getBtnsWidth(e, direction);
        }
      }, buttons.map(_this.renderButton));
    };

    _this.offsetLeft = new Animated.Value(0);
    _this.panResponder = PanResponder.create({
      onStartShouldSetPanResponder: _this.handleStartPanResponder,
      onPanResponderMove: _this.handlePanResponderMove,
      onPanResponderRelease: _this.handlePanResponderRelease
    });
    return _this;
  }

  _createClass(SwipeAction, [{
    key: "render",
    value: function render() {
      var viewStyle = {
        transform: [{
          translateX: this.offsetLeft
        }]
      };
      var _this$props4 = this.props,
          left = _this$props4.left,
          right = _this$props4.right,
          children = _this$props4.children;
      return left || right ? /*#__PURE__*/React.createElement(View, {
        style: styles.wrapper
      }, this.renderButtons(left, 'left'), this.renderButtons(right, 'right'), /*#__PURE__*/React.createElement(Animated.View, _extends({
        style: [styles.content, viewStyle]
      }, this.panResponder.panHandlers), children)) : children;
    }
  }]);

  return SwipeAction;
}(PureComponent);

SwipeAction.defaultProps = {
  left: [],
  right: [],
  moveDistanceRatio: 0.5,
  moveTimeSpan: 300,
  animationDuration: 300,
  offset: 10,
  autoClose: true,
  disabled: false
};
export { SwipeAction as default };