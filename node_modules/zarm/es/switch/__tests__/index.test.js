import React from 'react';
import { render, shallow } from 'enzyme';
import toJson from 'enzyme-to-json';
import Switch from '../index';
describe('Switch', function () {
  afterEach(function () {
    jest.restoreAllMocks();
  });
  describe('#getChecked', function () {
    it('should initialize state with props.checked', function () {
      var wrapper1 = shallow( /*#__PURE__*/React.createElement(Switch, {
        checked: true
      }));
      expect(wrapper1.state('checked')).toBeTruthy();
      var wrapper2 = shallow( /*#__PURE__*/React.createElement(Switch, {
        checked: false
      }));
      expect(wrapper2.state('checked')).toBeFalsy();
    });
    it('should initialize state with props.defaultChecked', function () {
      var wrapper1 = shallow( /*#__PURE__*/React.createElement(Switch, {
        defaultChecked: true
      }));
      expect(wrapper1.state('checked')).toBeTruthy();
      var wrapper2 = shallow( /*#__PURE__*/React.createElement(Switch, {
        defaultChecked: false
      }));
      expect(wrapper2.state('checked')).toBeFalsy();
    });
    it('should initialize state with default value', function () {
      var wrapper1 = shallow( /*#__PURE__*/React.createElement(Switch, null));
      expect(wrapper1.state('checked')).toBeFalsy();
    });
  });
  describe('static getDerivedStateFromProps', function () {
    it('should get derived state from props.checked', function () {
      expect(Switch.getDerivedStateFromProps({
        checked: false
      })).toEqual({
        checked: false
      });
      expect(Switch.getDerivedStateFromProps({
        checked: true
      })).toEqual({
        checked: true
      });
    });
  });
  describe('snapshot', function () {
    it('renders correctly', function () {
      var wrapper = render( /*#__PURE__*/React.createElement(Switch, null));
      expect(toJson(wrapper)).toMatchSnapshot();
    });
    it('defaultChecked', function () {
      var wrapper = render( /*#__PURE__*/React.createElement(Switch, {
        defaultChecked: true
      }));
      expect(toJson(wrapper)).toMatchSnapshot();
    });
  });
  describe('behaviour', function () {
    it('should switch on if defaultChecked is true', function () {
      var wrapper = shallow( /*#__PURE__*/React.createElement(Switch, {
        defaultChecked: true
      }));
      var inputWrapper = wrapper.find('input');
      expect(inputWrapper.prop('disabled')).toBeFalsy();
      expect(inputWrapper.prop('value')).toEqual('on');
      expect(inputWrapper.prop('checked')).toBeTruthy();
    });
    it('should switch off and disabled', function () {
      var wrapper = shallow( /*#__PURE__*/React.createElement(Switch, {
        disabled: true
      }));
      var inputWrapper = wrapper.find('input');
      expect(inputWrapper.prop('disabled')).toBeTruthy();
      expect(inputWrapper.prop('value')).toEqual('off');
      expect(inputWrapper.prop('checked')).toBeFalsy();
    });
    it('should switch on and disabled', function () {
      var wrapper = shallow( /*#__PURE__*/React.createElement(Switch, {
        defaultChecked: true,
        disabled: true
      }));
      var inputWrapper = wrapper.find('input');
      expect(inputWrapper.prop('disabled')).toBeTruthy();
      expect(inputWrapper.prop('value')).toEqual('on');
      expect(inputWrapper.prop('checked')).toBeTruthy();
    });
    it('should handle change event without updating state', function () {
      var onChange = jest.fn();
      var wrapper = shallow( /*#__PURE__*/React.createElement(Switch, {
        checked: true,
        onChange: onChange
      }));
      expect(wrapper.state('checked')).toBeTruthy();
      wrapper.find('input').simulate('change');
      expect(onChange).toBeCalledWith(false);
      expect(wrapper.state('checked')).toBeTruthy();
      expect(wrapper.find('input').prop('value')).toEqual('on');
    });
    it('should handle change event and update state if props.checked is not existed', function () {
      var onChange = jest.fn();
      var wrapper = shallow( /*#__PURE__*/React.createElement(Switch, {
        onChange: onChange
      }));
      expect(wrapper.state('checked')).toBeFalsy();
      expect(wrapper.find('input').prop('value')).toEqual('off');
      wrapper.find('input').simulate('change');
      expect(onChange).toBeCalledWith(true);
      expect(wrapper.state('checked')).toBeTruthy();
      expect(wrapper.find('input').prop('value')).toEqual('on');
    });
    it('should do nothing if switch is disabled', function () {
      var onChange = jest.fn();
      var wrapper = shallow( /*#__PURE__*/React.createElement(Switch, {
        disabled: true,
        onChange: onChange
      }));
      expect(wrapper.hasClass('za-switch--disabled')).toBeTruthy();
      expect(wrapper.find('input').prop('disabled')).toBeTruthy();
      wrapper.find('input').simulate('change');
      expect(onChange).not.toBeCalled();
    });
    it('should get derived state from nextProps', function () {
      var getDerivedStateFromPropsSpy = jest.spyOn(Switch, 'getDerivedStateFromProps');
      var wrapper = shallow( /*#__PURE__*/React.createElement(Switch, null));
      expect(wrapper.state('checked')).toBeFalsy();
      expect(getDerivedStateFromPropsSpy).toBeCalledWith({
        prefixCls: 'za-switch',
        disabled: false
      }, {
        checked: false
      });
      wrapper.setProps({
        checked: true
      });
      expect(wrapper.state('checked')).toBeTruthy();
      expect(getDerivedStateFromPropsSpy).toBeCalledWith({
        prefixCls: 'za-switch',
        disabled: false,
        checked: true
      }, {
        checked: false
      });
    });
    it('receive new checked when disabled', function () {
      var onChange = jest.fn();
      var wrapper = shallow( /*#__PURE__*/React.createElement(Switch, {
        disabled: true,
        onChange: onChange
      }));
      wrapper.find('input').simulate('change', {
        target: {
          checked: true
        }
      });
      expect(onChange).not.toBeCalled();
    });
  });
});