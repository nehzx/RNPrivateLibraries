import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

import React, { PureComponent, cloneElement } from 'react';
import classnames from 'classnames';

var TabBar = /*#__PURE__*/function (_PureComponent) {
  _inherits(TabBar, _PureComponent);

  var _super = _createSuper(TabBar);

  function TabBar() {
    var _this;

    _classCallCheck(this, TabBar);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _this.onChildChange = function (value) {
      var onChange = _this.props.onChange;

      if (typeof onChange === 'function') {
        onChange(value);
      }
    };

    _this.getSelected = function (index, itemKey) {
      var _this$props = _this.props,
          activeKey = _this$props.activeKey,
          defaultActiveKey = _this$props.defaultActiveKey;

      if (!activeKey) {
        if (!defaultActiveKey && index === 0) {
          return true;
        }

        return defaultActiveKey === itemKey;
      }

      return activeKey === itemKey;
    };

    return _this;
  }

  _createClass(TabBar, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props2 = this.props,
          visible = _this$props2.visible,
          prefixCls = _this$props2.prefixCls,
          className = _this$props2.className,
          children = _this$props2.children,
          style = _this$props2.style;
      var cls = classnames(prefixCls, className, _defineProperty({}, "".concat(prefixCls, "--hidden"), !visible));
      var items = React.Children.map(children, function (element, index) {
        if (! /*#__PURE__*/React.isValidElement(element)) return null;
        var itemKey = element.props.itemKey || index;
        return /*#__PURE__*/cloneElement(element, {
          key: index,
          disabled: element.props.disabled,
          onChange: function onChange() {
            return _this2.onChildChange(itemKey);
          },
          badge: element.props.badge,
          title: element.props.title,
          icon: element.props.icon,
          itemKey: itemKey,
          style: element.props.style,
          selected: _this2.getSelected(index, itemKey)
        });
      });
      return /*#__PURE__*/React.createElement("div", {
        className: cls,
        style: style
      }, items);
    }
  }]);

  return TabBar;
}(PureComponent);

TabBar.Item = void 0;
TabBar.defaultProps = {
  prefixCls: 'za-tab-bar',
  visible: true
};
export default TabBar;