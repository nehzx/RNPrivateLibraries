import React from 'react';
import { render, mount, shallow } from 'enzyme';
import toJson from 'enzyme-to-json';
import TabBar from '../index';
import TabBarItem from '../TabBarItem';
import Badge from '../../badge';
var activeIcon = /*#__PURE__*/React.createElement("div", {
  style: {
    width: '24px',
    height: '24px',
    background: 'url(//cdn-health.zhongan.com/zarm/home-active.svg) top left / 24px 24px no-repeat'
  }
});
var icon = /*#__PURE__*/React.createElement("div", {
  style: {
    width: '24px',
    height: '24px',
    background: 'url(//cdn-health.zhongan.com/zarm/home.svg) top left / 24px 24px no-repeat'
  }
});
describe('TabBarItem', function () {
  it('should render with a badge', function () {
    var wrapper = shallow( /*#__PURE__*/React.createElement(TabBarItem, {
      itemKey: "1",
      badge: {
        theme: 'primary'
      }
    }));
    expect(wrapper.prop('className')).toBe('za-tab-bar__item');
    expect(wrapper.prop('style')).toBeUndefined();
    expect(wrapper.find(Badge)).toBeTruthy();
    expect(wrapper.find(Badge).prop('theme')).toEqual('primary');
  });
  it('should render with content', function () {
    var wrapper = shallow( /*#__PURE__*/React.createElement(TabBarItem, {
      itemKey: "1",
      title: /*#__PURE__*/React.createElement("h1", null, "test"),
      icon: /*#__PURE__*/React.createElement("span", null, "test icon")
    }));
    expect(wrapper.find('.za-tab-bar__icon')).toBeTruthy();
    expect(wrapper.find('.za-tab-bar__icon').children()).toHaveLength(1);
    expect(wrapper.find('.za-tab-bar__icon').children().at(0).text()).toBe('test icon');
    expect(wrapper.find('.za-tab-bar__icon').children().at(0).type()).toBe('span');
    expect(wrapper.find('.za-tab-bar__title')).toBeTruthy();
    expect(wrapper.find('.za-tab-bar__title').contains( /*#__PURE__*/React.createElement("h1", null, "test"))).toBeTruthy();
  });
  it('should handle change event', function () {
    var mOnChange = jest.fn();
    var wrapper = shallow( /*#__PURE__*/React.createElement(TabBarItem, {
      itemKey: 1,
      onChange: mOnChange
    }));
    wrapper.simulate('click');
    expect(mOnChange).toBeCalledWith(1);
  });
  it('should render with icon if it is selected', function () {
    var wrapper = shallow( /*#__PURE__*/React.createElement(TabBarItem, {
      itemKey: "1",
      selected: true,
      title: /*#__PURE__*/React.createElement("h1", null, "test"),
      icon: /*#__PURE__*/React.createElement("span", null, "test icon")
    }));
    expect(wrapper.prop('className')).toEqual('za-tab-bar__item za-tab-bar--active');
    expect(wrapper.find('.za-tab-bar__icon').contains( /*#__PURE__*/React.createElement("span", null, "test icon"))).toBeTruthy();
  });
  it('should render with active icon if it is selected', function () {
    var wrapper = shallow( /*#__PURE__*/React.createElement(TabBarItem, {
      itemKey: "1",
      selected: true,
      title: /*#__PURE__*/React.createElement("h1", null, "test"),
      icon: /*#__PURE__*/React.createElement("span", null, "active icon")
    }));
    expect(wrapper.find('.za-tab-bar__icon').contains( /*#__PURE__*/React.createElement("span", null, "active icon"))).toBeTruthy();
  });
  it('should render inline style', function () {
    var wrapper = shallow( /*#__PURE__*/React.createElement(TabBarItem, {
      itemKey: "1",
      style: {
        color: 'red',
        display: 'flex'
      }
    }));
    expect(wrapper.prop('style')).toHaveProperty('color', 'red');
    expect(wrapper.prop('style')).toHaveProperty('display', 'flex');
  });
});
describe('TabBar', function () {
  describe('snapshot', function () {
    it('should render correctly', function () {
      var wrapper = render( /*#__PURE__*/React.createElement(TabBar, null, /*#__PURE__*/React.createElement(TabBar.Item, {
        itemKey: "home",
        title: "\u4E3B\u9875",
        icon: icon,
        activeIcon: activeIcon
      })));
      expect(toJson(wrapper)).toMatchSnapshot();
    });
    it('with defaultActiveKey', function () {
      var wrapper = render( /*#__PURE__*/React.createElement(TabBar, {
        defaultActiveKey: "home"
      }, /*#__PURE__*/React.createElement(TabBar.Item, {
        itemKey: "home",
        title: "\u4E3B\u9875",
        icon: icon,
        activeIcon: activeIcon
      })));
      expect(toJson(wrapper)).toMatchSnapshot();
    });
    it('with activeKey', function () {
      var wrapper = render( /*#__PURE__*/React.createElement(TabBar, {
        activeKey: "home"
      }, /*#__PURE__*/React.createElement(TabBar.Item, {
        itemKey: "home",
        title: "\u4E3B\u9875",
        icon: icon,
        activeIcon: activeIcon
      })));
      expect(toJson(wrapper)).toMatchSnapshot();
    });
  });
  it('should handle change event', function () {
    var onChange = jest.fn();
    var wrapper = mount( /*#__PURE__*/React.createElement(TabBar, {
      defaultActiveKey: "home",
      onChange: onChange
    }, /*#__PURE__*/React.createElement(TabBar.Item, {
      itemKey: "home",
      title: "\u4E3B\u9875",
      icon: icon,
      activeIcon: activeIcon
    })));
    wrapper.find('.za-tab-bar__item').first().simulate('click');
    expect(onChange).toBeCalledWith('home');
  });
  it('should select first tab bar item if activeKey and defaultActivceKey are not existed', function () {
    var wrapper = shallow( /*#__PURE__*/React.createElement(TabBar, {
      visible: false,
      className: "test"
    }, /*#__PURE__*/React.createElement(TabBar.Item, {
      itemKey: "home",
      title: "\u4E3B\u9875"
    }), /*#__PURE__*/React.createElement(TabBar.Item, {
      itemKey: "about us",
      title: "\u5173\u4E8E\u6211\u4EEC"
    })));
    expect(wrapper.childAt(0).prop('selected')).toBeTruthy();
    expect(wrapper.childAt(1).prop('selected')).toBeFalsy();
  });
  it('should render icon if selected is false(defaultActivceKey is not equal with itemKey)', function () {
    var onChange = jest.fn();
    var wrapper = mount( /*#__PURE__*/React.createElement(TabBar, {
      defaultActiveKey: "home",
      onChange: onChange
    }, /*#__PURE__*/React.createElement(TabBar.Item, {
      itemKey: "badge",
      title: "\u4E3B\u9875",
      icon: icon,
      activeIcon: activeIcon,
      badge: {
        shape: 'circle',
        text: '3'
      }
    })));
    wrapper.find(TabBar.Item).first().simulate('click');
    expect(onChange).toBeCalledWith('badge');
    expect(wrapper.find('.za-tab-bar__icon').contains(icon)).toBeTruthy();
  });
  it('should selected tab bar item if activeKey is equal with itemKey', function () {
    var wrapper = shallow( /*#__PURE__*/React.createElement(TabBar, {
      defaultActiveKey: "home"
    }, /*#__PURE__*/React.createElement(TabBar.Item, {
      itemKey: "home",
      title: "\u4E3B\u9875"
    })));
    expect(wrapper.find(TabBar.Item).prop('selected')).toBeTruthy();
  });
  it('should use element index as the fallback itemKey', function () {
    var wrapper = shallow( /*#__PURE__*/React.createElement(TabBar, null, /*#__PURE__*/React.createElement(TabBar.Item, null), /*#__PURE__*/React.createElement(TabBar.Item, null)));
    expect(wrapper.childAt(0).prop('itemKey')).toBe(0);
    expect(wrapper.childAt(1).prop('itemKey')).toBe(1);
  });
  it('should have hidden class name if visible prop is false', function () {
    var wrapper = shallow( /*#__PURE__*/React.createElement(TabBar, {
      visible: false,
      className: "test"
    }, /*#__PURE__*/React.createElement(TabBar.Item, {
      itemKey: "home",
      title: "\u4E3B\u9875"
    })));
    expect(wrapper.hasClass('test')).toBeTruthy();
    expect(wrapper.hasClass('za-tab-bar')).toBeTruthy();
    expect(wrapper.hasClass('za-tab-bar--hidden')).toBeTruthy();
  });
  it('should render children with extra props', function () {
    var wrapper = shallow( /*#__PURE__*/React.createElement(TabBar, {
      visible: false,
      className: "test"
    }, /*#__PURE__*/React.createElement(TabBar.Item, {
      itemKey: "home",
      title: "\u4E3B\u9875"
    }), /*#__PURE__*/React.createElement(TabBar.Item, {
      itemKey: "about us",
      title: "\u5173\u4E8E\u6211\u4EEC"
    })));
    expect(wrapper.childAt(0).props()).toEqual(expect.objectContaining({
      title: '主页',
      itemKey: 'home',
      onChange: expect.any(Function),
      selected: true
    }));
    expect(wrapper.childAt(1).props()).toEqual(expect.objectContaining({
      title: '关于我们',
      itemKey: 'about us',
      onChange: expect.any(Function),
      selected: false
    }));
  });
});