import { shallow } from 'enzyme';
import React from 'react';
import Trigger from '../trigger';
describe('Trigger', function () {
  afterEach(function () {
    Trigger.instanceList = [];
    Trigger.count = 0;
    jest.restoreAllMocks();
  });
  describe('static getDerivedStateFromProps', function () {
    it('should return null if visible prop is false and instance list of Trigger component is empty', function () {
      var props = {
        disabled: false,
        visible: true
      };
      var actual = Trigger.getDerivedStateFromProps(props);
      expect(actual).toBeNull();
      expect(Trigger.instanceList).toEqual([]);
    });
    it('should push onclose function to instance list if visible is true and the onclose function does not exist in instance list', function () {
      var props = {
        disabled: false,
        visible: true,
        onClose: jest.fn()
      };
      var actual = Trigger.getDerivedStateFromProps(props);
      expect(actual).toBeNull();
      expect(Trigger.instanceList).toEqual([props.onClose]);
    });
  });
  describe('static onKeydown', function () {
    it('should handle escape keyboard event using the last handler of instance list', function () {
      var mHandler = jest.fn(); // eslint-disable-next-line dot-notation

      mHandler['disabled'] = false;
      Trigger.instanceList = [mHandler];
      var mEvent = {
        keyCode: 27
      };
      Trigger.onKeydown(mEvent);
      expect(mHandler).toBeCalledTimes(1);
    });
    it('should do nothing if the instance list is empty', function () {
      var mEvent = {
        keyCode: 27
      };
      expect(Trigger.onKeydown(mEvent)).toBeUndefined();
    });
    it('should do nothing if last handler is disabled', function () {
      var mHandler = jest.fn(); // eslint-disable-next-line dot-notation

      mHandler['disabled'] = true;
      Trigger.instanceList = [mHandler];
      var mEvent = {
        keyCode: 27
      };
      Trigger.onKeydown(mEvent);
      expect(mHandler).not.toBeCalled();
    });
  });
  it('should add keydown event listener for document.body and increase the counter', function () {
    var addEventListenerSpy = jest.spyOn(document.body, 'addEventListener');
    shallow( /*#__PURE__*/React.createElement(Trigger, {
      visible: true,
      disabled: false
    }));
    shallow( /*#__PURE__*/React.createElement(Trigger, {
      visible: true,
      disabled: false
    }));
    expect(addEventListenerSpy).toBeCalledWith('keydown', Trigger.onKeydown);
    expect(addEventListenerSpy).toBeCalledTimes(1);
    expect(Trigger.count).toBe(2);
  });
  it('should remove keydown event handler from document.body and instance list', function () {
    var removeEventListenerSpy = jest.spyOn(document.body, 'removeEventListener');
    var mOnClose = jest.fn();
    var wrapper = shallow( /*#__PURE__*/React.createElement(Trigger, {
      visible: true,
      disabled: false,
      onClose: mOnClose
    }));
    expect(Trigger.instanceList).toEqual([mOnClose]);
    expect(Trigger.count).toBe(1);
    wrapper.unmount();
    expect(Trigger.instanceList).toHaveLength(0);
    expect(Trigger.count).toBe(0);
    expect(removeEventListenerSpy).toBeCalledWith('keydown', Trigger.onKeydown);
    expect(removeEventListenerSpy).toBeCalledTimes(1);
  });
});