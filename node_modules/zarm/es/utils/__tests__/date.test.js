import dateUtils from '../date';
import { date1 } from '../../../tests/testData/date';
describe('utils', function () {
  describe('date', function () {
    describe('#parseDate', function () {
      it('should parse date if date is an instance of Date', function () {
        var date = new Date(2020, 1, 1);
        var actual = dateUtils.parseDate(date);
        expect(actual).toBeInstanceOf(Date);
        expect(actual).toEqual(date);
      });
      it('should parse date if date is a string', function () {
        var date = '2020-01-01';
        var actual = dateUtils.parseDate(date);
        expect(actual).toBeInstanceOf(Date);
        expect(actual).toEqual(new Date('2020/01/01'));
      });
      it('should parse date if date is a timestamp string', function () {
        var date = '1612244846140';
        var actual = dateUtils.parseDate(date);
        expect(actual).toBeInstanceOf(Date);
        expect(actual).toEqual(new Date(+date));
      });
      it('should parse date if date is timestamp number', function () {
        var date = 1612244846140;
        var actual = dateUtils.parseDate(date);
        expect(actual).toBeInstanceOf(Date);
        expect(actual).toEqual(new Date(+date));
      });
    });
    describe('#cloneDate', function () {
      it('should clone date without modifying', function () {
        var actual = dateUtils.cloneDate(date1, 'y', 0);
        expect(actual).toBeInstanceOf(Date);
        expect(actual).toMatchInlineSnapshot("2019-04-23T00:00:00.000Z");
      });
      it('should clone date with incremental year', function () {
        var actual = dateUtils.cloneDate(date1, 'y', 1);
        expect(actual).toBeInstanceOf(Date);
        expect(actual).toMatchInlineSnapshot("2020-04-23T00:00:00.000Z");
      });
      it('should clone date with full year', function () {
        var actual = dateUtils.cloneDate(date1, 'yyyy', 2000);
        expect(actual).toBeInstanceOf(Date);
        expect(actual).toMatchInlineSnapshot("2000-04-23T00:00:00.000Z");
      });
      it('should clone date with incremental month', function () {
        var actual = dateUtils.cloneDate(date1, 'm', 1);
        expect(actual).toBeInstanceOf(Date);
        expect(actual).toMatchInlineSnapshot("2019-05-23T00:00:00.000Z");
      });
      it('should clone date with full month', function () {
        var actual = dateUtils.cloneDate(date1, 'mm', 10);
        expect(actual).toBeInstanceOf(Date);
        expect(actual).toMatchInlineSnapshot("2019-11-23T00:00:00.000Z");
      });
      it('should clone date with incremental date', function () {
        var actual = dateUtils.cloneDate(date1, 'd', 1);
        expect(actual).toBeInstanceOf(Date);
        expect(actual).toMatchInlineSnapshot("2019-04-24T00:00:00.000Z");
      });
      it('should clone date with full date', function () {
        var actual = dateUtils.cloneDate(date1, 'dd', 20);
        expect(actual).toBeInstanceOf(Date);
        expect(actual).toMatchInlineSnapshot("2019-04-20T00:00:00.000Z");
      });
      it('should clone date with without modifying date if date type is invalid', function () {
        var actual = dateUtils.cloneDate(date1, 'xx', 20);
        expect(actual).toBeInstanceOf(Date);
        expect(actual).toMatchInlineSnapshot("2019-04-23T00:00:00.000Z");
      });
    });
    describe('#parseDay', function () {
      it('should parse day', function () {
        var parseDateSpy = jest.spyOn(dateUtils, 'parseDate').mockReturnValueOnce(date1);
        var DateSpy = jest.spyOn(global, 'Date').mockReturnValueOnce(date1);
        var actual = dateUtils.parseDay(date1);
        expect(actual).toMatchInlineSnapshot("2019-04-23T00:00:00.000Z");
        expect(parseDateSpy).toBeCalledWith(date1);
        expect(DateSpy).toBeCalledWith(date1.getFullYear(), date1.getMonth(), date1.getDate());
        DateSpy.mockRestore();
        parseDateSpy.mockRestore();
      });
    });
    describe('#getDay', function () {
      it('should get day with zh_CN locale', function () {
        var date = new Date(2020, 1, 1);
        var actual = dateUtils.getDay(date);
        expect(actual).toEqual('周六');
      });
      it('should get day with en_US locale', function () {
        var date = new Date(2020, 1, 1); // eslint-disable-next-line no-sparse-arrays

        var actual = dateUtils.getDay(date, ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']);
        expect(actual).toEqual('Saturday');
      });
    });
    describe('#isOneMonth', function () {
      it('should return false if any date is empty string', function () {
        var date = new Date(2020, 1, 1);
        expect(dateUtils.isOneMonth('', date)).toBeFalsy();
        expect(dateUtils.isOneMonth(date, '')).toBeFalsy();
      });
      it('should return false if the months of the two dates are not equal', function () {
        var date = new Date(2020, 1, 1);
        var date2 = new Date(2020, 2, 1);
        expect(dateUtils.isOneMonth(date2, date)).toBeFalsy();
      });
      it('should return false if the years of the two dates are not equal', function () {
        var date = new Date(2020, 1, 1);
        var date2 = new Date(2021, 2, 1);
        expect(dateUtils.isOneMonth(date2, date)).toBeFalsy();
      });
      it('should return true if the months of the two dates are equal', function () {
        var date = new Date(2020, 1, 1);
        var date2 = '2020-01-31T16:00:00.000Z';
        expect(dateUtils.isOneMonth(date2, date)).toBeFalsy();
      });
    });
    describe('#isOneDay', function () {
      it('should return false if any date is empty string', function () {
        var date = new Date(2020, 1, 1);
        expect(dateUtils.isOneDay('', date)).toBeFalsy();
        expect(dateUtils.isOneDay(date, '')).toBeFalsy();
      });
      it('should return true if the dates of the two dates are equal', function () {
        var date = new Date(2020, 1, 1);
        var date2 = new Date(2020, 1, 1);
        expect(dateUtils.isOneDay(date2, date)).toBeTruthy();
      });
    });
    describe('#isToday', function () {
      it('should return true if date is today', function () {
        var actual = dateUtils.isToday(new Date());
        expect(actual).toBeTruthy();
      });
      it('should return false if date is not today', function () {
        var actual = dateUtils.isToday(new Date(2020, 1, 1));
        expect(actual).toBeFalsy();
      });
    });
    describe('#getMonthCount', function () {
      it('should get month difference include both of the months', function () {
        var date = new Date(2020, 10);
        var date2 = new Date(2020, 1);
        var actual = dateUtils.getMonthCount(date, date2);
        expect(actual).toEqual(10);
      });
    });
    describe('#isLeapYear', function () {
      it('should throw error if year is invalid', function () {
        var invalidYears = ['', NaN, Infinity, 20.2, '20.2'];
        expect.assertions(invalidYears.length);
        invalidYears.forEach(function (year) {
          expect(function () {
            return dateUtils.isLeapYear(year);
          }).toThrow('年份格式不正确');
        });
      });
      it('should throw error if year is number less than 1790', function () {
        var years = [0, '3', '222', 333, 333.0];
        expect.assertions(years.length);
        years.forEach(function (year) {
          expect(function () {
            return dateUtils.isLeapYear(year);
          }).toThrow('年份不能低于1790');
        });
      });
      it('should return true if year is leap year', function () {
        var leapYears = [2000, 2004];
        expect.assertions(leapYears.length);
        leapYears.forEach(function (y) {
          expect(dateUtils.isLeapYear(y)).toBeTruthy();
        });
      });
    });
    describe('#getCurrMonthInfo', function () {
      it('should get the information of current month', function () {
        expect(dateUtils.getCurrMonthInfo(2000, 1)).toEqual({
          dayCount: 29,
          firstDay: 2
        });
      });
    });
    describe('#getDaysInMonth', function () {
      it('should get days by date', function () {
        expect(dateUtils.getDaysByDate(new Date(2020, 1, 1))).toEqual(29);
      });
    });
    describe('#getDaysInMonth', function () {
      it('should get days in month', function () {
        expect(dateUtils.getDaysInMonth(2020, 1)).toEqual(31);
      });
    });
    describe('#firstDayOfMonth', function () {
      it('should get the first day of a month if date is an instance of Date', function () {
        expect(dateUtils.firstDayOfMonth(new Date(2020, 1, 1))).toEqual(6);
      });
      it('should get the first day of a month if date is a date string', function () {
        expect(dateUtils.firstDayOfMonth('Sat Feb 01 2020')).toEqual(6);
      });
    });
  });
});