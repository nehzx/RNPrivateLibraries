import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

import { mount } from 'enzyme';
import React from 'react';
import warnIfDeprecated from '../warnIfDeprecated';

var TestComponent = /*#__PURE__*/function (_React$Component) {
  _inherits(TestComponent, _React$Component);

  var _super = _createSuper(TestComponent);

  function TestComponent() {
    _classCallCheck(this, TestComponent);

    return _super.apply(this, arguments);
  }

  _createClass(TestComponent, [{
    key: "render",
    value: function render() {
      return 'test component';
    }
  }], [{
    key: "nonReactStaticMethod",
    value: function nonReactStaticMethod() {
      return null;
    }
  }]);

  return TestComponent;
}(React.Component);

TestComponent.displayName = 'TestComponent';
describe('utils', function () {
  var oEnv = process.env;
  afterAll(function () {
    process.env = oEnv;
  });
  afterEach(function () {
    jest.restoreAllMocks();
  });
  describe('warnIfDeprecated', function () {
    it('should print warning log if the props of the component has been deprecated', function () {
      process.env.NODE_ENV = 'dev';
      var warnLogSpy = jest.spyOn(console, 'warn').mockImplementation(function () {
        return 'suppress warn';
      });
      var wrapper = warnIfDeprecated([{
        oldProp: 'a',
        newProp: 'b'
      }]);
      var WrappedComponent = wrapper(TestComponent); // TODO: use strict types rather than any

      var props = {
        a: '1',
        b: '2'
      };
      mount( /*#__PURE__*/React.createElement(WrappedComponent, props));
      expect(warnLogSpy).toBeCalledWith('Warning: a has been renamed, and is not recommended for use.\n\n* Rename a to b to suppress this warning.');
      expect(warnLogSpy).toBeCalledWith('Please update the following components: TestComponent');
    });
    it('should print warning log when use the deprecated component name', function () {
      process.env.NODE_ENV = 'dev';
      var warnLogSpy = jest.spyOn(console, 'warn').mockImplementation(function () {
        return 'suppress warn';
      });
      var wrapper = warnIfDeprecated([{
        oldComponent: 'TestComponent',
        newComponent: 'NewTestComponent'
      }]);
      var WrappedComponent = wrapper(TestComponent); // TODO: use strict types rather than any

      mount( /*#__PURE__*/React.createElement(WrappedComponent, null));
      expect(warnLogSpy).toBeCalledWith('Warning: TestComponent has been renamed, and is not recommended for use.\n\n* Rename TestComponent to NewTestComponent to suppress this warning.');
      expect(warnLogSpy).toBeCalledWith('Please update the following components: TestComponent');
    });
    it('should print warning log when use the deprecated component name and props', function () {
      process.env.NODE_ENV = 'dev';
      var warnLogSpy = jest.spyOn(console, 'warn').mockImplementation(function () {
        return 'suppress warn';
      });
      var wrapper = warnIfDeprecated([{
        oldProp: 'a',
        newProp: 'b',
        oldComponent: 'TestComponent',
        newComponent: 'NewTestComponent'
      }]);
      var WrappedComponent = wrapper(TestComponent); // TODO: use strict types rather than any

      var props = {
        a: '1',
        b: '2'
      };
      mount( /*#__PURE__*/React.createElement(WrappedComponent, props));
      expect(warnLogSpy).toBeCalledWith('Warning: a has been renamed, and is not recommended for use.\n\n* Rename a to b to suppress this warning.');
      expect(warnLogSpy).toBeCalledWith('Please update the following components: TestComponent');
      expect(warnLogSpy).toBeCalledWith('Warning: TestComponent has been renamed, and is not recommended for use.\n\n* Rename TestComponent to NewTestComponent to suppress this warning.');
      expect(warnLogSpy).toBeCalledWith('Please update the following components: TestComponent');
    });
    it('should not print warning log if NODE_ENV is production', function () {
      process.env.NODE_ENV = 'production';
      var warnLogSpy = jest.spyOn(console, 'warn').mockImplementation(function () {
        return 'suppress warn';
      });
      var wrapper = warnIfDeprecated([{
        oldProp: 'a',
        newProp: 'b'
      }]);
      var WrappedComponent = wrapper(TestComponent); // TODO: use strict types rather than any

      var props = {
        a: '1',
        b: '2'
      };
      mount( /*#__PURE__*/React.createElement(WrappedComponent, props));
      expect(warnLogSpy).not.toBeCalled();
    });
    it('should not print warning log if deprecations is empty', function () {
      process.env.NODE_ENV = 'dev';
      var warnLogSpy = jest.spyOn(console, 'warn').mockImplementation(function () {
        return 'suppress warn';
      });
      var wrapper = warnIfDeprecated([]);
      var WrappedComponent = wrapper(TestComponent); // TODO: use strict types rather than any

      var props = {
        a: '1',
        b: '2'
      };
      mount( /*#__PURE__*/React.createElement(WrappedComponent, props));
      expect(warnLogSpy).not.toBeCalled();
    });
    it('should not print warning log if wrappered component does not have old prop', function () {
      process.env.NODE_ENV = 'dev';
      var warnLogSpy = jest.spyOn(console, 'warn').mockImplementation(function () {
        return 'suppress warn';
      });
      var wrapper = warnIfDeprecated([]);
      var WrappedComponent = wrapper(TestComponent); // TODO: use strict types rather than any

      var props = {
        c: '3'
      };
      mount( /*#__PURE__*/React.createElement(WrappedComponent, props));
      expect(warnLogSpy).not.toBeCalled();
    });
    it('should not print warning log if the name of the wrappered component is not equal the old name', function () {
      process.env.NODE_ENV = 'dev';
      var warnLogSpy = jest.spyOn(console, 'warn').mockImplementation(function () {
        return 'suppress warn';
      });
      var wrapper = warnIfDeprecated([{
        oldComponent: 'WhatEverTestComponent',
        newComponent: 'NewTestComponent'
      }]);
      var WrappedComponent = wrapper(TestComponent); // TODO: use strict types rather than any

      mount( /*#__PURE__*/React.createElement(WrappedComponent, null));
      expect(warnLogSpy).not.toBeCalled();
    });
  });
});