import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

import React, { Component } from 'react';
import classnames from 'classnames';
import BScroll from 'better-scroll';
import isEqual from 'lodash/isEqual';
import { isArray } from '../utils/validate';

var getValue = function getValue(props, defaultValue) {
  if ('value' in props) {
    return props.value;
  }

  if ('defaultValue' in props) {
    return props.defaultValue;
  }

  if (isArray(props.dataSource) && props.dataSource[0]) {
    return props.dataSource[0][props.valueMember];
  }

  return defaultValue;
};

var Wheel = /*#__PURE__*/function (_Component) {
  _inherits(Wheel, _Component);

  var _super = _createSuper(Wheel);

  function Wheel() {
    var _this;

    _classCallCheck(this, Wheel);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.BScroll = void 0;
    _this.wrapper = void 0;

    _this.handleScrollEnd = function () {
      var _this$props = _this.props,
          curDataSource = _this$props.dataSource,
          valueMember = _this$props.valueMember;

      var index = _this.BScroll.getSelectedIndex();

      var child = curDataSource[index];

      if (child) {
        _this.fireValueChange(child[valueMember]);
      }
    };

    _this.getSelectedIndex = function (value, dataSource) {
      var valueMember = _this.props.valueMember;
      var index = 0;

      if (dataSource) {
        dataSource.some(function (item, i) {
          if (item[valueMember] === value) {
            index = i;
            return true;
          }

          return false;
        });
      }

      return index;
    };

    _this.fireValueChange = function (value) {
      var currentValue = getValue(_this.props);

      if (value === currentValue) {
        return;
      }

      var onChange = _this.props.onChange;

      if (typeof onChange === 'function') {
        onChange(value);
      }
    };

    return _this;
  }

  _createClass(Wheel, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this2 = this;

      var _this$props2 = this.props,
          prefixCls = _this$props2.prefixCls,
          dataSource = _this$props2.dataSource,
          disabled = _this$props2.disabled;
      var value = getValue(this.props);
      var initIndex = this.getSelectedIndex(value, dataSource);
      this.BScroll = new BScroll(this.wrapper, {
        wheel: {
          selectedIndex: initIndex,
          wheelWrapperClass: "".concat(prefixCls, "-content"),
          wheelItemClass: "".concat(prefixCls, "-item")
        },
        probeType: 3
      });
      disabled && this.BScroll.disable();
      this.BScroll.on('scrollEnd', function () {
        _this2.handleScrollEnd();
      });
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      var _this$props3 = this.props,
          value = _this$props3.value,
          dataSource = _this$props3.dataSource,
          disabled = _this$props3.disabled,
          stopScroll = _this$props3.stopScroll;
      disabled && this.BScroll.disable();

      if (!isEqual(prevProps.dataSource, dataSource)) {
        this.BScroll.refresh();
      }

      var oldIndex = this.getSelectedIndex(prevProps.value, prevProps.dataSource);
      var newIndex = this.getSelectedIndex(value, dataSource);

      if (newIndex !== oldIndex) {
        this.BScroll.wheelTo(newIndex);
      }

      if (stopScroll && prevProps.stopScroll !== stopScroll) {
        this.BScroll.stop();
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.BScroll.destroy();
    }
  }, {
    key: "render",
    value: function render() {
      var _this3 = this;

      var _this$props4 = this.props,
          prefixCls = _this$props4.prefixCls,
          className = _this$props4.className,
          valueMember = _this$props4.valueMember,
          dataSource = _this$props4.dataSource,
          itemRender = _this$props4.itemRender,
          disabled = _this$props4.disabled;
      var value = getValue(this.props);
      var items = dataSource.map(function (item, index) {
        var _classnames;

        var itemCls = classnames("".concat(prefixCls, "__item"), (_classnames = {}, _defineProperty(_classnames, "".concat(prefixCls, "__item--selected"), value === item[valueMember]), _defineProperty(_classnames, "".concat(prefixCls, "__item--disabled"), disabled), _classnames));
        return /*#__PURE__*/React.createElement("div", {
          key: +index,
          className: itemCls
        }, itemRender(item));
      });
      var rollerCls = classnames(prefixCls, className);
      return /*#__PURE__*/React.createElement("div", {
        className: rollerCls,
        ref: function ref(wrapper) {
          _this3.wrapper = wrapper;
        }
      }, /*#__PURE__*/React.createElement("div", {
        className: "".concat(prefixCls, "__content")
      }, items));
    }
  }]);

  return Wheel;
}(Component);

Wheel.defaultProps = {
  prefixCls: 'za-wheel',
  dataSource: [],
  valueMember: 'value',
  itemRender: function itemRender(item) {
    return item.label;
  },
  stopScroll: false
};
export { Wheel as default };