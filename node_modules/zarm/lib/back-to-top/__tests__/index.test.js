"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _enzyme = require("enzyme");

var _enzymeToJson = _interopRequireDefault(require("enzyme-to-json"));

var _index = _interopRequireDefault(require("../index"));

var _scroller = _interopRequireDefault(require("../../scroller"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function genItems(count) {
  var list = [];

  for (var i = 0; i < count; i++) {
    list.push( /*#__PURE__*/_react.default.createElement("li", {
      key: +i
    }, "\u7B2C ", i + 1, " \u884C"));
  }

  return list;
}

describe('BackToTop', function () {
  var scrollTo;
  var BackToTopCJS;
  beforeAll(function () {
    scrollTo = window.scrollTo;
    window.scrollTo = jest.fn();
  });
  beforeEach(function () {
    jest.resetModules();
  });
  afterEach(function () {
    jest.restoreAllMocks();
  });
  afterAll(function () {
    window.scrollTo = scrollTo;
  });
  describe('snapshot', function () {
    it('renders correctly', function () {
      var wrapper = (0, _enzyme.mount)( /*#__PURE__*/_react.default.createElement(_index.default, null, "Up"));
      expect((0, _enzymeToJson.default)(wrapper)).toMatchSnapshot();
    });
    it('scrollContainer', function () {
      var containerStyle = {
        overflowY: 'auto',
        maxHeight: 400
      };
      var container;
      var wrapper = (0, _enzyme.mount)( /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("ul", {
        ref: function ref(ele) {
          container = ele;
        },
        style: containerStyle
      }, genItems(100)), /*#__PURE__*/_react.default.createElement(_index.default, {
        scrollContainer: function scrollContainer() {
          return container;
        }
      }, "Up")));
      expect((0, _enzymeToJson.default)(wrapper)).toMatchSnapshot();
    });
  });
  it('should handle click event and scroll to the top with animation', function () {
    var onClick = jest.fn();
    var wrapper = (0, _enzyme.shallow)( /*#__PURE__*/_react.default.createElement(_index.default, {
      onClick: onClick
    }, "Up"));
    window.scrollTo(0, 1000);
    jest.useFakeTimers();
    wrapper.find('.za-back-to-top').simulate('click');
    jest.runAllTimers();
    expect(window.scrollTo).toBeCalledWith(0, 0);
    expect(onClick).toBeCalled();
  });
  it('should scroll to the top immediately without animation ', function () {
    var wrapper = (0, _enzyme.shallow)( /*#__PURE__*/_react.default.createElement(_index.default, {
      speed: 0
    }, "Up"));
    window.scrollTo(0, 1000);
    wrapper.find('.za-back-to-top').simulate('click');
    expect(window.scrollTo).toBeCalledWith(0, 0);
  });
  it('should append portal container to document body when component did mount', function () {
    var appendChildSpy = jest.spyOn(document.body, 'appendChild');
    var createElementSpy = jest.spyOn(document, 'createElement');
    var wrapper = (0, _enzyme.shallow)( /*#__PURE__*/_react.default.createElement(_index.default, null, "Up"));
    expect(createElementSpy).toBeCalledWith('div');
    expect(appendChildSpy).toBeCalledWith(wrapper.instance()['portalContainer']);
    var portalContainer = document.body.querySelector('.za-back-to-top-container');
    expect(portalContainer).toBeTruthy();
  });
  it('should remove portal container from the document body when component will unmount', function () {
    var removeChildSpy = jest.spyOn(document.body, 'removeChild');
    var wrapper = (0, _enzyme.shallow)( /*#__PURE__*/_react.default.createElement(_index.default, null, "Up"));
    var portalContainer = wrapper.instance()['portalContainer'];
    wrapper.unmount();
    expect(removeChildSpy).toBeCalledWith(portalContainer);
  });
  it('should render null if environment does NOT support DOM', function () {
    jest.doMock('../../utils/dom', function () {
      var oDom = jest.requireActual('../../utils/dom');
      return _objectSpread(_objectSpread({}, oDom), {}, {
        canUseDOM: false
      });
    });
    BackToTopCJS = require('../index').default;
    var wrapper = (0, _enzyme.shallow)( /*#__PURE__*/_react.default.createElement(BackToTopCJS, null, "Up"));
    expect(BackToTopCJS.defaultProps.scrollContainer).toBeUndefined();
    expect(wrapper.instance()['parent']).toEqual(document.body);
    expect(wrapper.isEmptyRender()).toBeTruthy();
  });
  it('should handle scroll and set visible to false if scrollTop greater than props.visibleDistance', function () {
    var wrapper = (0, _enzyme.shallow)( /*#__PURE__*/_react.default.createElement(_index.default, null, "Up"));
    wrapper.find(_scroller.default).invoke('onScroll')(300);
    expect(wrapper.find('.za-back-to-top').prop('style')).toEqual({
      display: 'none',
      position: 'fixed',
      bottom: 50,
      right: 50
    });
  });
  it('should use scrollContainer as this.parent', function () {
    var scrollContainer = document.createElement('div');
    var wrapper = (0, _enzyme.mount)( /*#__PURE__*/_react.default.createElement(_index.default, {
      scrollContainer: scrollContainer
    }, "Up"));
    expect(wrapper.instance()['parent']).toEqual(scrollContainer);
  });
  it('should append new portal container if scrollContainer changed', function () {
    var appendChildSpy = jest.spyOn(document.body, 'appendChild');
    var scrollContainer = document.createElement('div');
    var wrapper = (0, _enzyme.mount)( /*#__PURE__*/_react.default.createElement(_index.default, null, "Up"));
    wrapper.setProps({
      scrollContainer: scrollContainer
    });
    expect(appendChildSpy).toBeCalledWith(wrapper.instance()['portalContainer']);
  });
  it('should render portal with correct style', function () {
    var scrollContainer = document.createElement('div');
    var wrapper = (0, _enzyme.mount)( /*#__PURE__*/_react.default.createElement(_index.default, {
      scrollContainer: scrollContainer,
      style: {
        color: 'blue'
      }
    }, "Up"));
    wrapper.find(_scroller.default).invoke('onScroll')(500);
    expect(wrapper.find('.za-back-to-top').prop('style')).toEqual({
      display: 'inline',
      position: 'absolute',
      bottom: 50,
      right: 50,
      color: 'blue'
    });
  });
});