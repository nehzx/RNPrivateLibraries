"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _react = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _index = _interopRequireDefault(require("./style/index.native"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var buttonStyles = _reactNative.StyleSheet.create(_index.default);

var Button = /*#__PURE__*/function (_PureComponent) {
  (0, _inherits2.default)(Button, _PureComponent);

  var _super = _createSuper(Button);

  function Button(props) {
    var _this;

    (0, _classCallCheck2.default)(this, Button);
    _this = _super.call(this, props);

    _this.onPressIn = function () {
      _this.setState({
        isActive: true
      });
    };

    _this.onPressOut = function () {
      _this.setState({
        isActive: false
      });
    };

    _this.state = {
      isActive: false
    };
    return _this;
  }

  (0, _createClass2.default)(Button, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          theme = _this$props.theme,
          size = _this$props.size,
          shape = _this$props.shape,
          ghost = _this$props.ghost,
          disabled = _this$props.disabled,
          loading = _this$props.loading,
          icon = _this$props.icon,
          style = _this$props.style,
          styles = _this$props.styles,
          onClick = _this$props.onClick,
          children = _this$props.children,
          others = (0, _objectWithoutProperties2.default)(_this$props, ["theme", "size", "shape", "ghost", "disabled", "loading", "icon", "style", "styles", "onClick", "children"]);
      var isActive = this.state.isActive;
      var wrapperStyle = [styles.wrapperStyle, styles["".concat(size, "Wrapper")], styles["".concat(theme, "Wrapper")], styles["".concat(shape, "Wrapper")], isActive && styles["".concat(theme, "ActiveWrapper")], ghost && styles.ghostWrapper, ghost && styles["".concat(theme, "GhostWrapper")], ghost && isActive && styles["".concat(theme, "GhostActiveWrapper")], disabled && styles.disabledWrapper, disabled && ghost && styles.disabledGhostWrapper, shape === 'circle' && styles["".concat(size, "CircleWrapper")], style];

      var underlayColor = _reactNative.StyleSheet.flatten(styles["".concat(theme, "ActiveWrapper")]).backgroundColor;

      var textStyle = [styles.textStyle, styles["".concat(size, "Text")], styles["".concat(theme, "Text")], isActive && styles["".concat(theme, "ActiveText")], disabled && styles["".concat(theme, "DisabledText")], ghost && styles["".concat(theme, "GhostText")], isActive && ghost && styles["".concat(theme, "GhostActiveText")], disabled && ghost && styles.disabledGhostText];
      var iconStyle = [styles.iconStyle, styles["".concat(size, "Icon")]];
      var iconRender = loading ? /*#__PURE__*/_react.default.createElement(_reactNative.ActivityIndicator, {
        animating: true,
        style: iconStyle,
        size: "small"
      }) : icon;

      var contentRender = /*#__PURE__*/_react.default.createElement(_reactNative.View, {
        style: styles.container
      }, iconRender, /*#__PURE__*/(0, _react.isValidElement)(children) ? children : /*#__PURE__*/_react.default.createElement(_reactNative.Text, {
        style: textStyle
      }, children));

      var wrapperProps = _objectSpread({
        activeOpacity: 1,
        style: wrapperStyle,
        onPress: onClick,
        onPressIn: this.onPressIn,
        onPressOut: this.onPressOut,
        disabled: disabled
      }, others);

      return ghost ? /*#__PURE__*/_react.default.createElement(_reactNative.TouchableOpacity, wrapperProps, contentRender) : /*#__PURE__*/_react.default.createElement(_reactNative.TouchableHighlight, (0, _extends2.default)({}, wrapperProps, {
        underlayColor: underlayColor
      }), contentRender);
    }
  }]);
  return Button;
}(_react.PureComponent);

exports.default = Button;
Button.defaultProps = {
  theme: 'default',
  size: 'md',
  shape: 'radius',
  block: false,
  ghost: false,
  disabled: false,
  loading: false,
  styles: buttonStyles
};