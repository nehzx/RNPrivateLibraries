"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _react = _interopRequireWildcard(require("react"));

var _classnames2 = _interopRequireDefault(require("classnames"));

var _events = _interopRequireDefault(require("../utils/events"));

var _drag = _interopRequireDefault(require("../drag"));

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var Carousel = /*#__PURE__*/function (_Component) {
  (0, _inherits2.default)(Carousel, _Component);

  var _super = _createSuper(Carousel);

  function Carousel(_props) {
    var _this;

    (0, _classCallCheck2.default)(this, Carousel);
    _this = _super.call(this, _props);
    _this.carouselItems = void 0;
    _this.moveInterval = void 0;
    _this.translateX = 0;
    _this.translateY = 0;

    _this.onSlideTo = function (index) {
      _this.onMoveTo(index, _this.props.animationDuration);
    };

    _this.onJumpTo = function (index) {
      _this.onMoveTo(index, 0);
    };

    _this.onMoveTo = function (index, animationDuration) {
      var dom = _this.carouselItems;
      var _this$props = _this.props,
          loop = _this$props.loop,
          children = _this$props.children,
          onChange = _this$props.onChange;
      var maxLength = children.length;
      var previousIndex = _this.state.activeIndex;
      _this.translateX = -dom.offsetWidth * (index + loop);
      _this.translateY = -dom.offsetHeight * (index + loop);

      _this.doTransition({
        x: _this.translateX,
        y: _this.translateY
      }, animationDuration);

      if (index > maxLength - 1) {
        index = 0;
      } else if (index < 0) {
        index = maxLength - 1;
      }

      var activeIndexChanged = previousIndex !== index;

      _this.setState({
        activeIndex: index,
        activeIndexChanged: activeIndexChanged
      });

      if (typeof onChange === 'function' && activeIndexChanged) {
        onChange(index);
      }
    };

    _this.onDragStart = function () {
      var _this$props2 = _this.props,
          swipeable = _this$props2.swipeable,
          children = _this$props2.children;

      if (!swipeable) {
        return false;
      } // 跳转到头尾


      var activeIndex = _this.state.activeIndex;
      var maxLength = children.length;

      if (activeIndex <= 0) {
        _this.onJumpTo(0);
      } else if (activeIndex >= maxLength - 1) {
        _this.onJumpTo(maxLength - 1);
      } // 暂停自动轮播


      _this.pauseAutoPlay();
    };

    _this.onDragMove = function (event, _ref) {
      var offsetX = _ref.offsetX,
          offsetY = _ref.offsetY;
      var swipeable = _this.props.swipeable;

      if (!swipeable) {
        return false;
      }

      var distanceX = Math.abs(offsetX);
      var distanceY = Math.abs(offsetY);

      if (_this.isDirectionX() && (distanceX < 5 || distanceX >= 5 && distanceY >= 1.73 * distanceX)) {
        return false;
      }

      if (!_this.isDirectionX() && (distanceY < 5 || distanceY >= 5 && distanceX >= 1.73 * distanceY)) {
        return false;
      } // 设置不循环的时候


      if (!_this.props.loop) {
        // 在尾页时禁止拖动
        if (_this.isLastIndex()) {
          if (_this.isDirectionX() && offsetX < 0 || !_this.isDirectionX() && offsetY < 0) {
            return false;
          }
        } // 在首页时禁止拖动


        if (_this.isFirstIndex()) {
          if (_this.isDirectionX() && offsetX > 0 || !_this.isDirectionX() && offsetY > 0) {
            return false;
          }
        }
      }

      if (!_events.default.supportsPassiveEvents) {
        event.preventDefault();
      }

      _this.doTransition({
        x: _this.translateX + offsetX,
        y: _this.translateY + offsetY
      }, 0);

      return true;
    };

    _this.onDragEnd = function (_event, _ref2) {
      var offsetX = _ref2.offsetX,
          offsetY = _ref2.offsetY,
          startTime = _ref2.startTime;
      var swipeable = _this.props.swipeable;

      if (!swipeable) {
        return false;
      }

      if (!offsetX && !offsetY) {
        // 恢复自动轮播
        _this.startAutoPlay();

        return;
      }

      var _this$props3 = _this.props,
          moveDistanceRatio = _this$props3.moveDistanceRatio,
          moveTimeSpan = _this$props3.moveTimeSpan;
      var activeIndex = _this.state.activeIndex;
      var dom = _this.carouselItems;
      var timeSpan = new Date().getTime() - startTime.getTime();
      var ratio = _this.isDirectionX() ? Math.abs(offsetX / dom.offsetWidth) : Math.abs(offsetY / dom.offsetHeight); // 判断滑动临界点
      // 1.滑动距离超过0，且滑动距离和父容器长度之比超过moveDistanceRatio
      // 2.滑动释放时间差低于moveTimeSpan

      if (ratio >= moveDistanceRatio || timeSpan <= moveTimeSpan) {
        var action = _this.isDirectionX() && offsetX > 0 || !_this.isDirectionX() && offsetY > 0 ? 'prev' : 'next';
        activeIndex = action === 'next' ? activeIndex + 1 : activeIndex - 1;
      }

      _this.onSlideTo(activeIndex); // 恢复自动轮播


      _this.startAutoPlay();
    };

    _this.startAutoPlay = function () {
      var _this$props4 = _this.props,
          direction = _this$props4.direction,
          loop = _this$props4.loop,
          autoPlay = _this$props4.autoPlay,
          autoPlayIntervalTime = _this$props4.autoPlayIntervalTime;
      _this.moveInterval = autoPlay && setInterval(function () {
        var activeIndex = _this.state.activeIndex;
        var isLeftOrUpDirection = ['left', 'up'].indexOf(direction) > -1;
        activeIndex = isLeftOrUpDirection ? activeIndex + 1 : activeIndex - 1; // 不循环暂停轮播

        if (!loop && (isLeftOrUpDirection ? _this.isLastIndex() : _this.isFirstIndex())) {
          _this.pauseAutoPlay();

          return;
        }

        _this.onSlideTo(activeIndex);
      }, autoPlayIntervalTime);
    };

    _this.pauseAutoPlay = function () {
      if (_this.moveInterval) {
        clearInterval(_this.moveInterval);
      }
    };

    _this.parseItems = function (props) {
      if (props.children.length === 0) {
        return;
      } // 增加头尾拼接节点


      var items = [].concat(props.children);
      var firstItem = items[0];
      var lastItem = items[items.length - 1];

      if (props.loop) {
        items.push(firstItem);
        items.unshift(lastItem);
      } // 节点追加后重排key


      var newItems = _react.default.Children.map(items, function (element, index) {
        return /*#__PURE__*/(0, _react.cloneElement)(element, {
          key: index,
          className: (0, _classnames2.default)("".concat(props.prefixCls, "__item"), element.props.className)
        });
      });

      return newItems;
    };

    _this.resize = function () {
      _this.onJumpTo(_this.state.activeIndex);
    };

    _this.doTransition = function (offset, animationDuration) {
      var dom = _this.carouselItems;
      var x = 0;
      var y = 0;

      if (_this.isDirectionX()) {
        x = offset.x;
      } else {
        y = offset.y;
      }

      dom.style.WebkitTransformDuration = "".concat(animationDuration, "ms");
      dom.style.transitionDuration = "".concat(animationDuration, "ms");
      dom.style.WebkitTransform = "translate3d(".concat(x, "px, ").concat(y, "px, 0)");
      dom.style.transform = "translate3d(".concat(x, "px, ").concat(y, "px, 0)");
    };

    _this.transitionEnd = function () {
      var onChangeEnd = _this.props.onChangeEnd;
      var _this$state = _this.state,
          activeIndex = _this$state.activeIndex,
          activeIndexChanged = _this$state.activeIndexChanged;
      var dom = _this.carouselItems;
      _this.translateX = -dom.offsetWidth * (activeIndex + _this.props.loop);
      _this.translateY = -dom.offsetHeight * (activeIndex + _this.props.loop);

      _this.doTransition({
        x: _this.translateX,
        y: _this.translateY
      }, 0);

      if (typeof onChangeEnd === 'function' && activeIndexChanged) {
        onChangeEnd(activeIndex);
      }
    };

    _this.isLastIndex = function () {
      return _this.state.activeIndex >= _this.props.children.length - 1;
    };

    _this.isFirstIndex = function () {
      return _this.state.activeIndex <= 0;
    };

    _this.isDirectionX = function () {
      return ['left', 'right'].indexOf(_this.props.direction) > -1;
    };

    _this.renderPaginationItem = function (_result, index) {
      var prefixCls = _this.props.prefixCls;
      var paginationItemCls = (0, _classnames2.default)("".concat(prefixCls, "__pagination__item"), (0, _defineProperty2.default)({}, "".concat(prefixCls, "__pagination__item--active"), index === _this.state.activeIndex));
      return /*#__PURE__*/_react.default.createElement("div", {
        key: "pagination-".concat(index),
        className: paginationItemCls,
        onClick: function onClick() {
          return _this.onSlideTo(index);
        }
      });
    };

    _this.renderPagination = function () {
      var _this$props5 = _this.props,
          prefixCls = _this$props5.prefixCls,
          showPagination = _this$props5.showPagination,
          children = _this$props5.children;
      return showPagination && /*#__PURE__*/_react.default.createElement("div", {
        className: "".concat(prefixCls, "__pagination")
      }, _react.Children.map(children, _this.renderPaginationItem));
    };

    _this.state = {
      // items: [],
      activeIndex: _props.activeIndex,
      activeIndexChanged: false
    };
    return _this;
  }

  (0, _createClass2.default)(Carousel, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var activeIndex = this.props.activeIndex; // 监听窗口变化

      _events.default.on(window, 'resize', this.resize);

      this.startAutoPlay(); // 设置起始位置编号

      this.onJumpTo(activeIndex);
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      var activeIndex = this.props.activeIndex;

      if (activeIndex !== prevProps.activeIndex) {
        this.onSlideTo(activeIndex);
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      // 自动轮播结束
      this.pauseAutoPlay(); // 移除监听窗口变化

      _events.default.off(window, 'resize', this.resize);

      _events.default.off(this.carouselItems, 'webkitTransitionEnd', this.transitionEnd);

      _events.default.off(this.carouselItems, 'transitionend', this.transitionEnd);
    } // 滑动到指定编号

  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props6 = this.props,
          prefixCls = _this$props6.prefixCls,
          className = _this$props6.className,
          height = _this$props6.height,
          style = _this$props6.style;
      var items = this.parseItems(this.props);
      var itemsStyle = {};
      var direction = this.isDirectionX() ? 'horizontal' : 'vertical';
      var cls = (0, _classnames2.default)(prefixCls, className, "".concat(prefixCls, "--").concat(direction));

      if (!this.isDirectionX()) {
        itemsStyle.height = height;
      }

      var content = /*#__PURE__*/_react.default.createElement("div", {
        ref: function ref(ele) {
          _this2.carouselItems = ele;
        },
        className: "".concat(prefixCls, "__items"),
        onTransitionEnd: this.transitionEnd,
        style: itemsStyle
      }, items);

      return /*#__PURE__*/_react.default.createElement("div", {
        className: cls,
        style: style
      }, /*#__PURE__*/_react.default.createElement(_drag.default, {
        onDragStart: this.onDragStart,
        onDragMove: this.onDragMove,
        onDragEnd: this.onDragEnd
      }, content), this.renderPagination());
    }
  }]);
  return Carousel;
}(_react.Component);

exports.default = Carousel;
Carousel.defaultProps = {
  prefixCls: 'za-carousel',
  direction: 'left',
  height: 160,
  loop: false,
  activeIndex: 0,
  animationDuration: 500,
  swipeable: true,
  autoPlay: false,
  autoPlayIntervalTime: 3000,
  moveDistanceRatio: 0.5,
  moveTimeSpan: 300,
  showPagination: true
};