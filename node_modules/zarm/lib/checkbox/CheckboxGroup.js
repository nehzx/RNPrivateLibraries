"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _react = _interopRequireWildcard(require("react"));

var _classnames2 = _interopRequireDefault(require("classnames"));

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var getChildChecked = function getChildChecked(children) {
  var checkedValue = [];

  _react.default.Children.map(children, function (element) {
    if ( /*#__PURE__*/_react.default.isValidElement(element) && element.props && element.props.checked) {
      checkedValue.push(element.props.value);
    }
  });

  return checkedValue;
};

var getValue = function getValue(props, defaultValue) {
  if (typeof props.value !== 'undefined') {
    return props.value;
  }

  if (typeof props.defaultValue !== 'undefined') {
    return props.defaultValue;
  }

  if (getChildChecked(props.children).length > 0) {
    return getChildChecked(props.children);
  }

  return defaultValue;
};

var CheckboxGroup = /*#__PURE__*/function (_PureComponent) {
  (0, _inherits2.default)(CheckboxGroup, _PureComponent);

  var _super = _createSuper(CheckboxGroup);

  function CheckboxGroup(props) {
    var _this;

    (0, _classCallCheck2.default)(this, CheckboxGroup);
    _this = _super.call(this, props);

    _this.onChildChange = function (value) {
      var valueState = _this.state.value;
      var onChange = _this.props.onChange;
      var values = valueState.slice();
      var index = values.indexOf(value);

      if (index < 0) {
        values.push(value);
      } else {
        values.splice(index, 1);
      }

      _this.setState({
        value: values
      });

      typeof onChange === 'function' && onChange(values);
    };

    _this.state = {
      value: getValue(props, [])
    };
    return _this;
  }

  (0, _createClass2.default)(CheckboxGroup, [{
    key: "render",
    value: function render() {
      var _this2 = this,
          _classnames;

      var _this$props = this.props,
          prefixCls = _this$props.prefixCls,
          className = _this$props.className,
          size = _this$props.size,
          shape = _this$props.shape,
          type = _this$props.type,
          block = _this$props.block,
          disabled = _this$props.disabled,
          compact = _this$props.compact,
          ghost = _this$props.ghost,
          children = _this$props.children,
          onChange = _this$props.onChange,
          defaultValue = _this$props.defaultValue,
          value = _this$props.value,
          rest = (0, _objectWithoutProperties2.default)(_this$props, ["prefixCls", "className", "size", "shape", "type", "block", "disabled", "compact", "ghost", "children", "onChange", "defaultValue", "value"]);
      var valueState = this.state.value;

      var items = _react.default.Children.map(children, function (element, index) {
        if ( /*#__PURE__*/(0, _react.isValidElement)(element)) {
          return /*#__PURE__*/(0, _react.cloneElement)(element, {
            key: index,
            type: type,
            shape: shape,
            disabled: disabled || element.props.disabled,
            checked: valueState.indexOf(element.props.value) > -1,
            onChange: function onChange(checked) {
              typeof element.props.onChange === 'function' && element.props.onChange(checked);

              _this2.onChildChange(element.props.value);
            }
          });
        }

        return null;
      });

      var cls = (0, _classnames2.default)(prefixCls, className, (_classnames = {}, (0, _defineProperty2.default)(_classnames, "".concat(prefixCls, "--").concat(type), !!type), (0, _defineProperty2.default)(_classnames, "".concat(prefixCls, "--").concat(size), !!size), (0, _defineProperty2.default)(_classnames, "".concat(prefixCls, "--").concat(shape), !!shape), (0, _defineProperty2.default)(_classnames, "".concat(prefixCls, "--block"), block), (0, _defineProperty2.default)(_classnames, "".concat(prefixCls, "--disabled"), disabled), (0, _defineProperty2.default)(_classnames, "".concat(prefixCls, "--compact"), compact), (0, _defineProperty2.default)(_classnames, "".concat(prefixCls, "--ghost"), ghost), _classnames));
      return /*#__PURE__*/_react.default.createElement("div", (0, _extends2.default)({
        className: cls
      }, rest), /*#__PURE__*/_react.default.createElement("div", {
        className: "".concat(prefixCls, "__inner")
      }, items));
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(nextProps) {
      if ('value' in nextProps) {
        return {
          value: getValue(nextProps, [])
        };
      }

      return null;
    }
  }]);
  return CheckboxGroup;
}(_react.PureComponent);

exports.default = CheckboxGroup;
CheckboxGroup.displayName = 'CheckboxGroup';
CheckboxGroup.defaultProps = {
  prefixCls: 'za-checkbox-group',
  shape: 'radius',
  block: false,
  disabled: false,
  compact: false,
  ghost: false,
  size: 'xs'
};