"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _react = _interopRequireDefault(require("react"));

var _enzyme = require("enzyme");

var _enzymeToJson = _interopRequireDefault(require("enzyme-to-json"));

var _index = _interopRequireDefault(require("../index"));

var _events = _interopRequireDefault(require("../../utils/events"));

describe('ClickOutside', function () {
  afterEach(function () {
    jest.restoreAllMocks();
  });
  it('renders correctly', function () {
    var wrapper = (0, _enzyme.render)( /*#__PURE__*/_react.default.createElement(_index.default, {
      onClickOutside: function onClickOutside() {}
    }, /*#__PURE__*/_react.default.createElement("div", null, "test")));
    expect((0, _enzymeToJson.default)(wrapper)).toMatchSnapshot();
  }); // https://reactjs.org/warnings/unknown-prop.html

  it('should pass standard HTML attributes to root node', function () {
    var wrapper = (0, _enzyme.mount)( /*#__PURE__*/_react.default.createElement(_index.default, {
      id: "test"
    }));
    expect(wrapper.getDOMNode().id).toEqual('test');
  });
  it('should not call action on click outside the component when disabled', function () {
    var onClickOutside = jest.fn();
    var clickEvent = new MouseEvent('click', {
      bubbles: true
    });
    var wrapper = (0, _enzyme.mount)( /*#__PURE__*/_react.default.createElement(_index.default, {
      disabled: true,
      onClickOutside: onClickOutside
    }, /*#__PURE__*/_react.default.createElement("div", {
      id: "test"
    }, "test disabled")));
    wrapper.find('#test').getDOMNode().dispatchEvent(clickEvent);
    expect(onClickOutside).not.toHaveBeenCalled();
  });
  it('should bind click and touchend event handler on document when component did mount', function () {
    var eventsOnSpy = jest.spyOn(_events.default, 'on').mockImplementation();
    (0, _enzyme.shallow)( /*#__PURE__*/_react.default.createElement(_index.default, null));
    expect(eventsOnSpy).toBeCalledWith(document, 'click', expect.any(Function));
    expect(eventsOnSpy).toBeCalledWith(document, 'touchend', expect.any(Function));
    expect(eventsOnSpy).toBeCalledTimes(2);
  });
  it('should unbind event handler from document when disabled and component did update', function () {
    var eventsOnSpy = jest.spyOn(_events.default, 'on').mockImplementation();
    var eventsOffSpy = jest.spyOn(_events.default, 'off').mockImplementation();
    var wrapper = (0, _enzyme.shallow)( /*#__PURE__*/_react.default.createElement(_index.default, null));
    expect(eventsOnSpy).toBeCalledWith(document, 'click', expect.any(Function));
    expect(eventsOnSpy).toBeCalledWith(document, 'touchend', expect.any(Function));
    expect(eventsOnSpy).toBeCalledTimes(2);
    wrapper.setProps({
      disabled: true
    });
    expect(eventsOffSpy).toBeCalledWith(document, 'click', expect.any(Function));
    expect(eventsOffSpy).toBeCalledWith(document, 'touchend', expect.any(Function));
    expect(eventsOffSpy).toBeCalledTimes(2);
  });
  it('should bind event handler when enabled and component did update', function () {
    var eventsOnSpy = jest.spyOn(_events.default, 'on').mockImplementation();
    var wrapper = (0, _enzyme.shallow)( /*#__PURE__*/_react.default.createElement(_index.default, {
      disabled: true
    }));
    expect(eventsOnSpy).not.toBeCalled();
    wrapper.setProps({
      disabled: false
    });
    expect(eventsOnSpy).toBeCalledWith(document, 'click', expect.any(Function));
    expect(eventsOnSpy).toBeCalledWith(document, 'touchend', expect.any(Function));
    expect(eventsOnSpy).toBeCalledTimes(2);
  });
  it('should unbind event handler when component will unmount', function () {
    var eventsOffSpy = jest.spyOn(_events.default, 'off').mockImplementation();
    var wrapper = (0, _enzyme.shallow)( /*#__PURE__*/_react.default.createElement(_index.default, null));
    wrapper.unmount();
    expect(eventsOffSpy).toBeCalledWith(document, 'click', expect.any(Function));
    expect(eventsOffSpy).toBeCalledWith(document, 'touchend', expect.any(Function));
    expect(eventsOffSpy).toBeCalledTimes(2);
  });
  it('should not call action when user click if isTouch is true', function () {
    var mOnClickOutside = jest.fn();
    var touchEndEvent = new TouchEvent('touchend');
    var clickEvent = new MouseEvent('click');
    (0, _enzyme.shallow)( /*#__PURE__*/_react.default.createElement(_index.default, {
      onClickOutside: mOnClickOutside
    }));
    document.dispatchEvent(touchEndEvent);
    document.dispatchEvent(clickEvent);
    expect(mOnClickOutside).not.toBeCalled();
  });
  it('should not call action on click inside the component', function () {
    var mOnClickOutside = jest.fn();
    var outerNode = document.createElement('div');
    document.body.appendChild(outerNode);
    var wrapper = (0, _enzyme.mount)( /*#__PURE__*/_react.default.createElement(_index.default, {
      onClickOutside: mOnClickOutside
    }, /*#__PURE__*/_react.default.createElement("div", {
      id: "test"
    }, "test")), {
      attachTo: outerNode
    });
    var clickEvent = new MouseEvent('click', {
      bubbles: true
    });
    wrapper.find('#test').getDOMNode().dispatchEvent(clickEvent);
    expect(mOnClickOutside).not.toBeCalled();
  }); // it.todo('should not call action if the event target in the ignored node list')
});