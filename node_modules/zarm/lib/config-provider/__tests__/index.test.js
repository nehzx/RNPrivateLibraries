"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _react = _interopRequireDefault(require("react"));

var _enzyme = require("enzyme");

var _enzymeToJson = _interopRequireDefault(require("enzyme-to-json"));

var _alert = _interopRequireDefault(require("../../alert"));

var _zh_CN = _interopRequireDefault(require("../locale/zh_CN"));

var _en_US = _interopRequireDefault(require("../locale/en_US"));

var _setTheme = _interopRequireWildcard(require("../setTheme"));

var _setPrimaryColor = _interopRequireDefault(require("../setPrimaryColor"));

var _ConfigProvider = require("../ConfigProvider");

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var TestComponent = /*#__PURE__*/function (_React$Component) {
  (0, _inherits2.default)(TestComponent, _React$Component);

  var _super = _createSuper(TestComponent);

  function TestComponent() {
    (0, _classCallCheck2.default)(this, TestComponent);
    return _super.apply(this, arguments);
  }

  (0, _createClass2.default)(TestComponent, [{
    key: "render",
    value: function render() {
      var theme = this.context.theme;
      return /*#__PURE__*/_react.default.createElement("div", null, theme);
    }
  }]);
  return TestComponent;
}(_react.default.Component);

TestComponent.contextType = _ConfigProvider.ConfigContext;
describe('setTheme', function () {
  afterEach(function () {
    jest.restoreAllMocks();
    document.body.removeAttribute('data-theme');
    document.documentElement.style.cssText = '';
  });
  it('should set dark theme', function () {
    expect.assertions(4 + Object.keys(_setTheme.themes).length);
    var setAttributeSpy = jest.spyOn(document.body, 'setAttribute');
    var setPropertySpy = jest.spyOn(document.documentElement.style, 'setProperty');
    (0, _setTheme.default)('dark');
    expect(setAttributeSpy).toBeCalledWith('data-theme', 'dark');
    expect(document.body.getAttribute('data-theme')).toEqual('dark');
    Object.keys(_setTheme.themes).forEach(function (key) {
      expect(setPropertySpy).toBeCalledWith(key, _setTheme.themes[key]);
    });
    expect(document.documentElement.style).toHaveLength(Object.keys(_setTheme.themes).length);
    expect(document.documentElement.style.cssText).toMatchSnapshot();
  });
  it('should set light theme', function () {
    expect.assertions(4 + Object.keys(_setTheme.themes).length);
    var setAttributeSpy = jest.spyOn(document.body, 'setAttribute');
    var removePropertySpy = jest.spyOn(document.documentElement.style, 'removeProperty');
    (0, _setTheme.default)('light');
    expect(setAttributeSpy).toBeCalledWith('data-theme', 'light');
    expect(document.body.getAttribute('data-theme')).toBe('light');
    Object.keys(_setTheme.themes).forEach(function (key) {
      expect(removePropertySpy).toBeCalledWith(key);
    });
    expect(document.documentElement.style).toHaveLength(0);
    expect(document.documentElement.style.cssText).toMatchSnapshot();
  });
});
describe('setPrimaryColor', function () {
  afterEach(function () {
    jest.restoreAllMocks();
    document.documentElement.style.cssText = '';
  });
  it('should set primary theme color', function () {
    var setPropertySpy = jest.spyOn(document.documentElement.style, 'setProperty');
    (0, _setPrimaryColor.default)('#00bc70');
    expect(setPropertySpy).toBeCalledWith('--theme-primary', '#00bc70');
    expect(setPropertySpy).toBeCalledWith('--theme-primary-dark', 'hsl(155.70000000000005, 100%, 35%)');
    expect(setPropertySpy).toBeCalledWith('--theme-primary-lighter', 'hsl(155.70000000000005, 100%, 95%)');
    expect(setPropertySpy).toBeCalledWith('--button-primary-shadow-color', 'rgba(0, 188, 112, 0.3)');
    expect(document.documentElement.style.cssText).toMatchInlineSnapshot("\"--theme-primary: #00bc70; --theme-primary-dark: hsl(155.70000000000005, 100%, 35%); --theme-primary-lighter: hsl(155.70000000000005, 100%, 95%); --button-primary-shadow-color: rgba(0, 188, 112, 0.3);\"");
  });
});
describe('ConfigProvider', function () {
  describe('snapshot', function () {
    var ConfigProvider;
    beforeEach(function () {
      ConfigProvider = require('../index').default;
    });
    it('renders correctly with zh_CN', function () {
      var wrapper = (0, _enzyme.render)( /*#__PURE__*/_react.default.createElement(ConfigProvider, {
        locale: _zh_CN.default
      }, /*#__PURE__*/_react.default.createElement(_alert.default, null)));
      expect((0, _enzymeToJson.default)(wrapper)).toMatchSnapshot();
    });
    it('renders correctly with en_US', function () {
      var wrapper = (0, _enzyme.render)( /*#__PURE__*/_react.default.createElement(ConfigProvider, {
        locale: _en_US.default
      }, /*#__PURE__*/_react.default.createElement(_alert.default, null)));
      expect((0, _enzymeToJson.default)(wrapper)).toMatchSnapshot();
    });
  });
  describe('behaviour', function () {
    var mod;
    var ConfigProvider;
    var mSetTheme = jest.fn();
    var mSetPrimaryColor = jest.fn();
    beforeEach(function () {
      jest.resetModules();
      jest.doMock('../setTheme', function () {
        return {
          __esModule: true,
          default: mSetTheme
        };
      });
      jest.doMock('../setPrimaryColor', function () {
        return {
          __esModule: true,
          default: mSetPrimaryColor
        };
      });
      mod = require('../ConfigProvider');
      ConfigProvider = mod.default;
    });
    it('should change runtime locale, set theme, set primary theme color with default value', function () {
      var _mod = mod,
          getRunTimeLocale = _mod.getRunTimeLocale;
      var wrapper = (0, _enzyme.shallow)( /*#__PURE__*/_react.default.createElement(ConfigProvider, null, /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null)));
      var actual = getRunTimeLocale();
      expect(actual).toEqual({});
      expect(mSetTheme).toBeCalledWith('light');
      expect(mSetPrimaryColor).toBeCalledWith('#00bc70');
      expect(wrapper.prop('value')).toEqual({
        locale: {},
        theme: 'light',
        primaryColor: '#00bc70'
      });
    });
    it('should accept only one child(a React element)', function () {
      expect(function () {
        return (0, _enzyme.shallow)( /*#__PURE__*/_react.default.createElement(ConfigProvider, null, /*#__PURE__*/_react.default.createElement("div", null), /*#__PURE__*/_react.default.createElement("div", null)));
      }).toThrowError('React.Children.only expected to receive a single React element child.');
    });
    it('should get context from ConfigContext provider', function () {
      var wrapper = (0, _enzyme.mount)( /*#__PURE__*/_react.default.createElement(ConfigProvider, null, /*#__PURE__*/_react.default.createElement(TestComponent, null)));
      expect(wrapper.find('div').text()).toEqual('light');
    });
    it('should get context from ConfigContext provider', function () {
      var wrapper = (0, _enzyme.mount)( /*#__PURE__*/_react.default.createElement(ConfigProvider, null, /*#__PURE__*/_react.default.createElement(_ConfigProvider.ConfigContext.Consumer, null, function (value) {
        return /*#__PURE__*/_react.default.createElement("div", null, value.theme);
      })));
      expect(wrapper.find('div').text()).toEqual('light');
    });
  });
});