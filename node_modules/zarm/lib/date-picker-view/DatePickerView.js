"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _react = _interopRequireWildcard(require("react"));

var _isEqual = _interopRequireDefault(require("lodash/isEqual"));

var _pickerView = _interopRequireDefault(require("../picker-view"));

var _removeFnFromProps = _interopRequireDefault(require("../picker-view/utils/removeFnFromProps"));

var _parseState = require("./utils/parseState");

var _date = require("./utils/date");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var DATETIME = 'datetime';
var DATE = 'date';
var TIME = 'time';
var MONTH = 'month';
var YEAR = 'year';
var ONE_DAY = 24 * 60 * 60 * 1000;

var DatePickerView = /*#__PURE__*/function (_Component) {
  (0, _inherits2.default)(DatePickerView, _Component);

  var _super = _createSuper(DatePickerView);

  function DatePickerView(props) {
    var _this;

    (0, _classCallCheck2.default)(this, DatePickerView);
    _this = _super.call(this, props);

    _this.onValueChange = function (selected, index) {
      var onChange = _this.props.onChange;

      var newValue = _this.getNewDate(selected, index);

      _this.setState({
        date: newValue
      });

      if (typeof onChange === 'function') {
        onChange(newValue);
      }
    };

    _this.getNewDate = function (values, index) {
      var _this$props = _this.props,
          mode = _this$props.mode,
          valueMember = _this$props.valueMember;
      var value = parseInt(values[index][valueMember], 10);
      var newValue = (0, _date.cloneDate)(_this.getDate());

      if (mode === YEAR || mode === MONTH || mode === DATE || mode === DATETIME) {
        switch (index) {
          case 0:
            newValue.setFullYear(value);
            break;

          case 1:
            (0, _date.setMonth)(newValue, value);
            break;

          case 2:
            newValue.setDate(value);
            break;

          case 3:
            newValue.setHours(value);
            break;

          case 4:
            newValue.setMinutes(value);
            break;

          default:
            break;
        }
      } else {
        switch (index) {
          case 0:
            newValue.setHours(value);
            break;

          case 1:
            newValue.setMinutes(value);
            break;

          default:
            break;
        }
      }

      return _this.clipDate(newValue);
    };

    _this.getDateData = function () {
      var _this$props2 = _this.props,
          locale = _this$props2.locale,
          mode = _this$props2.mode;

      var date = _this.getDate();

      var yearCol = [];
      var monthCol = [];
      var dayCol = [];
      var selectYear = date.getFullYear();
      var selectMonth = date.getMonth();

      var minYear = _this.getMinYear();

      var maxYear = _this.getMaxYear();

      for (var i = minYear; i <= maxYear; i += 1) {
        yearCol.push({
          label: i + locale.year,
          value: i
        });
      }

      if (mode === YEAR) {
        return [yearCol];
      }

      var minMonth = 0;
      var maxMonth = 11;

      if (selectYear === minYear) {
        minMonth = _this.getMinMonth();
      }

      if (selectYear === maxYear) {
        maxMonth = _this.getMaxMonth();
      }

      for (var _i = minMonth; _i <= maxMonth; _i += 1) {
        monthCol.push({
          label: _i + 1 + locale.month,
          value: _i
        });
      }

      if (mode === MONTH) {
        return [yearCol, monthCol];
      }

      var minDay = 1;
      var maxDay = (0, _date.getDaysInMonth)(date);

      if (selectYear === minYear && selectMonth === minMonth) {
        minDay = _this.getMinDay();
      }

      if (selectYear === maxYear && selectMonth === maxMonth) {
        maxDay = _this.getMaxDay();
      }

      for (var _i2 = minDay; _i2 <= maxDay; _i2 += 1) {
        dayCol.push({
          label: _i2 + locale.day,
          value: _i2
        });
      }

      if (mode === DATE) {
        return [yearCol, monthCol, dayCol];
      }

      return [yearCol, monthCol, dayCol];
    };

    _this.getTimeData = function () {
      var _this$props3 = _this.props,
          locale = _this$props3.locale,
          mode = _this$props3.mode,
          minuteStep = _this$props3.minuteStep;

      var date = _this.getDate();

      var hourCol = [];
      var minuteCol = [];
      var minHour = 0;
      var maxHour = 23;
      var minMinute = 0;
      var maxMinute = 59;

      var minDateHour = _this.getMinHour();

      var maxDateHour = _this.getMaxHour();

      var minDateMinute = _this.getMinMinute();

      var maxDateMinute = _this.getMaxMinute();

      var selectHour = date.getHours();

      if (mode === DATETIME) {
        var selectYear = date.getFullYear();
        var selectMonth = date.getMonth();
        var selectDay = date.getDate();

        var minYear = _this.getMinYear();

        var maxYear = _this.getMaxYear();

        var minMonth = _this.getMinMonth();

        var maxMonth = _this.getMaxMonth();

        var minDay = _this.getMinDay();

        var maxDay = _this.getMaxDay();

        if (selectYear === minYear && selectMonth === minMonth && selectDay === minDay) {
          minHour = minDateHour;

          if (selectHour === minHour) {
            minMinute = minDateMinute;
          }
        }

        if (selectYear === maxYear && selectMonth === maxMonth && selectDay === maxDay) {
          maxHour = maxDateHour;

          if (selectHour === maxHour) {
            maxMinute = maxDateMinute;
          }
        }
      } else {
        minHour = minDateHour;

        if (selectHour === minHour) {
          minMinute = minDateMinute;
        }

        maxHour = maxDateHour;

        if (selectHour === maxHour) {
          maxMinute = maxDateMinute;
        }
      }

      for (var i = minHour; i <= maxHour; i += 1) {
        hourCol.push({
          label: locale.hour ? i + locale.hour : (0, _date.pad)(i),
          value: i
        });
      }

      for (var _i3 = minMinute; _i3 <= maxMinute; _i3 += minuteStep) {
        minuteCol.push({
          label: locale.minute ? _i3 + locale.minute : (0, _date.pad)(_i3),
          value: _i3
        });
      }

      return [hourCol, minuteCol];
    };

    _this.getDefaultDate = function () {
      var _this$props4 = _this.props,
          min = _this$props4.min,
          mode = _this$props4.mode,
          minuteStep = _this$props4.minuteStep; // 存在最小值且毫秒数大于现在

      if (min && _this.getMinDate().getTime() >= Date.now()) {
        return _this.getMinDate();
      }

      if (minuteStep && minuteStep > 1 && (mode === DATETIME || mode === TIME)) {
        return new Date(new Date().setMinutes(0));
      }

      return new Date();
    };

    _this.getMinYear = function () {
      return _this.getMinDate().getFullYear();
    };

    _this.getMaxYear = function () {
      return _this.getMaxDate().getFullYear();
    };

    _this.getMinMonth = function () {
      return _this.getMinDate().getMonth();
    };

    _this.getMaxMonth = function () {
      return _this.getMaxDate().getMonth();
    };

    _this.getMinDay = function () {
      return _this.getMinDate().getDate();
    };

    _this.getMaxDay = function () {
      return _this.getMaxDate().getDate();
    };

    _this.getMinHour = function () {
      return _this.getMinDate().getHours();
    };

    _this.getMaxHour = function () {
      return _this.getMaxDate().getHours();
    };

    _this.getMinMinute = function () {
      return _this.getMinDate().getMinutes();
    };

    _this.getMaxMinute = function () {
      return _this.getMaxDate().getMinutes();
    };

    _this.getMinDate = function () {
      var minDate = (0, _parseState.isExtendDate)(_this.props.min);
      return minDate || _this.getDefaultMinDate();
    };

    _this.getMaxDate = function () {
      var maxDate = (0, _parseState.isExtendDate)(_this.props.max);
      return maxDate || _this.getDefaultMaxDate();
    };

    _this.getDefaultMinDate = function () {
      return (0, _date.getGregorianCalendar)(1900, 0, 1, 0, 0, 0);
    };

    _this.getDefaultMaxDate = function () {
      return (0, _date.getGregorianCalendar)(2030, 11, 30, 23, 59, 59);
    };

    _this.clipDate = function (date) {
      var mode = _this.props.mode;

      var minDate = _this.getMinDate();

      var maxDate = _this.getMaxDate();

      if (mode === DATETIME) {
        if (date < minDate) {
          return (0, _date.cloneDate)(minDate);
        }

        if (date > maxDate) {
          return (0, _date.cloneDate)(maxDate);
        }
      } else if (mode === DATE || mode === MONTH || mode === YEAR) {
        if (+date + ONE_DAY <= +minDate) {
          return (0, _date.cloneDate)(minDate);
        }

        if (date >= +maxDate + ONE_DAY) {
          return (0, _date.cloneDate)(maxDate);
        }
      } else {
        var maxHour = maxDate.getHours();
        var maxMinutes = maxDate.getMinutes();
        var minHour = minDate.getHours();
        var minMinutes = minDate.getMinutes();
        var hour = date.getHours();
        var minutes = date.getMinutes();

        if (hour < minHour || hour === minHour && minutes < minMinutes) {
          return (0, _date.cloneDate)(minDate);
        }

        if (hour > maxHour || hour === maxHour && minutes > maxMinutes) {
          return (0, _date.cloneDate)(maxDate);
        }
      }

      return date;
    };

    _this.state = (0, _parseState.parseState)(props);
    var onInit = _this.props.onInit;

    if (typeof onInit === 'function') {
      onInit(_this.getDate());
    }

    _this.getColsValue = _this.getColsValue.bind((0, _assertThisInitialized2.default)(_this));
    return _this;
  }

  (0, _createClass2.default)(DatePickerView, [{
    key: "getColsValue",
    value: function getColsValue() {
      var mode = this.props.mode;
      var date = this.getDate();
      var dataSource = [];
      var value = [];

      if (mode === YEAR) {
        dataSource = this.getDateData();
        value = [date.getFullYear()];
      }

      if (mode === MONTH) {
        dataSource = this.getDateData();
        value = [date.getFullYear(), date.getMonth()];
      }

      if (mode === DATE || mode === DATETIME) {
        dataSource = this.getDateData();
        value = [date.getFullYear(), date.getMonth(), date.getDate()];
      }

      if (mode === DATETIME) {
        dataSource = dataSource.concat(this.getTimeData());
        value = value.concat([date.getHours(), date.getMinutes()]);
      }

      if (mode === TIME) {
        dataSource = this.getTimeData();
        value = [date.getHours(), date.getMinutes()];
      }

      return {
        dataSource: dataSource,
        value: value
      };
    }
  }, {
    key: "getDate",
    value: function getDate() {
      var _this$state = this.state,
          date = _this$state.date,
          wheelDefault = _this$state.wheelDefault;
      return this.clipDate(date || wheelDefault || this.getDefaultDate());
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props5 = this.props,
          prefixCls = _this$props5.prefixCls,
          className = _this$props5.className,
          onInit = _this$props5.onInit,
          defaultValue = _this$props5.defaultValue,
          wheelDefaultValue = _this$props5.wheelDefaultValue,
          others = (0, _objectWithoutProperties2.default)(_this$props5, ["prefixCls", "className", "onInit", "defaultValue", "wheelDefaultValue"]);

      var _this$getColsValue = this.getColsValue(),
          dataSource = _this$getColsValue.dataSource,
          value = _this$getColsValue.value;

      return /*#__PURE__*/_react.default.createElement(_pickerView.default, (0, _extends2.default)({}, others, {
        className: className,
        prefixCls: prefixCls,
        dataSource: dataSource,
        value: value,
        onChange: this.onValueChange
      }));
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(props, state) {
      if (!(0, _isEqual.default)((0, _removeFnFromProps.default)(props, ['onChange', 'onInit', 'onTransition']), (0, _removeFnFromProps.default)(state.prevProps, ['onChange', 'onInit', 'onTransition']))) {
        return _objectSpread({
          prevProps: props
        }, (0, _parseState.parseState)(props));
      }

      return null;
    }
  }]);
  return DatePickerView;
}(_react.Component);

exports.default = DatePickerView;
DatePickerView.defaultProps = {
  prefixCls: 'za-date-picker-view',
  mode: DATE,
  disabled: false,
  minuteStep: 1,
  valueMember: 'value',
  stopScroll: false
};