"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _react = require("react");

var _events = _interopRequireDefault(require("../utils/events"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function isMouseEvent(e) {
  return e && !('touches' in e);
}

var Drag = /*#__PURE__*/function (_PureComponent) {
  (0, _inherits2.default)(Drag, _PureComponent);

  var _super = _createSuper(Drag);

  function Drag() {
    var _this;

    (0, _classCallCheck2.default)(this, Drag);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.currentX = void 0;
    _this.currentY = void 0;
    _this.dragState = Object.create(null);

    _this.onTouchStart = function (event) {
      _this.dragState.startTime = new Date();

      if (isMouseEvent(event)) {
        _this.dragState.startX = event.clientX;
        _this.dragState.startY = event.clientY;

        _events.default.on(document.body, 'mousemove', _this.onTouchMove);

        _events.default.on(document.body, 'mouseup', _this.onTouchEnd);
      } else {
        var touch = event.touches[0];
        _this.dragState.startX = touch.pageX;
        _this.dragState.startY = touch.pageY;
      }

      var state = _objectSpread({}, _this.dragState);

      var onDragStart = _this.props.onDragStart;

      if (typeof onDragStart === 'function') {
        onDragStart(event, state);
      }
    };

    _this.onTouchMove = function (event) {
      if (!_this.isDragStart) return false;

      if (isMouseEvent(event)) {
        _this.currentX = event.clientX;
        _this.currentY = event.clientY;
      } else {
        var touch = event.touches[0];
        _this.currentX = touch.pageX;
        _this.currentY = touch.pageY;
      }

      var offsetX = _this.currentX - _this.dragState.startX;
      var offsetY = _this.currentY - _this.dragState.startY;

      var state = _objectSpread(_objectSpread({}, _this.dragState), {}, {
        offsetX: offsetX,
        offsetY: offsetY // currentX: this.currentX,
        // currentY: this.currentY,

      });

      var onDragMove = _this.props.onDragMove;

      if (typeof onDragMove === 'function' && !onDragMove(event, state)) {
        return;
      }

      _this.dragState = state;
    };

    _this.onTouchEnd = function (event) {
      if (!_this.isDragStart) return false;

      if (isMouseEvent(event)) {
        _events.default.off(document.body, 'mousemove', _this.onTouchMove);

        _events.default.off(document.body, 'mouseup', _this.onTouchEnd);
      }

      var onDragEnd = _this.props.onDragEnd;

      if (typeof onDragEnd === 'function') {
        onDragEnd(event, _this.dragState);
      }

      _this.dragState = Object.create(null);
    };

    return _this;
  }

  (0, _createClass2.default)(Drag, [{
    key: "isDragStart",
    get: function get() {
      return this.dragState.startX !== undefined && this.dragState.startY !== undefined;
    }
  }, {
    key: "render",
    value: function render() {
      var children = this.props.children;
      return /*#__PURE__*/(0, _react.cloneElement)(children, {
        onTouchStart: this.onTouchStart,
        onTouchMove: this.onTouchMove,
        onTouchEnd: this.onTouchEnd,
        onMouseDown: this.onTouchStart,
        onMouseMove: this.onTouchMove,
        onMouseUp: this.onTouchEnd
      });
    }
  }]);
  return Drag;
}(_react.PureComponent);

exports.default = Drag;