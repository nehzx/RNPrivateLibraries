"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _enzyme = require("enzyme");

var _enzymeToJson = _interopRequireDefault(require("enzyme-to-json"));

var _utils = require("ts-jest/utils");

var _index = _interopRequireDefault(require("../index"));

var _utils2 = require("../../../tests/utils");

var _handleFileInfo = _interopRequireDefault(require("../utils/handleFileInfo"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

jest.mock('../utils/handleFileInfo');
var mHandleFileInfo = (0, _utils.mocked)(_handleFileInfo.default);
describe('file picker', function () {
  it('render correctly', function () {
    var props = {
      onChange: jest.fn(),
      children: /*#__PURE__*/_react.default.createElement("button", null, "add")
    };
    var wrapper = (0, _enzyme.render)( /*#__PURE__*/_react.default.createElement(_index.default, props));
    expect((0, _enzymeToJson.default)(wrapper)).toMatchSnapshot();
  });
});
describe('file picker event', function () {
  var props = {
    accept: 'image/jpg, image/jpeg, image/gif, image/png',
    onChange: jest.fn(),
    quality: 0.3,
    children: /*#__PURE__*/_react.default.createElement("button", null, "add")
  };
  var mCreateObjectURL = jest.fn();
  var file = new File([''], './test.jpg', {
    type: 'image/jpeg'
  });
  var mFileDetail = {
    file: file,
    fileType: file.type,
    fileName: file.name,
    fileSize: file.size,
    thumbnail: 'data:,'
  };
  beforeAll(function () {
    (0, _utils2.mockCreateObjectURL)(mCreateObjectURL);
  });
  afterAll(function () {
    (0, _utils2.mockResetCreateObjectURL)();
  });
  afterEach(function () {
    jest.clearAllMocks();
  });
  it('select image & onBeforeSelect is not func', function () {
    var _props = _objectSpread(_objectSpread({}, props), {}, {
      multiple: true,
      onBeforeSelect: false
    });

    mHandleFileInfo.mockImplementation(function (_, callback) {
      callback(mFileDetail);
    });
    var wrapper = (0, _enzyme.mount)( /*#__PURE__*/_react.default.createElement(_index.default, _props));
    var mClickEvent = {
      preventDefault: jest.fn()
    };
    wrapper.find('.za-file-picker__input').simulate('click', mClickEvent);
    expect(mClickEvent.preventDefault).not.toBeCalled();
    wrapper.find('.za-file-picker__input').simulate('change', {
      target: {
        files: [file]
      }
    });
    expect(props.onChange).toBeCalledWith([mFileDetail]);
    expect(props.onChange).toBeCalledTimes(1);
  });
  it('should handle change event if files is an array of File instance', function () {
    var getFileInfo;
    mHandleFileInfo.mockImplementation(function (_, callback) {
      getFileInfo = callback;
      callback(mFileDetail);
    });
    var wrapper = (0, _enzyme.mount)( /*#__PURE__*/_react.default.createElement(_index.default, props));
    wrapper.find('.za-file-picker__input').simulate('change', {
      target: {
        files: [file]
      }
    });
    expect(mHandleFileInfo).toBeCalledWith({
      file: file,
      quality: 0.3
    }, getFileInfo);
    expect(props.onChange).toBeCalledWith(mFileDetail);
  });
  it('click children', function () {
    var wrapper = (0, _enzyme.mount)( /*#__PURE__*/_react.default.createElement(_index.default, props));
    wrapper.find('button').simulate('click');
    wrapper.find('.za-file-picker__input').simulate('change', {
      target: {
        files: [file]
      }
    });
    expect(props.onChange).toBeCalled();
  });
});
describe('file picker disabled', function () {
  var props = {
    accept: 'image/jpg, image/jpeg, image/gif, image/png',
    onChange: jest.fn(),
    onBeforeSelect: jest.fn(),
    children: /*#__PURE__*/_react.default.createElement("button", null, "foo")
  };
  it('on before select return false', function () {
    var _props = _objectSpread(_objectSpread({}, props), {}, {
      onBeforeSelect: jest.fn(function () {
        return false;
      })
    });

    var wrapper = (0, _enzyme.mount)( /*#__PURE__*/_react.default.createElement(_index.default, _props));
    wrapper.find('.za-file-picker__input').simulate('click');
    expect(props.onChange).not.toHaveBeenCalled();
  });
  it('disabled', function () {
    var _props = _objectSpread(_objectSpread({}, props), {}, {
      disabled: true
    });

    var wrapper = (0, _enzyme.mount)( /*#__PURE__*/_react.default.createElement(_index.default, _props));
    wrapper.find('.za-file-picker__input').simulate('click');
    expect(props.onChange).not.toHaveBeenCalled();
  });
});