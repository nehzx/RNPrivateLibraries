"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _react = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _reactNativeCameraRollPicker = _interopRequireDefault(require("react-native-camera-roll-picker"));

var _index = _interopRequireDefault(require("../nav-bar/index.native"));

var _index2 = _interopRequireDefault(require("./style/index.native"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var filePickerStyles = _reactNative.StyleSheet.create(_index2.default);

var cameraRollOptions = {
  scrollRenderAheadDistance: 500,
  initialListSize: 1,
  pageSize: 3,
  removeClippedSubviews: false,
  groupTypes: 'All',
  batchSize: 1000,
  maximum: 5,
  imagesPerRow: 5,
  imageMargin: 5
};

var FilePicker = /*#__PURE__*/function (_PureComponent) {
  (0, _inherits2.default)(FilePicker, _PureComponent);

  var _super = _createSuper(FilePicker);

  function FilePicker() {
    var _this;

    (0, _classCallCheck2.default)(this, FilePicker);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.state = {
      isShowRoll: false,
      imageList: [],
      selectedImages: []
    };

    _this.getFileInfo = function (file) {
      var fileType = file && file.filename.substr(file.filename.lastIndexOf('.') + 1);
      var thumbnail = file && file.uri;
      return _objectSpread(_objectSpread({}, file), {}, {
        fileType: fileType,
        thumbnail: thumbnail
      });
    };

    _this.handleShowCameraRoll = function () {
      var _this$props = _this.props,
          disabled = _this$props.disabled,
          onBeforeSelect = _this$props.onBeforeSelect;

      if (onBeforeSelect() === false || disabled) {
        return;
      }

      _this.setState(function (_ref) {
        var isShowRoll = _ref.isShowRoll;
        return {
          isShowRoll: !isShowRoll,
          selectedImages: [],
          imageList: []
        };
      });
    };

    _this.getSelectedImages = function (images) {
      var _this$props2 = _this.props,
          multiple = _this$props2.multiple,
          onChange = _this$props2.onChange;

      if (!images.length) {
        return;
      }

      if (multiple) {
        var data = images.map(function (item) {
          return _this.getFileInfo(item);
        });

        _this.setState({
          imageList: data,
          selectedImages: images
        });
      } else {
        var _data = _this.getFileInfo(images[0]);

        onChange(_data);

        _this.handleShowCameraRoll();
      } // this.setState({
      //   num: images.length,
      // });

    };

    _this.handleConfirm = function () {
      var onChange = _this.props.onChange;
      onChange(_this.state.imageList);

      _this.handleShowCameraRoll();
    };

    return _this;
  }

  (0, _createClass2.default)(FilePicker, [{
    key: "render",
    value: function render() {
      var _this$props3 = this.props,
          disabled = _this$props3.disabled,
          styles = _this$props3.styles,
          children = _this$props3.children,
          accept = _this$props3.accept,
          maximum = _this$props3.maximum;
      var _this$state = this.state,
          isShowRoll = _this$state.isShowRoll,
          selectedImages = _this$state.selectedImages;
      var assetType = accept.indexOf('image') > -1 ? 'Photos' : accept;
      var content = disabled ? /*#__PURE__*/_react.default.createElement(_reactNative.View, null, children) : /*#__PURE__*/_react.default.createElement(_reactNative.TouchableOpacity, {
        onPress: this.handleShowCameraRoll
      }, children);

      var cameraRollPicker = /*#__PURE__*/_react.default.createElement(_reactNative.Modal, {
        visible: isShowRoll,
        animationType: "slide",
        transparent: false,
        onRequestClose: function onRequestClose() {}
      }, /*#__PURE__*/_react.default.createElement(_reactNative.View, {
        style: {
          flex: 1
        }
      }, /*#__PURE__*/_react.default.createElement(_index.default, null), /*#__PURE__*/_react.default.createElement(_reactNativeCameraRollPicker.default, (0, _extends2.default)({}, cameraRollOptions, {
        assetType: assetType,
        maximum: maximum,
        selected: selectedImages,
        callback: this.getSelectedImages
      }))));

      return /*#__PURE__*/_react.default.createElement(_reactNative.View, {
        style: disabled && styles.disabledWrapper
      }, content, cameraRollPicker);
    }
  }]);
  return FilePicker;
}(_react.PureComponent);

exports.default = FilePicker;
FilePicker.defaultProps = {
  accept: 'images/*',
  disabled: false,
  multiple: false,
  styles: filePickerStyles,
  onBeforeSelect: function onBeforeSelect() {
    return true;
  },
  onChange: function onChange() {}
};