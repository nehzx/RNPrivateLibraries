"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _enzyme = require("enzyme");

var _enzymeToJson = _interopRequireDefault(require("enzyme-to-json"));

var _ImagePreview = _interopRequireDefault(require("../ImagePreview"));

var _images = require("../../../tests/testData/images");

var _carousel = _interopRequireDefault(require("../../carousel"));

var _utils = require("../../../tests/utils");

var _activityIndicator = _interopRequireDefault(require("../../activity-indicator"));

var _index = _interopRequireDefault(require("../index"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

describe('ImagePreview', function () {
  afterEach(function () {
    jest.restoreAllMocks();
    jest.useRealTimers();
  });
  describe('snapshot', function () {
    it('renders correctly', function () {
      var wrapper = (0, _enzyme.mount)( /*#__PURE__*/_react.default.createElement(_ImagePreview.default, {
        visible: true,
        onChange: jest.fn(),
        images: _images.images
      }));
      expect((0, _enzymeToJson.default)(wrapper)).toMatchSnapshot();
    });
    it('renders correctly with origin', function () {
      var wrapper = (0, _enzyme.mount)( /*#__PURE__*/_react.default.createElement(_ImagePreview.default, {
        visible: true,
        onChange: jest.fn(),
        images: _images.originImages
      }));
      expect((0, _enzymeToJson.default)(wrapper)).toMatchSnapshot();
    });
  });
  it('should pass locale and localeCode props to original component after wrapped by ConfigReceiverWrapper HOC', function () {
    var wrapper = (0, _enzyme.mount)( /*#__PURE__*/_react.default.createElement(_index.default, {
      visible: true,
      images: _images.images
    }));
    expect(wrapper.find(_ImagePreview.default).prop('locale')).toEqual({
      loadBefore: '查看原图',
      loadStart: '加载中',
      loadEnd: '加载完成'
    });
    expect(wrapper.find(_ImagePreview.default).prop('localeCode')).toEqual('zh-CN');
  });
  it('should get initial derived state from props', function () {
    var state = _ImagePreview.default.getDerivedStateFromProps(_objectSpread(_objectSpread({}, _ImagePreview.default.defaultProps), {}, {
      visible: true,
      images: _images.images
    }), {
      visible: true,
      images: [{
        url: 'https://static.zhongan.com/website/health/zarm/images/banners/1.png'
      }, {
        url: 'https://static.zhongan.com/website/health/zarm/images/banners/2.png'
      }, {
        url: 'https://static.zhongan.com/website/health/zarm/images/banners/3.png'
      }]
    });

    expect(state).toEqual({
      visible: true,
      activeIndex: 0,
      currentIndex: 0,
      images: [{
        url: 'https://static.zhongan.com/website/health/zarm/images/banners/1.png'
      }, {
        url: 'https://static.zhongan.com/website/health/zarm/images/banners/2.png'
      }, {
        url: 'https://static.zhongan.com/website/health/zarm/images/banners/3.png'
      }],
      prevVisible: true,
      prevActiveIndex: 0,
      prevImages: ['https://static.zhongan.com/website/health/zarm/images/banners/1.png', 'https://static.zhongan.com/website/health/zarm/images/banners/2.png', 'https://static.zhongan.com/website/health/zarm/images/banners/3.png']
    });
  });
  it('should get initial derived state from props - 2', function () {
    var wrapper = (0, _enzyme.mount)( /*#__PURE__*/_react.default.createElement(_ImagePreview.default, {
      visible: true,
      images: _images.images
    }));
    expect(wrapper.state()).toEqual({
      visible: true,
      activeIndex: 0,
      currentIndex: 0,
      images: [{
        url: 'https://static.zhongan.com/website/health/zarm/images/banners/1.png'
      }, {
        url: 'https://static.zhongan.com/website/health/zarm/images/banners/2.png'
      }, {
        url: 'https://static.zhongan.com/website/health/zarm/images/banners/3.png'
      }],
      prevVisible: true,
      prevActiveIndex: 0,
      prevImages: ['https://static.zhongan.com/website/health/zarm/images/banners/1.png', 'https://static.zhongan.com/website/health/zarm/images/banners/2.png', 'https://static.zhongan.com/website/health/zarm/images/banners/3.png']
    });
  });
  it('should handle onChange event', /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee() {
    var mOnChange, wrapper;
    return _regenerator.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            mOnChange = jest.fn();
            wrapper = (0, _enzyme.mount)( /*#__PURE__*/_react.default.createElement(_ImagePreview.default, {
              visible: true,
              images: _images.images,
              onChange: mOnChange
            }));
            expect(wrapper.state('currentIndex')).toEqual(0);
            wrapper.find(_carousel.default).invoke('onChange')(1);
            expect(wrapper.state('currentIndex')).toEqual(1);
            expect(mOnChange).toBeCalledWith(1);

          case 6:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  })));
  it("should not call onChange event if it's not existed", /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2() {
    var wrapper;
    return _regenerator.default.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            wrapper = (0, _enzyme.mount)( /*#__PURE__*/_react.default.createElement(_ImagePreview.default, {
              visible: true,
              images: _images.images
            }));
            expect(wrapper.state('currentIndex')).toEqual(0);
            wrapper.find(_carousel.default).invoke('onChange')(1);
            expect(wrapper.state('currentIndex')).toEqual(1);

          case 4:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  })));
  it('should load origin url for first image', function () {
    var onloadRef;
    var srcRef;
    var onloadSymbol = Symbol('onload');
    var srcSymbol = Symbol('src');
    Object.defineProperty(Image.prototype, 'onload', {
      get: function get() {
        return this[onloadSymbol];
      },
      set: function set(onload) {
        onloadRef = onload;
        this[onloadSymbol] = onload;
      },
      configurable: true
    });
    Object.defineProperty(Image.prototype, 'src', {
      get: function get() {
        return this[srcSymbol];
      },
      set: function set(src) {
        srcRef = src;
        this[srcSymbol] = src;
      },
      configurable: true
    });
    jest.useFakeTimers();
    var wrapper = (0, _enzyme.mount)( /*#__PURE__*/_react.default.createElement(_ImagePreview.default, {
      images: _images.originImages,
      visible: true
    }));
    wrapper.find('.za-image-preview__origin__button').simulate('click');
    expect(wrapper.state('images')[0]).toEqual({
      url: 'https://cdn-health.zhongan.com/zarm/imagePreview/compress_1.png',
      originUrl: 'https://static.zhongan.com/website/health/zarm/images/banners/1.png',
      loaded: 'loadStart'
    });
    expect(wrapper.find(_activityIndicator.default).exists()).toBeTruthy();
    onloadRef();
    expect(wrapper.state('images')[0]).toEqual({
      url: 'https://static.zhongan.com/website/health/zarm/images/banners/1.png',
      originUrl: 'https://static.zhongan.com/website/health/zarm/images/banners/1.png',
      loaded: 'loadEnd'
    });
    jest.advanceTimersByTime(1500);
    expect(wrapper.state('images')[0]).toEqual({
      url: 'https://static.zhongan.com/website/health/zarm/images/banners/1.png',
      originUrl: 'https://static.zhongan.com/website/health/zarm/images/banners/1.png',
      loaded: 'loadAfter'
    });
    expect(srcRef).toEqual('https://static.zhongan.com/website/health/zarm/images/banners/1.png');
  });
  it('should render show origin url button if origin url is not existed', function () {
    var wrapper = (0, _enzyme.mount)( /*#__PURE__*/_react.default.createElement(_ImagePreview.default, {
      images: _images.images,
      visible: true
    }));
    var buttonWrapper = wrapper.find('.za-image-preview__origin__button');
    expect(buttonWrapper.exists()).toBeFalsy();
  });
  it("should not call onClose handler if user's touch is moving", function () {
    var mOnClose = jest.fn();
    var wrapper = (0, _enzyme.mount)( /*#__PURE__*/_react.default.createElement(_ImagePreview.default, {
      visible: true,
      images: _images.images,
      onClose: mOnClose
    }));
    expect(wrapper.instance()['moving']).toBeUndefined();
    var contentWrapper = wrapper.find('.za-image-preview__content');
    contentWrapper.simulate('touchstart').simulate('touchmove').simulate('click');
    expect(wrapper.instance()['moving']).toBeTruthy();
    expect(mOnClose).not.toBeCalled();
  });
  it("should not call onClose handler if user's mouse is moving", function () {
    var mOnClose = jest.fn();
    var wrapper = (0, _enzyme.mount)( /*#__PURE__*/_react.default.createElement(_ImagePreview.default, {
      visible: true,
      images: _images.images,
      onClose: mOnClose
    }));
    expect(wrapper.instance()['moving']).toBeUndefined();
    var contentWrapper = wrapper.find('.za-image-preview__content');
    contentWrapper.simulate('mousedown').simulate('mousemove').simulate('click');
    expect(wrapper.instance()['moving']).toBeTruthy();
    expect(mOnClose).not.toBeCalled();
  });
  it("should call onClose handler if user's touch is NOT moving", function () {
    var mOnClose = jest.fn();
    var wrapper = (0, _enzyme.mount)( /*#__PURE__*/_react.default.createElement(_ImagePreview.default, {
      visible: true,
      images: _images.images,
      onClose: mOnClose
    }));
    var contentWrapper = wrapper.find('.za-image-preview__content');
    contentWrapper.simulate('click');
    expect(mOnClose).toBeCalled();
  });
  it('should not call onClose handler when touch end and the duration between touchstart and touchend greater than 300ms', /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee3() {
    var mOnClose, wrapper, contentWrapper;
    return _regenerator.default.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            mOnClose = jest.fn();
            wrapper = (0, _enzyme.mount)( /*#__PURE__*/_react.default.createElement(_ImagePreview.default, {
              visible: true,
              images: _images.images,
              onClose: mOnClose
            }));
            contentWrapper = wrapper.find('.za-image-preview__content');
            contentWrapper.simulate('touchstart').simulate('touchmove');
            _context3.next = 6;
            return (0, _utils.sleep)(500);

          case 6:
            contentWrapper.simulate('touchend');
            expect(mOnClose).not.toBeCalled();

          case 8:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  })));
  it('should call onClose handler when touch end and the duration between touchstart and touchend less than 300ms', /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee4() {
    var mOnClose, wrapper, contentWrapper;
    return _regenerator.default.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            mOnClose = jest.fn();
            wrapper = (0, _enzyme.mount)( /*#__PURE__*/_react.default.createElement(_ImagePreview.default, {
              visible: true,
              images: _images.images,
              onClose: mOnClose
            }));
            contentWrapper = wrapper.find('.za-image-preview__content');
            contentWrapper.simulate('touchstart');
            _context4.next = 6;
            return (0, _utils.sleep)(200);

          case 6:
            jest.useFakeTimers();
            contentWrapper.simulate('touchend');
            jest.advanceTimersByTime(300);
            expect(mOnClose).toBeCalledTimes(1);
            expect(setTimeout).toBeCalledWith(expect.any(Function), 300);

          case 11:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4);
  })));
  it("should clear setTimeout schedule if user's touch is moving and previous scheduler exists", /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee5() {
    var mOnClose, wrapper, contentWrapper, doubleClickTimer;
    return _regenerator.default.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            mOnClose = jest.fn();
            wrapper = (0, _enzyme.mount)( /*#__PURE__*/_react.default.createElement(_ImagePreview.default, {
              visible: true,
              images: _images.images
            }));
            contentWrapper = wrapper.find('.za-image-preview__content');
            contentWrapper.simulate('touchstart');
            _context5.next = 6;
            return (0, _utils.sleep)(200);

          case 6:
            jest.useFakeTimers();
            contentWrapper.simulate('touchend'); // eslint-disable-next-line prefer-destructuring

            doubleClickTimer = wrapper.instance()['doubleClickTimer'];
            contentWrapper.simulate('touchend');
            expect(clearTimeout).toBeCalledWith(doubleClickTimer);
            expect(mOnClose).not.toBeCalled();

          case 12:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5);
  })));
  it('should not call onClose handler when touch end and the duration between touchstart and touchcancel greater than 300ms', /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee6() {
    var mOnClose, wrapper, contentWrapper;
    return _regenerator.default.wrap(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            mOnClose = jest.fn();
            wrapper = (0, _enzyme.mount)( /*#__PURE__*/_react.default.createElement(_ImagePreview.default, {
              visible: true,
              images: _images.images,
              onClose: mOnClose
            }));
            contentWrapper = wrapper.find('.za-image-preview__content');
            contentWrapper.simulate('touchstart').simulate('touchmove');
            _context6.next = 6;
            return (0, _utils.sleep)(500);

          case 6:
            contentWrapper.simulate('touchcancel');
            expect(mOnClose).not.toBeCalled();

          case 8:
          case "end":
            return _context6.stop();
        }
      }
    }, _callee6);
  })));
  it('should call onClose handler when touch end and the duration between touchstart and touchcancel less than 300ms', /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee7() {
    var mOnClose, wrapper, contentWrapper;
    return _regenerator.default.wrap(function _callee7$(_context7) {
      while (1) {
        switch (_context7.prev = _context7.next) {
          case 0:
            mOnClose = jest.fn();
            wrapper = (0, _enzyme.mount)( /*#__PURE__*/_react.default.createElement(_ImagePreview.default, {
              visible: true,
              images: _images.images,
              onClose: mOnClose
            }));
            contentWrapper = wrapper.find('.za-image-preview__content');
            contentWrapper.simulate('touchstart');
            _context7.next = 6;
            return (0, _utils.sleep)(200);

          case 6:
            jest.useFakeTimers();
            contentWrapper.simulate('touchcancel');
            jest.advanceTimersByTime(300);
            expect(mOnClose).toBeCalledTimes(1);
            expect(setTimeout).toBeCalledWith(expect.any(Function), 300);

          case 11:
          case "end":
            return _context7.stop();
        }
      }
    }, _callee7);
  })));
  it("should clear setTimeout schedule if user's touch is moving and previous scheduler exists", /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee8() {
    var mOnClose, wrapper, contentWrapper, doubleClickTimer;
    return _regenerator.default.wrap(function _callee8$(_context8) {
      while (1) {
        switch (_context8.prev = _context8.next) {
          case 0:
            mOnClose = jest.fn();
            wrapper = (0, _enzyme.mount)( /*#__PURE__*/_react.default.createElement(_ImagePreview.default, {
              visible: true,
              images: _images.images
            }));
            contentWrapper = wrapper.find('.za-image-preview__content');
            contentWrapper.simulate('touchstart');
            _context8.next = 6;
            return (0, _utils.sleep)(200);

          case 6:
            jest.useFakeTimers();
            contentWrapper.simulate('touchcancel'); // eslint-disable-next-line prefer-destructuring

            doubleClickTimer = wrapper.instance()['doubleClickTimer'];
            contentWrapper.simulate('touchcancel');
            expect(clearTimeout).toBeCalledWith(doubleClickTimer);
            expect(mOnClose).not.toBeCalled();

          case 12:
          case "end":
            return _context8.stop();
        }
      }
    }, _callee8);
  })));
  it('should set moving to false and touchStartTime to 0 when mouse up', function () {
    var wrapper = (0, _enzyme.mount)( /*#__PURE__*/_react.default.createElement(_ImagePreview.default, {
      visible: true,
      images: _images.images
    }));
    var contentWrapper = wrapper.find('.za-image-preview__content');
    contentWrapper.simulate('mousedown').simulate('mousemove');
    expect(wrapper.instance()['moving']).toBeTruthy();
    expect(wrapper.instance()['touchStartTime']).toBeGreaterThan(0);
    jest.useFakeTimers();
    contentWrapper.simulate('mouseup');
    jest.advanceTimersByTime(1);
    expect(wrapper.instance()['moving']).toBeFalsy();
    expect(wrapper.instance()['touchStartTime']).toBe(0);
  });
  it('should render pagination', function () {
    var wrapper = (0, _enzyme.mount)( /*#__PURE__*/_react.default.createElement(_ImagePreview.default, {
      visible: true,
      images: _images.images
    }));
    var paginationWrapper = wrapper.find('.za-image-preview__index');
    expect(paginationWrapper.exists()).toBeTruthy();
    expect(paginationWrapper.text()).toEqual('1 / 3');
  });
  it('should not render pagination', function () {
    var wrapper = (0, _enzyme.mount)( /*#__PURE__*/_react.default.createElement(_ImagePreview.default, {
      visible: true,
      images: _images.images,
      showPagination: false
    }));
    expect(wrapper.find('.za-image-preview__index').exists()).toBeFalsy();
  });
  it('should render images', function () {
    var wrapper = (0, _enzyme.mount)( /*#__PURE__*/_react.default.createElement(_ImagePreview.default, {
      visible: true,
      images: _images.images
    }));
    var itemWrapper = wrapper.find('.za-image-preview__item');
    expect(itemWrapper).toHaveLength(3);
    var srcArr = itemWrapper.map(function (w) {
      return w.find('img');
    }).map(function (v) {
      return v.prop('src');
    });
    expect(srcArr).toEqual(_images.images);
  });
});