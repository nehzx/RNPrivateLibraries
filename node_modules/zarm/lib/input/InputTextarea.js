"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _react = _interopRequireWildcard(require("react"));

var _classnames2 = _interopRequireDefault(require("classnames"));

var _utils = require("./utils");

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var regexAstralSymbols = /[\uD800-\uDBFF][\uDC00-\uDFFF]|\n/g;

var countSymbols = function countSymbols() {
  var text = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
  return text.replace(regexAstralSymbols, '_').length;
};

var InputTextarea = /*#__PURE__*/function (_PureComponent) {
  (0, _inherits2.default)(InputTextarea, _PureComponent);

  var _super = _createSuper(InputTextarea);

  function InputTextarea(props) {
    var _this;

    (0, _classCallCheck2.default)(this, InputTextarea);
    _this = _super.call(this, props);
    _this.input = void 0;

    _this.onFocus = function (e) {
      if (!('focused' in _this.props)) {
        _this.setState({
          focused: true
        });
      }

      var onFocus = _this.props.onFocus;

      if (typeof onFocus === 'function') {
        onFocus(e.target.value);
      }
    };

    _this.onBlur = function (e) {
      if (!('focused' in _this.props)) {
        _this.setState({
          focused: false
        });
      }

      var onBlur = _this.props.onBlur;

      if (typeof onBlur === 'function') {
        onBlur(e.target.value);
      }
    };

    _this.handleComposition = function (e) {
      var _this$props = _this.props,
          onCompositionStart = _this$props.onCompositionStart,
          onCompositionUpdate = _this$props.onCompositionUpdate,
          onCompositionEnd = _this$props.onCompositionEnd,
          onChange = _this$props.onChange;

      if (e.type === 'compositionstart') {
        // this.setState({
        //   isOnComposition: true,
        // });
        if (typeof onCompositionStart === 'function') {
          onCompositionStart(e);
        }
      }

      if (e.type === 'compositionupdate') {
        if (typeof onCompositionUpdate === 'function') {
          onCompositionUpdate(e);
        }
      }

      if (e.type === 'compositionend') {
        // composition is end
        // this.setState({
        //   isOnComposition: false,
        // });
        var value = e.target.value;

        if (typeof onCompositionEnd === 'function') {
          onCompositionEnd(e);
        }

        if (typeof onChange === 'function') {
          onChange(value);
        }
      }
    };

    _this.onChange = function (e) {
      var onChange = _this.props.onChange;
      var value = e.target.value;

      if (!('value' in _this.props)) {
        _this.setState({
          value: value
        });
      }

      if (typeof onChange === 'function') {
        onChange(value);
      }
    };

    _this.state = {
      value: (0, _utils.getValue)(props),
      focused: props.focused || false
    };
    return _this;
  }

  (0, _createClass2.default)(InputTextarea, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var autoFocus = this.props.autoFocus;
      var focused = this.state.focused;

      if (autoFocus || focused) {
        this.input.focus();
      }
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate() {
      var _this$props2 = this.props,
          autoHeight = _this$props2.autoHeight,
          rows = _this$props2.rows,
          readOnly = _this$props2.readOnly;
      var focused = this.state.focused;

      if (autoHeight) {
        this.input.style.height = 'auto';
        this.input.scrollTop = 0;
        this.input.style.height = "".concat(this.input.scrollHeight, "px");
      }

      if (autoHeight && readOnly && rows) {
        this.input.style.height = "".concat(this.input.scrollHeight * rows, "px");
      }

      if (focused) {
        this.input.focus();
      }
    }
  }, {
    key: "focus",
    value: function focus() {
      this.input.focus();
    }
  }, {
    key: "blur",
    value: function blur() {
      this.input.blur();
    }
  }, {
    key: "render",
    value: function render() {
      var _classnames,
          _this2 = this;

      var _this$props3 = this.props,
          prefixCls = _this$props3.prefixCls,
          className = _this$props3.className,
          maxLength = _this$props3.maxLength,
          disabled = _this$props3.disabled,
          readOnly = _this$props3.readOnly,
          autoHeight = _this$props3.autoHeight,
          showLength = _this$props3.showLength,
          focused = _this$props3.focused,
          rest = (0, _objectWithoutProperties2.default)(_this$props3, ["prefixCls", "className", "maxLength", "disabled", "readOnly", "autoHeight", "showLength", "focused"]);
      var cls = (0, _classnames2.default)(prefixCls, "".concat(prefixCls, "--textarea"), className, (_classnames = {}, (0, _defineProperty2.default)(_classnames, "".concat(prefixCls, "--disabled"), disabled), (0, _defineProperty2.default)(_classnames, "".concat(prefixCls, "--readonly"), readOnly), _classnames));
      var value = this.state.value;
      var length = countSymbols(value);

      var textLengthRender = showLength && maxLength && /*#__PURE__*/_react.default.createElement("div", {
        className: "".concat(prefixCls, "__length")
      }, "".concat(length, "/").concat(maxLength));

      var renderInput = /*#__PURE__*/_react.default.createElement("textarea", (0, _extends2.default)({}, rest, {
        value: 'value' in this.props ? value : undefined,
        ref: function ref(ele) {
          _this2.input = ele;
        },
        maxLength: maxLength,
        disabled: disabled,
        onChange: this.onChange,
        onFocus: this.onFocus,
        onBlur: this.onBlur,
        onCompositionStart: function onCompositionStart(e) {
          _this2.handleComposition(e);
        },
        onCompositionUpdate: function onCompositionUpdate(e) {
          _this2.handleComposition(e);
        },
        onCompositionEnd: function onCompositionEnd(e) {
          _this2.handleComposition(e);
        }
      }));

      var renderText = /*#__PURE__*/_react.default.createElement("div", {
        className: "".concat(prefixCls, "__content"),
        ref: function ref(ele) {
          _this2.input = ele;
        }
      }, value);

      return /*#__PURE__*/_react.default.createElement("div", {
        className: cls
      }, !readOnly ? renderInput : renderText, textLengthRender);
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(nextProps) {
      if ('focused' in nextProps || 'value' in nextProps) {
        return {
          value: (0, _utils.getValue)(nextProps),
          focused: nextProps.focused || false
        };
      }

      return null;
    }
  }]);
  return InputTextarea;
}(_react.PureComponent);

exports.default = InputTextarea;
InputTextarea.defaultProps = {
  prefixCls: 'za-input',
  disabled: false,
  autoHeight: false,
  showLength: false,
  focused: false
};