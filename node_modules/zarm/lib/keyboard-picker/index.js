"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _react = _interopRequireWildcard(require("react"));

var _keyboard = _interopRequireDefault(require("../keyboard"));

var _popup = _interopRequireDefault(require("../popup"));

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var KeyboardPicker = /*#__PURE__*/function (_PureComponent) {
  (0, _inherits2.default)(KeyboardPicker, _PureComponent);

  var _super = _createSuper(KeyboardPicker);

  // static show = (props) => {
  //   ReactDOM.render(<KeyboardPicker {...props} visible />, window.zarmKeyboardPicker);
  // }
  // static hide = () => {
  //   ReactDOM.render(<KeyboardPicker visible={false} />, window.zarmKeyboardPicker);
  // }
  function KeyboardPicker(props) {
    var _this;

    (0, _classCallCheck2.default)(this, KeyboardPicker);
    _this = _super.call(this, props);

    _this.onKeyClick = function (key) {
      if (['ok', 'close'].indexOf(key) > -1) {
        _this.setState({
          visible: false
        });
      }

      var onKeyClick = _this.props.onKeyClick;

      if (typeof onKeyClick === 'function') {
        onKeyClick(key);
      }
    };

    _this.state = {
      visible: props.visible
    };
    return _this;
  }

  (0, _createClass2.default)(KeyboardPicker, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          prefixCls = _this$props.prefixCls,
          className = _this$props.className,
          destroy = _this$props.destroy,
          others = (0, _objectWithoutProperties2.default)(_this$props, ["prefixCls", "className", "destroy"]);
      var visible = this.state.visible;
      return /*#__PURE__*/_react.default.createElement(_popup.default, {
        className: className,
        visible: visible,
        mask: false,
        destroy: destroy
      }, /*#__PURE__*/_react.default.createElement("div", {
        className: prefixCls
      }, /*#__PURE__*/_react.default.createElement(_keyboard.default, (0, _extends2.default)({}, others, {
        onKeyClick: this.onKeyClick
      }))));
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(nextProps) {
      if ('visible' in nextProps) {
        return {
          visible: nextProps.visible
        };
      }

      return null;
    }
  }]);
  return KeyboardPicker;
}(_react.PureComponent); // if (typeof window !== 'undefined') {
//   if (!window.zarmKeyboardPicker) {
//     window.zarmKeyboardPicker = document.createElement('div');
//     document.body.appendChild(window.zarmKeyboardPicker);
//   }
//   ReactDOM.render(<KeyboardPicker visible={false} />, window.zarmKeyboardPicker);
// }


exports.default = KeyboardPicker;
KeyboardPicker.defaultProps = {
  prefixCls: 'za-keyboard-picker',
  visible: false,
  type: 'number',
  destroy: true
};