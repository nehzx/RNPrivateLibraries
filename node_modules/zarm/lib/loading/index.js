"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _react = _interopRequireWildcard(require("react"));

var _reactDom = _interopRequireDefault(require("react-dom"));

var _popup = _interopRequireDefault(require("../popup"));

var _dom = require("../utils/dom");

var _activityIndicator = _interopRequireDefault(require("../activity-indicator"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var Loading = /*#__PURE__*/function (_PureComponent) {
  (0, _inherits2.default)(Loading, _PureComponent);

  var _super = _createSuper(Loading);

  function Loading() {
    var _this;

    (0, _classCallCheck2.default)(this, Loading);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.timer = void 0;
    _this.state = {
      visible: _this.props.visible
    };

    _this.afterClose = function () {
      var afterClose = _this.props.afterClose;

      if (Loading.zarmLoading) {
        _reactDom.default.unmountComponentAtNode(Loading.zarmLoading);

        Loading.loadingContainer.removeChild(Loading.zarmLoading);
        Loading.zarmLoading = null;
      }

      if (typeof afterClose === 'function') {
        afterClose();
      }
    };

    _this._hide = function () {
      _this.setState({
        visible: false
      });
    };

    return _this;
  }

  (0, _createClass2.default)(Loading, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.autoClose();
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      var visible = this.props.visible;

      if (prevProps.visible !== visible) {
        if (visible) {
          // eslint-disable-next-line
          this.setState({
            visible: true
          });
          this.autoClose();
        } else {
          this._hide();
        }
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      clearTimeout(this.timer);
    }
  }, {
    key: "autoClose",
    value: function autoClose() {
      var _this2 = this;

      var stayTime = this.props.stayTime;

      if (stayTime && stayTime > 0) {
        this.timer = setTimeout(function () {
          _this2._hide();

          clearTimeout(_this2.timer);
        }, stayTime);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          prefixCls = _this$props.prefixCls,
          content = _this$props.content,
          stayTime = _this$props.stayTime,
          className = _this$props.className,
          others = (0, _objectWithoutProperties2.default)(_this$props, ["prefixCls", "content", "stayTime", "className"]);
      var visible = this.state.visible;
      return /*#__PURE__*/_react.default.createElement(_popup.default, (0, _extends2.default)({
        direction: "center",
        maskType: "transparent",
        width: "70%"
      }, others, {
        visible: visible,
        afterClose: this.afterClose
      }), /*#__PURE__*/_react.default.createElement("div", {
        className: prefixCls
      }, /*#__PURE__*/_react.default.createElement("div", {
        className: "".concat(prefixCls, "__container")
      }, content || /*#__PURE__*/_react.default.createElement(_activityIndicator.default, {
        type: "spinner",
        size: "lg"
      }))));
    }
  }]);
  return Loading;
}(_react.PureComponent);

exports.default = Loading;
Loading.defaultProps = {
  prefixCls: 'za-loading',
  mask: true
};
Loading.zarmLoading = void 0;
Loading.loadingContainer = void 0;
Loading.hideHelper = void 0;

Loading.show = function (content) {
  Loading.unmountNode(); // TODO: after calling .unmountNode(), Loading.zarmLoading is null. Is this check necessary?

  if (!Loading.zarmLoading) {
    Loading.zarmLoading = document.createElement('div');
    Loading.zarmLoading.classList.add('za-loading-container');

    if (content && content.className) {
      Loading.zarmLoading.classList.add(content.className);
    }

    Loading.loadingContainer = content && content.mountContainer ? (0, _dom.getMountContainer)(content.mountContainer) : (0, _dom.getMountContainer)();
    Loading.loadingContainer.appendChild(Loading.zarmLoading);
  }

  var props = _objectSpread(_objectSpread(_objectSpread({}, Loading.defaultProps), content), {
    visible: true,
    mountContainer: false
  });

  Loading.hideHelper = function () {
    _reactDom.default.render( /*#__PURE__*/_react.default.createElement(Loading, (0, _extends2.default)({}, props, {
      visible: false
    })), Loading.zarmLoading);
  };

  _reactDom.default.render( /*#__PURE__*/_react.default.createElement(Loading, props), Loading.zarmLoading);
};

Loading.hide = function () {
  if (Loading.zarmLoading) {
    Loading.hideHelper();
  }
};

Loading.unmountNode = function () {
  var zarmLoading = Loading.zarmLoading;

  if (zarmLoading) {
    _reactDom.default.render( /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null), zarmLoading);

    Loading.loadingContainer.removeChild(zarmLoading);
    Loading.zarmLoading = null;
  }
};