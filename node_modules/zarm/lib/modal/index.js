"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _reactDom = _interopRequireDefault(require("react-dom"));

var _Modal = _interopRequireDefault(require("./Modal"));

var _Alert = _interopRequireDefault(require("../alert/Alert"));

var _Confirm = _interopRequireDefault(require("../confirm/Confirm"));

var _ConfigProvider = require("../config-provider/ConfigProvider");

var _dom = require("../utils/dom");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function modalType(props, type) {
  var _props$className = props.className,
      className = _props$className === void 0 ? '' : _props$className,
      mountContainer = props.mountContainer;
  var container = document.createElement('div');
  container.className += "za-".concat(type, "-container ").concat(className);
  var mountNode = (0, _dom.getMountContainer)(mountContainer);
  mountNode.appendChild(container);

  var resolveFn = function resolveFn(result) {
    return result;
  };

  var onCancel = props.onCancel,
      onOk = props.onOk;

  function _onCancel(renderFn) {
    if (!onCancel) {
      renderFn(false);
      resolveFn(false);
      return;
    }

    var cancelResult = onCancel();

    if (cancelResult instanceof Promise) {
      cancelResult.then(function (res) {
        if (res === false) {
          return;
        }

        renderFn(false);
        resolveFn(true);
      });
    } else {
      if (cancelResult === false) {
        return;
      }

      renderFn(false);
      resolveFn(true);
    }
  }

  function _onOk(renderFn) {
    if (!onOk) {
      renderFn(false);
      resolveFn(true);
      return;
    }

    var okResult = onOk();

    if (okResult instanceof Promise) {
      okResult.then(function (res) {
        if (res === false) {
          return;
        }

        renderFn(false);
        resolveFn(true);
      });
    } else {
      if (okResult === false) {
        return;
      }

      renderFn(false);
      resolveFn(true);
    }
  }

  function _afterClose() {
    if (mountNode) {
      mountNode.removeChild(container);

      _reactDom.default.unmountComponentAtNode(container);
    }
  }

  function render(visible) {
    var runTimeLocale = (0, _ConfigProvider.getRunTimeLocale)();

    if (type === 'alert') {
      var _props = props;

      if (runTimeLocale && runTimeLocale.Alert) {
        _props = _objectSpread(_objectSpread({}, props), {}, {
          className: '',
          locale: runTimeLocale.Alert
        });
      }

      _reactDom.default.render( /*#__PURE__*/_react.default.createElement(_Alert.default, (0, _extends2.default)({}, _props, {
        mountContainer: false,
        onCancel: function onCancel() {
          _onCancel(render);
        },
        afterClose: _afterClose,
        visible: visible
      })), container);
    } else {
      var _props2 = props;

      if (runTimeLocale && runTimeLocale.Confirm) {
        _props2 = _objectSpread(_objectSpread({}, props), {}, {
          className: '',
          locale: runTimeLocale.Confirm
        });
      }

      _reactDom.default.render( /*#__PURE__*/_react.default.createElement(_Confirm.default, (0, _extends2.default)({}, _props2, {
        mountContainer: false,
        onCancel: function onCancel() {
          _onCancel(render);
        },
        onOk: function onOk() {
          _onOk(render);
        },
        afterClose: _afterClose,
        visible: visible
      })), container);
    }
  }

  var returnResult = new Promise(function (resolve) {
    resolveFn = resolve;
    render(true);
  });
  return {
    hide: function hide() {
      render(false);
      resolveFn(true);
    },
    then: function then(resolve) {
      return returnResult.then(function (res) {
        resolve(res);
      });
    },
    catch: function _catch(_resolve, reject) {
      return returnResult.catch(function (res) {
        reject(res);
      });
    }
  };
}

_Modal.default.alert = function alert(props) {
  return modalType(props, 'alert');
};

_Modal.default.confirm = function confirm(props) {
  return modalType(props, 'confirm');
};

var _default = _Modal.default;
exports.default = _default;