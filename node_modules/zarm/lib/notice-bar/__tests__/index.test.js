"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _react = _interopRequireDefault(require("react"));

var _enzyme = require("enzyme");

var _enzymeToJson = _interopRequireDefault(require("enzyme-to-json"));

var _utils = require("ts-jest/utils");

var _icons = require("@zarm-design/icons");

var _index = _interopRequireDefault(require("../index"));

var _keyframes = require("../../utils/keyframes");

var _utils2 = require("../../../tests/utils");

var _message = _interopRequireDefault(require("../../message"));

/* eslint-disable dot-notation */
jest.mock('../../utils/keyframes');
var mAddKeyframe = (0, _utils.mocked)(_keyframes.addKeyframe);
var mRemoveKeyframe = (0, _utils.mocked)(_keyframes.removeKeyframe);
var mExistKeyframe = (0, _utils.mocked)(_keyframes.existKeyframe);
describe('NoticeBar', function () {
  describe('snapshot', function () {
    it('renders correctly', function () {
      jest.useFakeTimers();
      var wrapper = (0, _enzyme.mount)( /*#__PURE__*/_react.default.createElement(_index.default, null, "foo"));
      jest.runTimersToTime(3000);
      expect((0, _enzymeToJson.default)(wrapper)).toMatchSnapshot();
      wrapper.unmount();
    });
    it('theme', function () {
      var wrapper = (0, _enzyme.render)( /*#__PURE__*/_react.default.createElement(_index.default, {
        theme: "danger"
      }, "foo"));
      expect((0, _enzymeToJson.default)(wrapper)).toMatchSnapshot();
    });
    it('icon', function () {
      var wrapper = (0, _enzyme.render)( /*#__PURE__*/_react.default.createElement(_index.default, {
        icon: /*#__PURE__*/_react.default.createElement("img", {
          alt: "",
          src: "\\\\static.zhongan.com/website/health/zarm/images/icons/state.png"
        })
      }, "foo"));
      expect((0, _enzymeToJson.default)(wrapper)).toMatchSnapshot();
    });
  });
  describe('behaviour', function () {
    afterEach(function () {
      jest.restoreAllMocks();
      jest.clearAllMocks();
    });
    it('should render message component', function () {
      jest.spyOn(_index.default.prototype, 'updateScrolling').mockImplementation();
      var wrapper = (0, _enzyme.shallow)( /*#__PURE__*/_react.default.createElement(_index.default, null));
      var messageWrapper = wrapper.find(_message.default);
      expect(messageWrapper.exists()).toBeTruthy();
      expect(messageWrapper.props()).toEqual(expect.objectContaining({
        size: 'lg',
        theme: 'warning',
        icon: /*#__PURE__*/_react.default.createElement(_icons.Volume, null),
        hasArrow: false,
        closable: false,
        speed: 50,
        delay: 2000
      }));
    });
    it('should create ref', function () {
      var wrapper = (0, _enzyme.mount)( /*#__PURE__*/_react.default.createElement(_index.default, null));
      expect(wrapper.instance()['wrapper']).toBeTruthy();
      expect(wrapper.instance()['content']).toBeTruthy();
    });
    it('should add keyframe when component mount', function () {
      var keyframeContent;
      mAddKeyframe.mockImplementationOnce(function (_, content) {
        keyframeContent = content;
      });
      mExistKeyframe.mockReturnValueOnce(false);
      (0, _utils2.mockRefReturnValueOnce)(_index.default, 'wrapper', 'getBoundingClientRect', {
        width: 50
      });
      (0, _utils2.mockRefReturnValueOnce)(_index.default, 'content', 'getBoundingClientRect', {
        width: 100
      });
      var wrapper = (0, _enzyme.mount)( /*#__PURE__*/_react.default.createElement(_index.default, null));
      expect(mExistKeyframe).toBeCalledWith('za-notice-bar-scrolling');
      expect(mAddKeyframe).toBeCalledWith('za-notice-bar-scrolling', keyframeContent);
      expect(wrapper.state('animationDuration')).toEqual(6000);
      expect(wrapper.find('.za-notice-bar__body').prop('style')).toEqual({
        WebkitAnimation: 'za-notice-bar-scrolling 6000ms linear infinite',
        animation: "za-notice-bar-scrolling 6000ms linear infinite"
      });
    });
    it('should remove existed keyframe', function () {
      var keyframeContent;
      mExistKeyframe.mockReturnValueOnce(true);
      mAddKeyframe.mockImplementationOnce(function (_, content) {
        keyframeContent = content;
      });
      (0, _utils2.mockRefReturnValueOnce)(_index.default, 'wrapper', 'getBoundingClientRect', {
        width: 50
      });
      (0, _utils2.mockRefReturnValueOnce)(_index.default, 'content', 'getBoundingClientRect', {
        width: 100
      });
      var wrapper = (0, _enzyme.mount)( /*#__PURE__*/_react.default.createElement(_index.default, null));
      expect(mExistKeyframe).toBeCalledWith('za-notice-bar-scrolling');
      expect(mRemoveKeyframe).toBeCalledWith('za-notice-bar-scrolling');
      expect(mAddKeyframe).toBeCalledWith('za-notice-bar-scrolling', keyframeContent);
      expect(wrapper.state('animationDuration')).toEqual(6000);
      expect(wrapper.find('.za-notice-bar__body').prop('style')).toEqual({
        WebkitAnimation: 'za-notice-bar-scrolling 6000ms linear infinite',
        animation: "za-notice-bar-scrolling 6000ms linear infinite"
      });
    });
    it('should not update scroll if offset width less than wrap width', function () {
      (0, _utils2.mockRefReturnValueOnce)(_index.default, 'wrapper', 'getBoundingClientRect', {
        width: 0
      });
      (0, _utils2.mockRefReturnValueOnce)(_index.default, 'content', 'getBoundingClientRect', {
        width: 0
      });
      var wrapper = (0, _enzyme.mount)( /*#__PURE__*/_react.default.createElement(_index.default, null));
      expect(mExistKeyframe).not.toBeCalled();
      expect(mRemoveKeyframe).not.toBeCalled();
      expect(mAddKeyframe).not.toBeCalled();
      expect(wrapper.state('animationDuration')).toEqual(0);
      expect(wrapper.find('.za-notice-bar__body').prop('style')).toBeUndefined();
    });
    it('should update scrolling when component did mount', function () {
      var updateScrollingSpy = jest.spyOn(_index.default.prototype, 'updateScrolling').mockImplementation();
      (0, _enzyme.mount)( /*#__PURE__*/_react.default.createElement(_index.default, null));
      expect(updateScrollingSpy).toBeCalledTimes(1);
    });
    it('should update scrolling when component did update', function () {
      var updateScrollingSpy = jest.spyOn(_index.default.prototype, 'updateScrolling').mockImplementation();
      var wrapper = (0, _enzyme.mount)( /*#__PURE__*/_react.default.createElement(_index.default, null));
      wrapper.setState({
        animationDuration: 100
      });
      expect(updateScrollingSpy).toBeCalledTimes(2);
    });
  });
});