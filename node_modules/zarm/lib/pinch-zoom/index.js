"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _react = _interopRequireWildcard(require("react"));

var _events = _interopRequireDefault(require("../utils/events"));

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function getDistance(a, b) {
  if (!b) return 0;
  return Math.sqrt(Math.pow(b.clientX - a.clientX, 2) + Math.pow(b.clientY - a.clientY, 2));
}

function range(num, min, max) {
  return Math.min(Math.max(num, min), max);
}

var PinchZoom = /*#__PURE__*/function (_Component) {
  (0, _inherits2.default)(PinchZoom, _Component);

  var _super = _createSuper(PinchZoom);

  function PinchZoom(props) {
    var _this;

    (0, _classCallCheck2.default)(this, PinchZoom);
    _this = _super.call(this, props);
    _this._container = void 0;
    _this.startTouchX = 0;
    _this.startTouchY = 0;
    _this.moveX = 0;
    _this.moveY = 0;
    _this.startMoveX = 0;
    _this.startMoveY = 0;
    _this.deltaX = 0;
    _this.deltaY = 0;
    _this.moving = false;
    _this.zooming = false;
    _this.scale = 1;
    _this.startScale = void 0;
    _this.prevDistance = 0;
    _this.originHeight = void 0;
    _this.originWidth = void 0;

    _this.getMaxMoveX = function () {
      if (_this.originWidth) {
        return Math.max(0, (_this.scale * _this.originWidth - window.innerWidth) / 2);
      }

      return 0;
    };

    _this.touchstart = function (event) {
      var touches = event.touches;
      _this.startTouchX = touches[0].clientX;
      _this.startTouchY = touches[0].clientY;
      _this.startMoveX = _this.moveX;
      _this.startMoveY = _this.moveY;
      _this.moving = touches.length === 1 && _this.scale !== 1;
      _this.zooming = touches.length === 2;

      if (_this.zooming) {
        _this.startScale = _this.scale;
        _this.prevDistance = getDistance(touches[0], touches[1]);
      }
    };

    _this.updateTransform = function (scale, x, y) {
      var moveX = scale > 1 ? x : 0;
      var moveY = scale > 1 ? y : 0;

      _this._container.current.style.setProperty('--x', "".concat(moveX, "px"));

      _this._container.current.style.setProperty('--y', "".concat(moveY, "px"));

      _this._container.current.style.setProperty('--scale', scale);
    };

    _this.touchmove = function (event) {
      var touches = event.touches;
      _this.deltaX = touches[0].clientX - _this.startTouchX;
      _this.deltaY = touches[0].clientY - _this.startTouchY;

      if (_this.moving) {
        var moveX = _this.deltaX + _this.startMoveX;
        var moveY = _this.deltaY + _this.startMoveY;

        var maxMoveX = _this.getMaxMoveX();

        var maxMoveY = _this.getMaxMoveY();

        _this.moveX = range(moveX, -maxMoveX, maxMoveX);
        _this.moveY = range(moveY, -maxMoveY, maxMoveY);
      }

      var _this$props = _this.props,
          minScale = _this$props.minScale,
          maxScale = _this$props.maxScale,
          onChange = _this$props.onChange;

      if (_this.zooming && touches.length === 2) {
        var distance = getDistance(touches[0], touches[1]);
        var scale = _this.startScale * distance / _this.prevDistance;
        _this.scale = range(minScale, scale, maxScale);
      }

      _this.updateTransform(_this.scale, _this.moveX, _this.moveY);

      if (typeof onChange === 'function') {
        onChange({
          scale: _this.scale,
          x: _this.moveX,
          y: _this.moveY
        });
      }

      if (_this.moving || _this.zooming) {
        event.preventDefault();
        event.stopPropagation();
      }
    };

    _this.touchEnd = function (event) {
      var stopPropagation = false;

      if (_this.moving || _this.zooming) {
        stopPropagation = true;

        if (_this.moving && _this.startMoveX === _this.moveX && _this.startMoveY === _this.moveY) {
          stopPropagation = false;
        }

        if (!event.touches.length) {
          if (_this.zooming) {
            _this.moveX = range(_this.moveX, -_this.getMaxMoveX(), _this.getMaxMoveX());
            _this.moveY = range(_this.moveY, -_this.getMaxMoveY(), _this.getMaxMoveY());
            _this.zooming = false;

            _this.updateTransform(_this.scale, _this.moveX, _this.moveY);
          }

          _this.moving = false;
          _this.startTouchX = 0;
          _this.startTouchY = 0;
          _this.startScale = 1;
        }
      }

      if (stopPropagation) {
        event.preventDefault();
        event.stopPropagation();
      }
    };

    _this.onload = function (event) {
      var windowWidth = window.innerWidth;
      var windowHeight = window.innerHeight;
      var _event$target = event.target,
          naturalWidth = _event$target.naturalWidth,
          naturalHeight = _event$target.naturalHeight;
      var windowRatio = windowHeight / windowWidth;
      var imageRatio = naturalHeight / naturalWidth;
      var vertical = imageRatio > windowRatio;

      if (vertical) {
        _this.originWidth = windowHeight / imageRatio;
        _this.originHeight = windowHeight;
      } else {
        _this.originWidth = windowWidth;
        _this.originHeight = windowWidth * imageRatio;
      }
    };

    _this._container = /*#__PURE__*/_react.default.createRef();
    return _this;
  }

  (0, _createClass2.default)(PinchZoom, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      _events.default.on(this._container.current, 'touchstart', this.touchstart);

      _events.default.on(document.documentElement, 'touchmove', this.touchmove);

      _events.default.on(document.documentElement, 'touchend', this.touchEnd);

      _events.default.on(document.documentElement, 'touchcancel', this.touchEnd);
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      _events.default.off(this._container.current, 'touchstart', this.touchstart);

      _events.default.off(document.documentElement, 'touchmove', this.touchmove);

      _events.default.off(document.documentElement, 'touchend', this.touchEnd);

      _events.default.off(document.documentElement, 'touchcancel', this.touchEnd);
    }
  }, {
    key: "getMaxMoveY",
    value: function getMaxMoveY() {
      if (this.originHeight) {
        return Math.max(0, (this.scale * this.originHeight - window.innerHeight) / 2);
      }

      return 0;
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props2 = this.props,
          children = _this$props2.children,
          className = _this$props2.className,
          prefixCls = _this$props2.prefixCls;

      var child = _react.default.Children.map(children, function (element, index) {
        return /*#__PURE__*/_react.default.cloneElement(element, {
          key: +index,
          onLoad: _this2.onload
        });
      });

      return /*#__PURE__*/_react.default.createElement("div", {
        ref: this._container,
        className: "".concat(className, " ").concat(prefixCls)
      }, child);
    }
  }]);
  return PinchZoom;
}(_react.Component);

exports.default = PinchZoom;
PinchZoom.defaultProps = {
  prefixCls: 'za-pinch-zoom',
  minScale: 1,
  maxScale: 3
};