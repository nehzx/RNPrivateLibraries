"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _react = _interopRequireWildcard(require("react"));

var _Portal = _interopRequireDefault(require("./Portal"));

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var Popup = /*#__PURE__*/function (_PureComponent) {
  (0, _inherits2.default)(Popup, _PureComponent);

  var _super = _createSuper(Popup);

  function Popup(props) {
    var _this;

    (0, _classCallCheck2.default)(this, Popup);
    _this = _super.call(this, props);
    _this.portalRef = void 0;
    _this.state = {
      renderPortal: false,
      portalVisible: false
    };
    _this.handlePortalUnmount = _this.handlePortalUnmount.bind((0, _assertThisInitialized2.default)(_this));
    return _this;
  }

  (0, _createClass2.default)(Popup, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var visible = this.props.visible;

      if (visible) {
        this.setState({
          renderPortal: true,
          portalVisible: true
        });
      }
    }
  }, {
    key: "handlePortalUnmount",
    value: function handlePortalUnmount() {
      var destroy = this.props.destroy;

      if (destroy) {
        this.setState({
          renderPortal: false
        });
      } else {
        this.setState({
          renderPortal: true,
          portalVisible: false
        });
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$state = this.state,
          renderPortal = _this$state.renderPortal,
          portalVisible = _this$state.portalVisible;
      return renderPortal && /*#__PURE__*/_react.default.createElement(_Portal.default, (0, _extends2.default)({
        ref: function ref(_ref) {
          _this2.portalRef = _ref;
        }
      }, this.props, {
        visible: portalVisible,
        handlePortalUnmount: this.handlePortalUnmount
      }));
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(props, state) {
      if (props.visible !== state.portalVisible) {
        if (props.visible) {
          return {
            renderPortal: true,
            portalVisible: true
          };
        }

        return {
          portalVisible: false
        };
      }

      return null;
    }
  }]);
  return Popup;
}(_react.PureComponent);

exports.default = Popup;
Popup.defaultProps = {
  prefixCls: 'za-popup',
  destroy: true,
  visible: false
};