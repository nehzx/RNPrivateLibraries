"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _react = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _index = _interopRequireDefault(require("./style/index.native"));

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var popupStyles = _reactNative.StyleSheet.create(_index.default);

var Popup = /*#__PURE__*/function (_PureComponent) {
  (0, _inherits2.default)(Popup, _PureComponent);

  var _super = _createSuper(Popup);

  function Popup(props) {
    var _this;

    (0, _classCallCheck2.default)(this, Popup);
    _this = _super.call(this, props);

    _this.enter = function () {
      var _this$props = _this.props,
          _this$props$direction = _this$props.direction,
          direction = _this$props$direction === void 0 ? 'top' : _this$props$direction,
          animationDuration = _this$props.animationDuration;
      var transfromStyle = {};
      var newValue;

      if (direction === 'bottom') {
        transfromStyle = {
          transform: [{
            translateY: _this.state.translateValue
          }]
        };
        newValue = _this.state.directionStyle[direction];
      } else if (direction === 'top') {
        transfromStyle = {
          transform: [{
            translateY: _this.state.translateValue
          }]
        };
        newValue = -_this.state.directionStyle[direction];
      } else if (direction === 'left') {
        transfromStyle = {
          transform: [{
            translateX: _this.state.translateValue
          }]
        };
        newValue = -_this.state.directionStyle[direction];
      } else if (direction === 'right') {
        transfromStyle = {
          transform: [{
            translateX: _this.state.translateValue
          }]
        };
        newValue = _this.state.directionStyle[direction];
      }

      _this.setState({
        // isMaskShow: true,
        isPending: true,
        animationState: 'enter',
        transfromStyle: transfromStyle
      });

      _reactNative.Animated.timing(_this.state.translateValue, {
        toValue: newValue,
        duration: animationDuration,
        easing: _reactNative.Easing.linear,
        useNativeDriver: true
      }).start(); // if (stayTime > 0 && autoClose) {
      //   this.timer = setTimeout(() => {
      //     onMaskClick();
      //     clearTimeout(this.timer);
      //   }, stayTime);
      // }

    };

    _this.leave = function () {
      var animationDuration = _this.props.animationDuration;

      _this.setState({
        animationState: 'leave' // isPending: false,
        // isMaskShow: visible || false,

      });

      _reactNative.Animated.timing(_this.state.translateValue, {
        toValue: 0,
        duration: animationDuration,
        easing: _reactNative.Easing.linear,
        useNativeDriver: true
      }).start();
    };

    _this.animationEnd = function (value) {
      var afterClose = _this.props.afterClose;

      if (_this.state.animationState === 'leave' && value.value === 0 && _this.state.isPending) {
        _this.setState({
          isPending: false
        });

        if (typeof afterClose === 'function') {
          afterClose();
        }
      }
    };

    _this.renderMask = function () {
      return null; // const { mask, maskType, onMaskClick, styles, direction } = this.props;
      // const { isMaskShow } = this.state;
      // const maskStyle = [
      //   styles![`${direction}Mask`],
      // ];
      // return mask && (
      //     <Mask
      //       visible={isMaskShow}
      //       type={maskType}
      //       onClose={onMaskClick}
      //       style={maskStyle}
      //     />
      //   );
    };

    _this.onLayout = function (e, direction, that) {
      var directionStyle = {};

      _reactNative.UIManager.measure(e.target, function (_x, _y, width, height) {
        if (direction === 'bottom' || direction === 'top') {
          directionStyle[direction] = -height;
        } else {
          directionStyle[direction] = -width;
        }

        that.setState({
          directionStyle: directionStyle
        });

        if (that.state.isShow) {
          that.enter();
          that.setState({
            isShow: false
          });
        }
      });
    };

    _this.state = {
      // isMaskShow: props.visible || false,
      isPending: false,
      // isShow: false,
      animationState: 'enter',
      directionStyle: {},
      transfromStyle: {},
      translateValue: new _reactNative.Animated.Value(0)
    };
    return _this;
  }

  (0, _createClass2.default)(Popup, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this2 = this;

      var translateValue = this.state.translateValue; // const { visible } = this.props;

      translateValue.addListener(function (value) {
        _this2.animationEnd(value);
      }); // if (visible) {
      //   this.enter(this.props);
      //   this.setState({
      //     isShow: true,
      //   });
      // }
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(nextProps) {
      var props = this.props;

      if (nextProps.visible !== props.visible) {
        if (props.visible) {
          this.enter();
        } else {
          this.leave();
        }
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      var translateValue = this.state.translateValue;
      translateValue.removeAllListeners();
    }
  }, {
    key: "render",
    value: function render() {
      var _this3 = this;

      var _this$props2 = this.props,
          direction = _this$props2.direction,
          styles = _this$props2.styles,
          children = _this$props2.children,
          style = _this$props2.style;
      var _this$state = this.state,
          directionStyle = _this$state.directionStyle,
          transfromStyle = _this$state.transfromStyle;
      var popupCls = [styles.wrapperStyle, styles["".concat(direction, "Wrapper")], style];
      var invisibleStyle = [styles.invisibleWrapper, styles["".concat(direction, "Invisible")]];
      var popUpStyle = [popupCls, directionStyle, transfromStyle];
      return /*#__PURE__*/_react.default.createElement(_reactNative.View, {
        style: invisibleStyle
      }, /*#__PURE__*/_react.default.createElement(_reactNative.Animated.View, {
        style: popUpStyle,
        onLayout: function onLayout(e) {
          return _this3.onLayout(e, direction, _this3);
        }
      }, children), this.renderMask());
    }
  }]);
  return Popup;
}(_react.PureComponent);

exports.default = Popup;
Popup.defaultProps = {
  visible: false,
  mask: true,
  direction: 'bottom',
  stayTime: 3000,
  animationDuration: 200,
  destroy: true,
  styles: popupStyles
};