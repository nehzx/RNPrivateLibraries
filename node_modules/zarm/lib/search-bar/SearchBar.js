"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _react = _interopRequireWildcard(require("react"));

var _classnames2 = _interopRequireDefault(require("classnames"));

var _icons = require("@zarm-design/icons");

var _InputBase = _interopRequireDefault(require("../input/InputBase"));

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var SearchBar = /*#__PURE__*/function (_PureComponent) {
  (0, _inherits2.default)(SearchBar, _PureComponent);

  var _super = _createSuper(SearchBar);

  function SearchBar(props) {
    var _this;

    (0, _classCallCheck2.default)(this, SearchBar);
    _this = _super.call(this, props);
    _this.cancelRef = null;
    _this.cancelOuterWidth = void 0;
    _this.inputRef = null;
    _this.state = {
      focus: false,
      value: props.defaultValue || props.value || '',
      isOnComposition: false
    };
    return _this;
  }

  (0, _createClass2.default)(SearchBar, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.calculatePositon(this.props);
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      var _this$props = this.props,
          cancelText = _this$props.cancelText,
          showCancel = _this$props.showCancel,
          locale = _this$props.locale; // 若改变了取消文字的内容或者placeholder的内容需要重新计算位置

      if (cancelText !== prevProps.cancelText || showCancel !== prevProps.showCancel || locale && prevProps.locale && locale.cancelText !== prevProps.locale.cancelText) {
        this.calculatePositon(this.props);
      }
    }
  }, {
    key: "onFocus",
    value: function onFocus() {
      var onFocus = this.props.onFocus;
      this.setState({
        focus: true
      });
      this.focusAnim();
      onFocus && onFocus();
    }
  }, {
    key: "onChange",
    value: function onChange(value) {
      var onChange = this.props.onChange;
      var isOnComposition = this.state.isOnComposition;
      this.setState({
        value: value
      });

      if (!isOnComposition && onChange) {
        onChange(value);
      }
    }
  }, {
    key: "onBlur",
    value: function onBlur() {
      var _this2 = this;

      var onBlur = this.props.onBlur;
      var _this$state = this.state,
          value = _this$state.value,
          focus = _this$state.focus;
      this.setState({
        focus: false
      }, function () {
        !value && _this2.blurAnim();
        focus && onBlur && onBlur();
      });
    }
  }, {
    key: "onClear",
    value: function onClear() {
      var _this3 = this;

      var _this$props2 = this.props,
          onClear = _this$props2.onClear,
          onChange = _this$props2.onChange;
      this.setState({
        value: '',
        isOnComposition: false
      }, function () {
        _this3.focus();
      });
      onClear && onClear('');
      onChange && onChange('');
    }
  }, {
    key: "onCancel",
    value: function onCancel() {
      var _this4 = this;

      var onCancel = this.props.onCancel;
      this.setState({
        value: '',
        isOnComposition: false
      }, function () {
        _this4.onBlur();
      });
      onCancel && onCancel();
    }
  }, {
    key: "onSubmit",
    value: function onSubmit(e) {
      var onSubmit = this.props.onSubmit;
      var value = this.state.value;
      e.preventDefault();
      this.inputRef && this.inputRef.blur();
      onSubmit && onSubmit(value);
    }
  }, {
    key: "handleComposition",
    value: function handleComposition(e) {
      if (e.type === 'compositionstart') {
        this.setState({
          isOnComposition: true
        });
      }

      if (e.type === 'compositionend') {
        // composition is end
        this.setState({
          isOnComposition: false
        });
        var onChange = this.props.onChange;
        var target = e.target;
        var _ref = target,
            value = _ref.value;
        onChange && onChange(value);
      }
    } // 初始化搜索提示文字的位置

  }, {
    key: "calculatePositon",
    value: function calculatePositon(props) {
      if (!this.cancelRef) return;
      var showCancel = props.showCancel;
      var value = this.state.value;

      if (!showCancel) {
        var ml = parseInt(window.getComputedStyle(this.cancelRef, '')['margin-left'].split('px')[0], 10);
        this.cancelOuterWidth = Math.ceil(ml + this.cancelRef.getBoundingClientRect().width);
        this.cancelRef.style.cssText = "margin-right: -".concat(this.cancelOuterWidth, "px;");
      } else {
        this.cancelRef.style.cssText = 'margin-right: 0px;';
      }

      if (value) {
        this.focusAnim();
      }
    }
  }, {
    key: "focusAnim",
    value: function focusAnim() {
      if (!this.cancelRef) return;
      this.cancelRef.style.cssText = 'margin-right: 0px;';
      this.cancelRef.className += ' animation-ease';
    }
  }, {
    key: "blurAnim",
    value: function blurAnim() {
      var showCancel = this.props.showCancel;

      if (!showCancel && this.cancelRef) {
        this.cancelRef.style.cssText = "margin-right: -".concat(this.cancelOuterWidth, "px;");
      }
    }
  }, {
    key: "focus",
    value: function focus() {
      this.inputRef && this.inputRef.focus();
    }
  }, {
    key: "renderCancel",
    value: function renderCancel() {
      var _this5 = this;

      var _this$props3 = this.props,
          prefixCls = _this$props3.prefixCls,
          cancelText = _this$props3.cancelText,
          locale = _this$props3.locale;
      return /*#__PURE__*/_react.default.createElement("div", {
        className: "".concat(prefixCls, "__cancel"),
        ref: function ref(cancelRef) {
          _this5.cancelRef = cancelRef;
        },
        onClick: function onClick() {
          _this5.onCancel();
        }
      }, cancelText || locale && locale.cancelText);
    }
  }, {
    key: "render",
    value: function render() {
      var _classnames,
          _this6 = this;

      var _this$props4 = this.props,
          prefixCls = _this$props4.prefixCls,
          className = _this$props4.className,
          shape = _this$props4.shape,
          placeholder = _this$props4.placeholder,
          disabled = _this$props4.disabled,
          clearable = _this$props4.clearable,
          showCancel = _this$props4.showCancel,
          maxLength = _this$props4.maxLength,
          locale = _this$props4.locale;
      var _this$state2 = this.state,
          value = _this$state2.value,
          focus = _this$state2.focus;
      var cls = (0, _classnames2.default)(prefixCls, className, (_classnames = {}, (0, _defineProperty2.default)(_classnames, "".concat(prefixCls, "--").concat(shape), !!shape), (0, _defineProperty2.default)(_classnames, "".concat(prefixCls, "--focus"), !!(showCancel || focus || value && value.length > 0)), _classnames));
      return /*#__PURE__*/_react.default.createElement("div", {
        className: cls
      }, /*#__PURE__*/_react.default.createElement("form", {
        action: "#",
        className: "".concat(prefixCls, "__form"),
        onSubmit: function onSubmit(e) {
          _this6.onSubmit(e);
        }
      }, /*#__PURE__*/_react.default.createElement("div", {
        className: "".concat(prefixCls, "__content")
      }, /*#__PURE__*/_react.default.createElement(_icons.Search, {
        size: "sm",
        className: "".concat(prefixCls, "__icon")
      }), /*#__PURE__*/_react.default.createElement("div", {
        className: "".concat(prefixCls, "__mock")
      }, /*#__PURE__*/_react.default.createElement(_InputBase.default, {
        className: "".concat(prefixCls, "__input"),
        type: "search",
        placeholder: placeholder || locale && locale.placeholder,
        value: value,
        maxLength: maxLength,
        onFocus: function onFocus() {
          _this6.onFocus();
        },
        onCompositionStart: function onCompositionStart(e) {
          _this6.handleComposition(e);
        },
        onCompositionUpdate: function onCompositionUpdate(e) {
          _this6.handleComposition(e);
        },
        onCompositionEnd: function onCompositionEnd(e) {
          _this6.handleComposition(e);
        },
        onChange: function onChange(val) {
          _this6.onChange(val);
        },
        onBlur: function onBlur() {
          _this6.onBlur();
        },
        onClear: function onClear() {
          _this6.onClear();
        },
        disabled: disabled,
        clearable: clearable,
        ref: function ref(inputRef) {
          _this6.inputRef = inputRef;
        }
      }))), this.renderCancel()));
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(nextProps, state) {
      if ('value' in nextProps && nextProps.value !== state.preValue) {
        return {
          value: nextProps.value,
          preValue: nextProps.value
        };
      }

      return null;
    }
  }]);
  return SearchBar;
}(_react.PureComponent);

exports.default = SearchBar;
SearchBar.defaultProps = {
  prefixCls: 'za-search-bar',
  shape: 'radius',
  disabled: false,
  showCancel: false,
  clearable: true
};