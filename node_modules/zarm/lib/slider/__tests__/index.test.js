"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _react = _interopRequireDefault(require("react"));

var _enzyme = require("enzyme");

var _enzymeToJson = _interopRequireDefault(require("enzyme-to-json"));

/* eslint-disable @typescript-eslint/no-var-requires */

/* eslint-disable dot-notation */
function mockLineRef(componentClass, prop, value) {
  var lineRefKey = Symbol('line');
  Object.defineProperty(componentClass.prototype, 'line', {
    get: function get() {
      return this[lineRefKey];
    },
    set: function set(ref) {
      if (ref) {
        Object.defineProperty(ref, prop, {
          value: value,
          configurable: true
        });
        this[lineRefKey] = ref;
      }

      this[lineRefKey] = ref;
    },
    configurable: true
  });
}

describe('Slider', function () {
  var marks = {
    0: '0',
    26: '26',
    60: '60',
    100: '100'
  };
  var Slider;
  var Events;
  var ToolTip;
  beforeEach(function () {
    jest.resetModules();
    Slider = require('../index').default;
    Events = require('../../utils/events').default;
    ToolTip = require('../../tooltip').default;
  });
  afterEach(function () {
    jest.restoreAllMocks();
  });
  describe('snapshot', function () {
    it('shallows correctly', function () {
      var wrapper = (0, _enzyme.shallow)( /*#__PURE__*/_react.default.createElement(Slider, null));
      expect((0, _enzymeToJson.default)(wrapper)).toMatchSnapshot();
    });
    it('min', function () {
      var wrapper = (0, _enzyme.shallow)( /*#__PURE__*/_react.default.createElement(Slider, {
        min: 0
      }));
      expect((0, _enzymeToJson.default)(wrapper)).toMatchSnapshot();
    });
    it('max', function () {
      var wrapper = (0, _enzyme.shallow)( /*#__PURE__*/_react.default.createElement(Slider, {
        max: 100
      }));
      expect((0, _enzymeToJson.default)(wrapper)).toMatchSnapshot();
    });
    it('step', function () {
      var wrapper = (0, _enzyme.shallow)( /*#__PURE__*/_react.default.createElement(Slider, {
        step: 5
      }));
      expect((0, _enzymeToJson.default)(wrapper)).toMatchSnapshot();
    });
    it('disabled', function () {
      var wrapper = (0, _enzyme.shallow)( /*#__PURE__*/_react.default.createElement(Slider, {
        disabled: true
      }));
      expect((0, _enzymeToJson.default)(wrapper)).toMatchSnapshot();
    });
    it('defaultValue', function () {
      var wrapper = (0, _enzyme.shallow)( /*#__PURE__*/_react.default.createElement(Slider, {
        defaultValue: 10
      }));
      expect((0, _enzymeToJson.default)(wrapper)).toMatchSnapshot();
    });
    it('value', function () {
      var wrapper = (0, _enzyme.shallow)( /*#__PURE__*/_react.default.createElement(Slider, {
        value: 10
      }));
      expect((0, _enzymeToJson.default)(wrapper)).toMatchSnapshot();
    });
    it('showMark', function () {
      var wrapper = (0, _enzyme.shallow)( /*#__PURE__*/_react.default.createElement(Slider, {
        showMark: true,
        marks: marks
      }));
      expect((0, _enzymeToJson.default)(wrapper)).toMatchSnapshot();
    });
    it('marks', function () {
      var wrapper = (0, _enzyme.shallow)( /*#__PURE__*/_react.default.createElement(Slider, {
        marks: marks
      }));
      expect((0, _enzymeToJson.default)(wrapper)).toMatchSnapshot();
    });
    it('marks error', function () {
      var errorLogSpy = jest.spyOn(console, 'error').mockImplementationOnce(function () {
        return 'Suppress';
      });
      var wrapper = (0, _enzyme.shallow)( /*#__PURE__*/_react.default.createElement(Slider, {
        showMark: true
      }));
      expect((0, _enzymeToJson.default)(wrapper)).toMatchSnapshot();
      expect(errorLogSpy).toBeCalledWith('请输入有效的 marks');
    });
    it('vertical', function () {
      var wrapper = (0, _enzyme.shallow)( /*#__PURE__*/_react.default.createElement(Slider, {
        vertical: true
      }));
      expect((0, _enzymeToJson.default)(wrapper)).toMatchSnapshot();
    });
  });
  it('mouse event', function () {
    var onChange = jest.fn();
    var wrapper = (0, _enzyme.mount)( /*#__PURE__*/_react.default.createElement(Slider, {
      onChange: onChange
    })).find('.za-slider__handle');
    wrapper.simulate('mouseDown', {
      clientX: 0,
      clientY: 0
    });
    wrapper.simulate('mouseMove', {
      clientX: 10,
      clientY: 0
    });
    wrapper.simulate('mouseUp', {
      clientX: 30,
      clientY: 0
    });
    expect(onChange).toBeCalled();
  });
  it('vertical mouse event', function () {
    var onChange = jest.fn();
    var wrapper = (0, _enzyme.mount)( /*#__PURE__*/_react.default.createElement(Slider, {
      onChange: onChange,
      step: 5.5,
      vertical: true
    })).find('.za-slider__handle');
    wrapper.simulate('mouseDown', {
      clientX: 0,
      clientY: 0
    });
    wrapper.simulate('mouseMove', {
      clientX: 0,
      clientY: -10
    });
    wrapper.simulate('mouseUp', {
      clientX: 0,
      clientY: -20
    });
    expect(onChange).toBeCalled();
  });
  it('should ', function () {});
  it('should initialize offset start and bind resize event for a horizontal slider', function () {
    var EventsOnSpy = jest.spyOn(Events, 'on');
    mockLineRef(Slider, 'offsetWidth', 30);
    var wrapper = (0, _enzyme.mount)( /*#__PURE__*/_react.default.createElement(Slider, {
      value: 20,
      vertical: false
    }));
    expect(EventsOnSpy).toBeCalledWith(window, 'resize', expect.any(Function));
    expect(wrapper.state('value')).toEqual(20); // maxOffset * ((value - min) / range) => 30 * ((20 - 0) / (100 - 0))

    expect(wrapper.instance()['offsetStart']).toEqual(6);
  });
  it('should initialize offset start and bind resize event for a vertical slider', function () {
    var EventsOnSpy = jest.spyOn(Events, 'on');
    mockLineRef(Slider, 'offsetHeight', 30);
    var wrapper = (0, _enzyme.mount)( /*#__PURE__*/_react.default.createElement(Slider, {
      value: 20,
      vertical: true
    }));
    expect(EventsOnSpy).toBeCalledWith(window, 'resize', expect.any(Function));
    expect(wrapper.state('value')).toEqual(20); // maxOffset * ((max - value) / range) => 30 * ((100 - 20) / (100 - 0))

    expect(wrapper.instance()['offsetStart']).toEqual(24);
  });
  it('should initialize offset start to 0 if line ref does not exist', function () {
    var lineRefKey = Symbol('line');
    Object.defineProperty(Slider.prototype, 'line', {
      get: function get() {
        return this[lineRefKey];
      },
      set: function set() {
        this[lineRefKey] = null;
      },
      configurable: true
    });
    var wrapper = (0, _enzyme.mount)( /*#__PURE__*/_react.default.createElement(Slider, {
      value: 20,
      vertical: true
    }));
    expect(wrapper.state('value')).toEqual(20);
    expect(wrapper.instance()['offsetStart']).toEqual(0);
  });
  it('should bind touchstart event for root element', function () {
    var wrapper = (0, _enzyme.shallow)( /*#__PURE__*/_react.default.createElement(Slider, null));
    var mRef = {
      addEventListener: jest.fn()
    };
    wrapper.getElement()['ref'](mRef);
    expect(mRef.addEventListener).toBeCalledWith('touchstart', expect.any(Function), {
      passive: false
    });
  });
  it('should remove touchstart event for root element', function () {
    var wrapper = (0, _enzyme.shallow)( /*#__PURE__*/_react.default.createElement(Slider, null));
    var mPrevRef = {
      addEventListener: jest.fn(),
      removeEventListener: jest.fn()
    };
    var mNextRef = {
      addEventListener: jest.fn()
    };
    wrapper.getElement()['ref'](mPrevRef);
    wrapper.getElement()['ref'](mNextRef);
    expect(mPrevRef.removeEventListener).toBeCalledWith('touchstart', expect.any(Function));
    expect(mNextRef.addEventListener).toBeCalledWith('touchstart', expect.any(Function), {
      passive: false
    });
  });
  it('should handle drag start event set state.tooltip to true', function () {
    var wrapper = (0, _enzyme.mount)( /*#__PURE__*/_react.default.createElement(Slider, {
      disabled: false
    }));
    expect(wrapper.state('tooltip')).toBeFalsy();
    var mEvent = {};
    wrapper.find('.za-slider__handle').invoke('onTouchStart')(mEvent);
    expect(wrapper.state('tooltip')).toBeTruthy();
  });
  it('should do nothing if slider is disabled when drag start', function () {
    var wrapper = (0, _enzyme.mount)( /*#__PURE__*/_react.default.createElement(Slider, {
      disabled: true
    }));
    expect(wrapper.state('tooltip')).toBeFalsy();
    var mEvent = {};
    wrapper.find('.za-slider__handle').invoke('onTouchStart')(mEvent);
    expect(wrapper.state('tooltip')).toBeFalsy();
  });
  it('should not render mark info if marks is an empty object and props.showMark is true', function () {
    var errorLogSpy = jest.spyOn(console, 'error').mockImplementationOnce(function () {
      return 'Suppress';
    });
    var wrapper = (0, _enzyme.mount)( /*#__PURE__*/_react.default.createElement(Slider, {
      showMark: true,
      marks: {}
    }));
    expect(wrapper.find('.za-slider__marks').exists()).toBeFalsy();
    expect(errorLogSpy).toBeCalledWith('请输入有效的 marks');
  });
  it('should not render mark info if marks is NOT an object and props.showMark is true', function () {
    var errorLogSpy = jest.spyOn(console, 'error').mockImplementationOnce(function () {
      return 'Suppress';
    });
    var wrapper = (0, _enzyme.mount)( /*#__PURE__*/_react.default.createElement(Slider, {
      showMark: true,
      marks: null
    }));
    expect(wrapper.find('.za-slider__marks').exists()).toBeFalsy();
    expect(errorLogSpy).toBeCalledWith('请输入有效的 marks');
  });
  it('should render mark info with custom marks', function () {
    var MARKS = {
      0: '0°C',
      26: '26°C',
      65: '65°C',
      100: '100°C'
    };
    var wrapper = (0, _enzyme.mount)( /*#__PURE__*/_react.default.createElement(Slider, {
      showMark: true,
      marks: MARKS,
      value: 55
    }));
    expect(wrapper.find('.za-slider__mark')).toHaveLength(4);
    expect(wrapper.find('.za-slider__mark').map(function (mark) {
      return mark.text();
    })).toEqual(expect.arrayContaining(['100°C', '0°C', '26°C', '65°C']));
    expect(wrapper.find('.za-slider__mark').map(function (mark) {
      var style = mark.prop('style');
      return style ? style.left : '';
    })).toEqual(expect.arrayContaining(['0%', '26%', '65%', '100%']));
    expect(wrapper.find('.za-slider__line__dot').map(function (dot) {
      return dot.prop('className');
    }).filter(function (className) {
      if (className) {
        return className.includes('za-slider__line__dot--active');
      }

      return false;
    })).toHaveLength(2);
  });
  it('should handle drag end event and set new offset start for a horizontal slider if offset > 0 and offset < maxOffset', function () {
    var updateAllSpy = jest.spyOn(ToolTip, 'updateAll').mockReturnValueOnce(undefined);
    var mOnChange = jest.fn();
    mockLineRef(Slider, 'offsetWidth', 200);
    var wrapper = (0, _enzyme.mount)( /*#__PURE__*/_react.default.createElement(Slider, {
      value: 20,
      vertical: false,
      onChange: mOnChange
    }));
    expect(wrapper.state('tooltip')).toBeFalsy();
    var touchStartEvent = {
      touches: [{
        pageX: 100,
        pageY: 0
      }]
    };
    var sliderHandleWrapper = wrapper.find('.za-slider__handle');
    sliderHandleWrapper.invoke('onTouchStart')(touchStartEvent);
    expect(wrapper.state('tooltip')).toBeTruthy();
    var touchMoveEvent = {
      stopPropagation: jest.fn(),
      preventDefault: jest.fn(),
      touches: [{
        pageX: 200,
        pageY: 0
      }]
    };
    sliderHandleWrapper.invoke('onTouchMove')(touchMoveEvent);
    sliderHandleWrapper.invoke('onTouchEnd')({});
    expect(wrapper.state('tooltip')).toBeFalsy();
    expect(wrapper.instance()['offsetStart']).toEqual(140);
    expect(mOnChange).toBeCalledWith(70);
    expect(touchMoveEvent.stopPropagation).toBeCalledTimes(1); // expect(touchMoveEvent.preventDefault).toBeCalledTimes(1);

    expect(updateAllSpy).toBeCalledTimes(1);
  });
  it('should handle drag end event and set new offset start for a horizontal slider if offset > maxOffset', function () {
    var updateAllSpy = jest.spyOn(ToolTip, 'updateAll').mockReturnValueOnce(undefined);
    var mOnChange = jest.fn();
    mockLineRef(Slider, 'offsetWidth', 20);
    var wrapper = (0, _enzyme.mount)( /*#__PURE__*/_react.default.createElement(Slider, {
      value: 20,
      vertical: false,
      onChange: mOnChange
    }));
    expect(wrapper.state('tooltip')).toBeFalsy();
    var touchStartEvent = {
      touches: [{
        pageX: 100,
        pageY: 0
      }]
    };
    var sliderHandleWrapper = wrapper.find('.za-slider__handle');
    sliderHandleWrapper.invoke('onTouchStart')(touchStartEvent);
    expect(wrapper.state('tooltip')).toBeTruthy();
    var touchMoveEvent = {
      stopPropagation: jest.fn(),
      preventDefault: jest.fn(),
      touches: [{
        pageX: 200,
        pageY: 0
      }]
    };
    sliderHandleWrapper.invoke('onTouchMove')(touchMoveEvent);
    sliderHandleWrapper.invoke('onTouchEnd')({});
    expect(wrapper.state('tooltip')).toBeFalsy();
    expect(mOnChange).toBeCalledWith(100);
    expect(touchMoveEvent.stopPropagation).toBeCalledTimes(1); // expect(touchMoveEvent.preventDefault).toBeCalledTimes(1);

    expect(updateAllSpy).toBeCalledTimes(1);
  });
  it('should handle drag end event and set new offset start for a horizontal slider if offset < 0', function () {
    var mOnChange = jest.fn();
    var wrapper = (0, _enzyme.mount)( /*#__PURE__*/_react.default.createElement(Slider, {
      value: 20,
      vertical: false,
      onChange: mOnChange
    }));
    expect(wrapper.state('tooltip')).toBeFalsy();
    var touchStartEvent = {
      touches: [{
        pageX: 100,
        pageY: 0
      }]
    };
    var sliderHandleWrapper = wrapper.find('.za-slider__handle');
    sliderHandleWrapper.invoke('onTouchStart')(touchStartEvent);
    expect(wrapper.state('tooltip')).toBeTruthy();
    var touchMoveEvent = {
      stopPropagation: jest.fn(),
      preventDefault: jest.fn(),
      touches: [{
        pageX: 0,
        pageY: 0
      }]
    };
    sliderHandleWrapper.invoke('onTouchMove')(touchMoveEvent);
    sliderHandleWrapper.invoke('onTouchEnd')({});
    expect(wrapper.state('tooltip')).toBeFalsy();
    expect(mOnChange).toBeCalledWith(0);
  });
  it('should do nothing if slider is disabled when handle drag start event', function () {
    var mOnChange = jest.fn();
    var wrapper = (0, _enzyme.mount)( /*#__PURE__*/_react.default.createElement(Slider, {
      value: 20,
      vertical: false,
      onChange: mOnChange,
      disabled: true
    }));
    expect(wrapper.state('tooltip')).toBeFalsy();
    var touchStartEvent = {
      touches: [{
        pageX: 100,
        pageY: 0
      }]
    };
    var sliderHandleWrapper = wrapper.find('.za-slider__handle');
    sliderHandleWrapper.invoke('onTouchStart')(touchStartEvent);
    expect(wrapper.state('tooltip')).toBeFalsy();
  });
  it('should do nothing if slider is disabled when handle drag move event', function () {
    var mOnChange = jest.fn();
    var wrapper = (0, _enzyme.mount)( /*#__PURE__*/_react.default.createElement(Slider, {
      value: 20,
      vertical: false,
      onChange: mOnChange,
      disabled: true
    }));
    expect(wrapper.state('tooltip')).toBeFalsy();
    var touchMoveEvent = {
      stopPropagation: jest.fn(),
      preventDefault: jest.fn(),
      touches: [{
        pageX: 0,
        pageY: 0
      }]
    };
    var sliderHandleWrapper = wrapper.find('.za-slider__handle');
    sliderHandleWrapper.invoke('onTouchMove')(touchMoveEvent);
    expect(wrapper.state('tooltip')).toBeFalsy();
    expect(touchMoveEvent.stopPropagation).not.toBeCalled();
    expect(touchMoveEvent.preventDefault).not.toBeCalled();
  });
});