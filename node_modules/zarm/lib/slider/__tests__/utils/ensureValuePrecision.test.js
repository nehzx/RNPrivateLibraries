"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _utils = require("ts-jest/utils");

var _ensureValuePrecision = _interopRequireDefault(require("../../utils/ensureValuePrecision"));

var _getClosestPoint = _interopRequireDefault(require("../../utils/getClosestPoint"));

var _getPrecision = _interopRequireDefault(require("../../utils/getPrecision"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

jest.mock('../../utils/getClosestPoint');
jest.mock('../../utils/getPrecision');
var mGetClosestPoint = (0, _utils.mocked)(_getClosestPoint.default);
var mGetPrecision = (0, _utils.mocked)(_getPrecision.default);
describe('ensureValuePrecision', function () {
  var baseProps = {
    min: 0,
    max: 100,
    marks: ''
  };
  afterEach(function () {
    jest.clearAllMocks();
  });
  afterAll(function () {
    jest.resetAllMocks();
  });
  it('should return closest point if it is a finite number and step is 0', function () {
    mGetClosestPoint.mockReturnValue(10);
    var actual = (0, _ensureValuePrecision.default)(1, _objectSpread(_objectSpread({}, baseProps), {}, {
      step: 0
    }));
    expect(actual).toEqual(10);
    expect(mGetClosestPoint.mock.calls).toEqual([[1, _objectSpread(_objectSpread({}, baseProps), {}, {
      step: 0
    })], [1, _objectSpread(_objectSpread({}, baseProps), {}, {
      step: 0
    })]]);
  });
  it('should return 0 if closest point is NOT a finite number and step is 0', function () {
    mGetClosestPoint.mockReturnValue(100 / 0);
    var actual = (0, _ensureValuePrecision.default)(1, _objectSpread(_objectSpread({}, baseProps), {}, {
      step: 0
    }));
    expect(actual).toEqual(0);
    expect(mGetClosestPoint.mock.calls).toEqual([[1, _objectSpread(_objectSpread({}, baseProps), {}, {
      step: 0
    })]]);
  });
  it('should return closest point number with precision', function () {
    mGetClosestPoint.mockReturnValue(10);
    mGetPrecision.mockReturnValueOnce(2);
    var actual = (0, _ensureValuePrecision.default)(1, _objectSpread(_objectSpread({}, baseProps), {}, {
      step: 10
    }));
    expect(actual).toEqual(10);
    expect(mGetClosestPoint.mock.calls).toEqual([[1, _objectSpread(_objectSpread({}, baseProps), {}, {
      step: 10
    })], [1, _objectSpread(_objectSpread({}, baseProps), {}, {
      step: 10
    })]]);
    expect(mGetPrecision).toBeCalledWith(10);
  });
});