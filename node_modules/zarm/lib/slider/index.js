"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _react = _interopRequireWildcard(require("react"));

var _classnames3 = _interopRequireDefault(require("classnames"));

var _events = _interopRequireDefault(require("../utils/events"));

var _drag = _interopRequireDefault(require("../drag"));

var _tooltip = _interopRequireDefault(require("../tooltip"));

var _ensureValuePrecision = _interopRequireDefault(require("./utils/ensureValuePrecision"));

var _getValue = _interopRequireDefault(require("./utils/getValue"));

var _preventDefault = _interopRequireDefault(require("./utils/preventDefault"));

var _validate = require("../utils/validate");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var Slider = /*#__PURE__*/function (_PureComponent) {
  (0, _inherits2.default)(Slider, _PureComponent);

  var _super = _createSuper(Slider);

  function Slider() {
    var _this;

    (0, _classCallCheck2.default)(this, Slider);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.line = null;
    _this.container = null;
    _this.offsetStart = 0;
    _this.state = {
      value: (0, _getValue.default)(_this.props, 0),
      prevPropsValue: (0, _getValue.default)(_this.props, 0),
      tooltip: false
    };

    _this.init = function () {
      var value = _this.state.value;
      _this.offsetStart = _this.getOffsetByValue(value);
    };

    _this.getValueByOffset = function (offset) {
      var _this$props = _this.props,
          _this$props$min = _this$props.min,
          min = _this$props$min === void 0 ? 0 : _this$props$min,
          max = _this$props.max,
          vertical = _this$props.vertical;

      var percent = offset / _this.getMaxOffset();

      var value = vertical ? (1 - percent) * (max - min) + min : Math.round(min + (max - min) * percent);
      return (0, _ensureValuePrecision.default)(value, _this.props);
    };

    _this.getOffsetPercent = function (value) {
      var _this$props2 = _this.props,
          min = _this$props2.min,
          max = _this$props2.max;
      var ratio = (value - min) / (max - min);
      return "".concat(ratio * 100, "%");
    };

    _this.getOffsetByValue = function (value) {
      var _this$props3 = _this.props,
          vertical = _this$props3.vertical,
          min = _this$props3.min,
          max = _this$props3.max;

      var maxOffset = _this.getMaxOffset();

      var range = max - min;
      return vertical ? maxOffset * ((max - value) / range) : maxOffset * ((value - min) / range);
    };

    _this.getMaxOffset = function () {
      if (_this.line) {
        if (_this.props.vertical) {
          return _this.line.offsetHeight;
        }

        return _this.line.offsetWidth;
      }

      return 0;
    };

    _this.handleDragStart = function () {
      var disabled = _this.props.disabled;

      if (disabled) {
        return;
      }

      _this.setState({
        tooltip: true
      });
    };

    _this.handleDragMove = function (event, dragState) {
      var _this$props4 = _this.props,
          disabled = _this$props4.disabled,
          vertical = _this$props4.vertical;

      if (disabled) {
        return false;
      }

      _tooltip.default.updateAll();

      event.stopPropagation();

      if (!_events.default.supportsPassiveEvents) {
        event.preventDefault();
      }

      var _ref = dragState,
          offsetX = _ref.offsetX,
          offsetY = _ref.offsetY;
      var offset = vertical ? _this.offsetStart + (offsetY || 0) : (_this.offsetStart || 0) + (offsetX || 0);

      if (offset < 0) {
        offset = 0;

        var newValue = _this.getValueByOffset(offset);

        _this.setState({
          value: newValue
        });

        return false;
      }

      var maxOffset = _this.getMaxOffset();

      if (offset > maxOffset) {
        offset = maxOffset;

        var _newValue = _this.getValueByOffset(offset);

        _this.setState({
          value: _newValue
        });

        return false;
      }

      var value = _this.getValueByOffset(offset);

      _this.setState({
        value: value
      });

      return true;
    };

    _this.handleDragEnd = function (_event, dragState) {
      var _this$props5 = _this.props,
          vertical = _this$props5.vertical,
          onChange = _this$props5.onChange;
      var offsetX = dragState.offsetX,
          offsetY = dragState.offsetY;

      _this.setState({
        tooltip: false
      });

      if (vertical) {
        if (Number.isNaN(offsetY)) {
          return;
        }
      } else if (Number.isNaN(offsetX)) {
        return;
      }

      _this.offsetStart += vertical ? offsetY : offsetX;

      if (typeof onChange === 'function') {
        onChange(_this.state.value);
      }
    };

    _this.handleRef = function (ref) {
      var nextContainer = ref;
      var prevContainer = _this.container;

      if (prevContainer !== nextContainer) {
        if (prevContainer) {
          prevContainer.removeEventListener('touchstart', _preventDefault.default);
        }

        if (nextContainer) {
          nextContainer.addEventListener('touchstart', _preventDefault.default, {
            passive: false
          });
        }
      }

      _this.container = nextContainer;
    };

    _this.renderMarkInfo = function () {
      var _this$props6 = _this.props,
          prefixCls = _this$props6.prefixCls,
          showMark = _this$props6.showMark,
          _this$props6$marks = _this$props6.marks,
          marks = _this$props6$marks === void 0 ? {} : _this$props6$marks,
          vertical = _this$props6.vertical;
      var value = _this.state.value;
      var isEmptyMarks = !(0, _validate.isObject)(marks) || JSON.stringify(marks) === '{}';

      if (showMark && isEmptyMarks) {
        // TODO: i18n
        console.error('请输入有效的 marks');
        return null;
      } // 判断是否为空对象


      if (isEmptyMarks) {
        return null;
      }

      var markKeys = Object.keys(marks || {});
      var markElement = markKeys.map(function (item) {
        var markStyle = (0, _defineProperty2.default)({}, vertical ? 'bottom' : 'left', "".concat(item, "%"));
        return /*#__PURE__*/_react.default.createElement("span", {
          key: item,
          className: "".concat(prefixCls, "__mark"),
          style: markStyle
        }, marks[+item]);
      });

      var marksElement = showMark && /*#__PURE__*/_react.default.createElement("div", {
        className: "".concat(prefixCls, "__marks")
      }, markElement);

      var lineDot = markKeys.map(function (item) {
        var dotStyle = (0, _classnames3.default)("".concat(prefixCls, "__line__dot"), (0, _defineProperty2.default)({}, "".concat(prefixCls, "__line__dot--active"), value >= +item));
        var markStyle = (0, _defineProperty2.default)({}, vertical ? 'bottom' : 'left', "".concat(item, "%"));
        return /*#__PURE__*/_react.default.createElement("span", {
          key: item,
          className: dotStyle,
          style: markStyle
        });
      });
      return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, lineDot, marksElement);
    };

    return _this;
  }

  (0, _createClass2.default)(Slider, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.init();

      _events.default.on(window, 'resize', this.init);
    }
  }, {
    key: "render",
    value: function render() {
      var _classnames2,
          _this2 = this;

      var _this$props7 = this.props,
          prefixCls = _this$props7.prefixCls,
          className = _this$props7.className,
          disabled = _this$props7.disabled,
          min = _this$props7.min,
          max = _this$props7.max,
          vertical = _this$props7.vertical,
          showMark = _this$props7.showMark;
      var _this$state = this.state,
          value = _this$state.value,
          tooltip = _this$state.tooltip;
      var offset = this.getOffsetPercent(value);
      var cls = (0, _classnames3.default)(prefixCls, className, (_classnames2 = {}, (0, _defineProperty2.default)(_classnames2, "".concat(prefixCls, "--disabled"), disabled), (0, _defineProperty2.default)(_classnames2, "".concat(prefixCls, "--vertical"), vertical), (0, _defineProperty2.default)(_classnames2, "".concat(prefixCls, "--marked"), showMark), _classnames2));
      var handleStyle = (0, _defineProperty2.default)({}, vertical ? 'bottom' : 'left', offset || 0);
      var lineBg = (0, _defineProperty2.default)({}, vertical ? 'height' : 'width', offset || 0);
      return /*#__PURE__*/_react.default.createElement("div", {
        className: cls,
        ref: this.handleRef
      }, /*#__PURE__*/_react.default.createElement("div", {
        className: "".concat(prefixCls, "__content")
      }, /*#__PURE__*/_react.default.createElement("div", {
        className: "".concat(prefixCls, "__line"),
        ref: function ref(ele) {
          _this2.line = ele;
        }
      }, /*#__PURE__*/_react.default.createElement("div", {
        className: "".concat(prefixCls, "__line__bg"),
        style: lineBg
      }), this.renderMarkInfo()), /*#__PURE__*/_react.default.createElement(_drag.default, {
        onDragStart: this.handleDragStart,
        onDragMove: this.handleDragMove,
        onDragEnd: this.handleDragEnd
      }, /*#__PURE__*/_react.default.createElement("div", {
        className: "".concat(prefixCls, "__handle"),
        role: "slider",
        "aria-valuemin": min,
        "aria-valuemax": max,
        "aria-valuenow": value,
        "aria-orientation": vertical ? 'vertical' : 'horizontal',
        style: handleStyle
      }, /*#__PURE__*/_react.default.createElement(_tooltip.default, {
        trigger: "manual",
        arrowPointAtCenter: true,
        visible: tooltip,
        content: value
      }, /*#__PURE__*/_react.default.createElement("div", {
        className: "".concat(prefixCls, "__handle__shadow")
      }))))));
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(nextProps, prevState) {
      var value = nextProps.value;

      if (typeof value !== 'undefined' && value !== prevState.prevPropsValue) {
        return _objectSpread(_objectSpread({}, prevState), {}, {
          value: value,
          prevPropsValue: value
        });
      }

      return null;
    }
    /**
     * 初始化
     */

  }]);
  return Slider;
}(_react.PureComponent);

exports.default = Slider;
Slider.defaultProps = {
  prefixCls: 'za-slider',
  disabled: false,
  showMark: false,
  vertical: false,
  step: 1,
  min: 0,
  max: 100,
  marks: {}
};