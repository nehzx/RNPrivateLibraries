"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _react = _interopRequireDefault(require("react"));

var _enzyme = require("enzyme");

var _enzymeToJson = _interopRequireDefault(require("enzyme-to-json"));

var _index = _interopRequireDefault(require("../index"));

describe('Switch', function () {
  afterEach(function () {
    jest.restoreAllMocks();
  });
  describe('#getChecked', function () {
    it('should initialize state with props.checked', function () {
      var wrapper1 = (0, _enzyme.shallow)( /*#__PURE__*/_react.default.createElement(_index.default, {
        checked: true
      }));
      expect(wrapper1.state('checked')).toBeTruthy();
      var wrapper2 = (0, _enzyme.shallow)( /*#__PURE__*/_react.default.createElement(_index.default, {
        checked: false
      }));
      expect(wrapper2.state('checked')).toBeFalsy();
    });
    it('should initialize state with props.defaultChecked', function () {
      var wrapper1 = (0, _enzyme.shallow)( /*#__PURE__*/_react.default.createElement(_index.default, {
        defaultChecked: true
      }));
      expect(wrapper1.state('checked')).toBeTruthy();
      var wrapper2 = (0, _enzyme.shallow)( /*#__PURE__*/_react.default.createElement(_index.default, {
        defaultChecked: false
      }));
      expect(wrapper2.state('checked')).toBeFalsy();
    });
    it('should initialize state with default value', function () {
      var wrapper1 = (0, _enzyme.shallow)( /*#__PURE__*/_react.default.createElement(_index.default, null));
      expect(wrapper1.state('checked')).toBeFalsy();
    });
  });
  describe('static getDerivedStateFromProps', function () {
    it('should get derived state from props.checked', function () {
      expect(_index.default.getDerivedStateFromProps({
        checked: false
      })).toEqual({
        checked: false
      });
      expect(_index.default.getDerivedStateFromProps({
        checked: true
      })).toEqual({
        checked: true
      });
    });
  });
  describe('snapshot', function () {
    it('renders correctly', function () {
      var wrapper = (0, _enzyme.render)( /*#__PURE__*/_react.default.createElement(_index.default, null));
      expect((0, _enzymeToJson.default)(wrapper)).toMatchSnapshot();
    });
    it('defaultChecked', function () {
      var wrapper = (0, _enzyme.render)( /*#__PURE__*/_react.default.createElement(_index.default, {
        defaultChecked: true
      }));
      expect((0, _enzymeToJson.default)(wrapper)).toMatchSnapshot();
    });
  });
  describe('behaviour', function () {
    it('should switch on if defaultChecked is true', function () {
      var wrapper = (0, _enzyme.shallow)( /*#__PURE__*/_react.default.createElement(_index.default, {
        defaultChecked: true
      }));
      var inputWrapper = wrapper.find('input');
      expect(inputWrapper.prop('disabled')).toBeFalsy();
      expect(inputWrapper.prop('value')).toEqual('on');
      expect(inputWrapper.prop('checked')).toBeTruthy();
    });
    it('should switch off and disabled', function () {
      var wrapper = (0, _enzyme.shallow)( /*#__PURE__*/_react.default.createElement(_index.default, {
        disabled: true
      }));
      var inputWrapper = wrapper.find('input');
      expect(inputWrapper.prop('disabled')).toBeTruthy();
      expect(inputWrapper.prop('value')).toEqual('off');
      expect(inputWrapper.prop('checked')).toBeFalsy();
    });
    it('should switch on and disabled', function () {
      var wrapper = (0, _enzyme.shallow)( /*#__PURE__*/_react.default.createElement(_index.default, {
        defaultChecked: true,
        disabled: true
      }));
      var inputWrapper = wrapper.find('input');
      expect(inputWrapper.prop('disabled')).toBeTruthy();
      expect(inputWrapper.prop('value')).toEqual('on');
      expect(inputWrapper.prop('checked')).toBeTruthy();
    });
    it('should handle change event without updating state', function () {
      var onChange = jest.fn();
      var wrapper = (0, _enzyme.shallow)( /*#__PURE__*/_react.default.createElement(_index.default, {
        checked: true,
        onChange: onChange
      }));
      expect(wrapper.state('checked')).toBeTruthy();
      wrapper.find('input').simulate('change');
      expect(onChange).toBeCalledWith(false);
      expect(wrapper.state('checked')).toBeTruthy();
      expect(wrapper.find('input').prop('value')).toEqual('on');
    });
    it('should handle change event and update state if props.checked is not existed', function () {
      var onChange = jest.fn();
      var wrapper = (0, _enzyme.shallow)( /*#__PURE__*/_react.default.createElement(_index.default, {
        onChange: onChange
      }));
      expect(wrapper.state('checked')).toBeFalsy();
      expect(wrapper.find('input').prop('value')).toEqual('off');
      wrapper.find('input').simulate('change');
      expect(onChange).toBeCalledWith(true);
      expect(wrapper.state('checked')).toBeTruthy();
      expect(wrapper.find('input').prop('value')).toEqual('on');
    });
    it('should do nothing if switch is disabled', function () {
      var onChange = jest.fn();
      var wrapper = (0, _enzyme.shallow)( /*#__PURE__*/_react.default.createElement(_index.default, {
        disabled: true,
        onChange: onChange
      }));
      expect(wrapper.hasClass('za-switch--disabled')).toBeTruthy();
      expect(wrapper.find('input').prop('disabled')).toBeTruthy();
      wrapper.find('input').simulate('change');
      expect(onChange).not.toBeCalled();
    });
    it('should get derived state from nextProps', function () {
      var getDerivedStateFromPropsSpy = jest.spyOn(_index.default, 'getDerivedStateFromProps');
      var wrapper = (0, _enzyme.shallow)( /*#__PURE__*/_react.default.createElement(_index.default, null));
      expect(wrapper.state('checked')).toBeFalsy();
      expect(getDerivedStateFromPropsSpy).toBeCalledWith({
        prefixCls: 'za-switch',
        disabled: false
      }, {
        checked: false
      });
      wrapper.setProps({
        checked: true
      });
      expect(wrapper.state('checked')).toBeTruthy();
      expect(getDerivedStateFromPropsSpy).toBeCalledWith({
        prefixCls: 'za-switch',
        disabled: false,
        checked: true
      }, {
        checked: false
      });
    });
    it('receive new checked when disabled', function () {
      var onChange = jest.fn();
      var wrapper = (0, _enzyme.shallow)( /*#__PURE__*/_react.default.createElement(_index.default, {
        disabled: true,
        onChange: onChange
      }));
      wrapper.find('input').simulate('change', {
        target: {
          checked: true
        }
      });
      expect(onChange).not.toBeCalled();
    });
  });
});