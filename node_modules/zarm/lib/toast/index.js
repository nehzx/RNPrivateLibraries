"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

var _react = _interopRequireWildcard(require("react"));

var _reactDom = _interopRequireDefault(require("react-dom"));

var _popup = _interopRequireDefault(require("../popup"));

var _dom = require("../utils/dom");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var contentIsToastProps = function contentIsToastProps(content) {
  return !!content && (0, _typeof2.default)(content) === 'object' && 'content' in content;
};

var Toast = /*#__PURE__*/function (_Component) {
  (0, _inherits2.default)(Toast, _Component);

  var _super = _createSuper(Toast);

  function Toast() {
    var _this;

    (0, _classCallCheck2.default)(this, Toast);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.timer = 0;
    _this.state = {
      visible: _this.props.visible
    };

    _this.afterClose = function () {
      var afterClose = _this.props.afterClose;

      if (Toast.zarmToast) {
        _reactDom.default.unmountComponentAtNode(Toast.zarmToast);

        Toast.toastContainer.removeChild(Toast.zarmToast);
        Toast.zarmToast = null;
      }

      if (typeof afterClose === 'function') {
        afterClose();
      }
    };

    _this._hide = function () {
      _this.setState({
        visible: false
      });
    };

    return _this;
  }

  (0, _createClass2.default)(Toast, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.autoClose();
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      var visible = this.props.visible;

      if (prevProps.visible !== visible) {
        if (visible === true) {
          // eslint-disable-next-line
          this.setState({
            visible: true
          });
          this.autoClose();
        } else {
          clearTimeout(this.timer);

          this._hide();
        }
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      clearTimeout(this.timer);
    }
  }, {
    key: "autoClose",
    value: function autoClose() {
      var _this2 = this;

      var stayTime = this.props.stayTime;

      if (stayTime > 0) {
        this.timer = window.setTimeout(function () {
          _this2._hide();

          clearTimeout(_this2.timer);
        }, stayTime);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          prefixCls = _this$props.prefixCls,
          className = _this$props.className,
          stayTime = _this$props.stayTime,
          content = _this$props.content,
          others = (0, _objectWithoutProperties2.default)(_this$props, ["prefixCls", "className", "stayTime", "content"]);
      var visible = this.state.visible;
      return /*#__PURE__*/_react.default.createElement(_popup.default, (0, _extends2.default)({
        direction: "center",
        maskType: "transparent",
        width: "70%"
      }, others, {
        visible: visible,
        afterClose: this.afterClose
      }), /*#__PURE__*/_react.default.createElement("div", {
        className: prefixCls
      }, /*#__PURE__*/_react.default.createElement("div", {
        className: "".concat(prefixCls, "__container")
      }, content)));
    }
  }]);
  return Toast;
}(_react.Component);

exports.default = Toast;
Toast.hideHelper = void 0;
Toast.zarmToast = void 0;
Toast.toastContainer = void 0;

Toast.show = function (content) {
  Toast.unmountNode();

  if (!Toast.zarmToast) {
    Toast.zarmToast = document.createElement('div');
    Toast.zarmToast.classList.add('za-toast-container');

    if (contentIsToastProps(content) && content.className) {
      Toast.zarmToast.classList.add(content.className);
    }

    Toast.toastContainer = contentIsToastProps(content) && content.mountContainer ? (0, _dom.getMountContainer)(content.mountContainer) : (0, _dom.getMountContainer)();
    Toast.toastContainer.appendChild(Toast.zarmToast);
  }

  if (Toast.zarmToast) {
    var props = contentIsToastProps(content) ? _objectSpread(_objectSpread(_objectSpread({}, Toast.defaultProps), content), {}, {
      mountContainer: false,
      visible: true
    }) : _objectSpread(_objectSpread({}, Toast.defaultProps), {}, {
      visible: true,
      mountContainer: false,
      content: content
    });

    Toast.hideHelper = function () {
      _reactDom.default.render( /*#__PURE__*/_react.default.createElement(Toast, (0, _extends2.default)({}, props, {
        visible: false
      })), Toast.zarmToast);
    };

    _reactDom.default.render( /*#__PURE__*/_react.default.createElement(Toast, props), Toast.zarmToast);
  }
};

Toast.hide = function () {
  if (Toast.zarmToast) {
    Toast.hideHelper();
  }
};

Toast.unmountNode = function () {
  var zarmToast = Toast.zarmToast;

  if (zarmToast) {
    _reactDom.default.render( /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null), zarmToast);

    Toast.toastContainer.removeChild(zarmToast);
    Toast.zarmToast = null;
  }
};

Toast.defaultProps = {
  prefixCls: 'za-toast',
  visible: false,
  stayTime: 3000,
  mask: false
};