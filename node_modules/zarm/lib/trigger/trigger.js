"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _react = _interopRequireWildcard(require("react"));

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var Trigger = /*#__PURE__*/function (_Component) {
  (0, _inherits2.default)(Trigger, _Component);

  var _super = _createSuper(Trigger);

  function Trigger() {
    var _this;

    (0, _classCallCheck2.default)(this, Trigger);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.state = {};
    return _this;
  }

  (0, _createClass2.default)(Trigger, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      if (Trigger.count === 0) {
        document.body.addEventListener('keydown', Trigger.onKeydown);
      }

      Trigger.count += 1;
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      var onClose = this.props.onClose;
      var index = Trigger.instanceList.findIndex(function (c) {
        return c === onClose;
      });

      if (index > -1) {
        Trigger.instanceList.splice(index, 1);
      }

      Trigger.count -= 1;

      if (Trigger.count === 0) {
        document.body.removeEventListener('keydown', Trigger.onKeydown);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var children = this.props.children;
      return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, children);
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(nextProps) {
      var visible = nextProps.visible,
          onClose = nextProps.onClose,
          disabled = nextProps.disabled;
      onClose && (onClose.disabled = disabled);

      if (visible === true && typeof onClose === 'function') {
        if (!Trigger.instanceList.includes(onClose)) {
          Trigger.instanceList.push(onClose);
        }
      } else {
        var index = Trigger.instanceList.findIndex(function (c) {
          return c === onClose;
        });

        if (index > -1) {
          Trigger.instanceList.splice(index, 1);
        }
      }

      return null;
    }
  }, {
    key: "onKeydown",
    value: function onKeydown(e) {
      if (e.keyCode === 27) {
        var lens = Trigger.instanceList.length;
        var last = Trigger.instanceList[lens - 1];

        if (last) {
          if (last.disabled) {
            return;
          }

          last();
        }
      }
    }
  }]);
  return Trigger;
}(_react.Component);

Trigger.defaultProps = {
  disabled: false
};
Trigger.count = 0;
Trigger.instanceList = [];
var _default = Trigger;
exports.default = _default;