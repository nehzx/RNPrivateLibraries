import { PureComponent, ChangeEvent, InputHTMLAttributes, HTMLAttributes, ButtonHTMLAttributes } from 'react';
import { BaseCheckboxProps } from './PropsType';
import CheckboxGroup from './CheckboxGroup';
declare type CheckboxSpanProps = Omit<InputHTMLAttributes<HTMLInputElement>, 'type' | 'defaultChecked' | 'checked' | 'value' | 'onChange'>;
declare type CheckboxCellProps = Omit<HTMLAttributes<HTMLDivElement>, 'type' | 'defaultChecked' | 'checked' | 'value' | 'onChange'>;
declare type CheckboxButtonProps = Omit<ButtonHTMLAttributes<HTMLButtonElement>, 'type' | 'defaultChecked' | 'checked' | 'value' | 'onChange'>;
export declare type CheckboxProps = Partial<CheckboxSpanProps & CheckboxCellProps & CheckboxButtonProps> & BaseCheckboxProps & {
    prefixCls?: string;
};
export interface CheckboxStates {
    checked?: boolean;
    prevChecked?: boolean;
}
export default class Checkbox extends PureComponent<CheckboxProps, CheckboxStates> {
    static Group: typeof CheckboxGroup;
    static displayName: string;
    static defaultProps: CheckboxProps;
    state: CheckboxStates;
    static getDerivedStateFromProps(nextProps: CheckboxProps, state: CheckboxStates): {
        checked: boolean | undefined;
        prevChecked: boolean | undefined;
    } | null;
    onValueChange: (e: ChangeEvent<HTMLInputElement>) => void;
    render(): JSX.Element;
}
export {};
