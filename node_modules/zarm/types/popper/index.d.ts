import React, { HTMLAttributes } from 'react';
import BasePopperProps, { PopperPlacement } from './PropsType';
export interface PopperProps extends BasePopperProps, HTMLAttributes<HTMLDivElement> {
    prefixCls?: string;
    className?: string;
    children?: React.ReactNode;
}
interface PopperStates {
    show: boolean;
    direction: PopperPlacement;
    arrowRef: any;
    mounted?: boolean;
    isPending: boolean;
    animationState: 'leave' | 'enter';
}
declare class Popper extends React.Component<PopperProps, PopperStates> {
    static update(): void;
    private popper;
    private popperNode;
    private reference;
    private arrowRef;
    private enterTimer;
    private leaveTimer;
    static defaultProps: PopperProps;
    static getDerivedStateFromProps(props: PopperProps, state: PopperStates): {
        show: boolean | undefined;
        direction: PopperPlacement;
        arrowRef: any;
        mounted?: boolean | undefined;
        isPending: boolean;
        animationState: "enter" | "leave";
    } | null;
    state: PopperStates;
    componentDidUpdate(prevProps: PopperProps): void;
    componentWillUnmount(): void;
    getPopperDomNode(): HTMLDivElement;
    getTransitionName(animationType: any, animationState: any): string | undefined;
    handleOpen: () => void;
    animationEnd: (e: any) => void;
    handlePopperUpdate: (data: any) => void;
    handleClose: () => void;
    handleClick: (event: any) => void;
    handleEnter: (event: any) => void;
    handleLeave: (event: any) => void;
    mountContainer(): HTMLElement;
    enter(): void;
    leave(): void;
    destroy(): void;
    render(): JSX.Element;
}
export default Popper;
