import { PureComponent, ReactNode } from 'react';
import { REFRESH_STATE, LOAD_STATE, PropsType } from './PropsType';
export interface PullProps extends PropsType {
    prefixCls?: string;
    className?: string;
}
export default class Pull extends PureComponent<PullProps, any> {
    private pull;
    private wrap;
    private throttledScroll;
    private wrapTouchstartY;
    private mounted;
    static defaultProps: PullProps;
    constructor(props: any);
    componentDidMount(): void;
    static getDerivedStateFromProps(nextProps: any, state: any): {
        loadState: any;
        prevLoad: any;
        refreshState?: undefined;
        prevRefresh?: undefined;
    } | {
        refreshState: any;
        prevRefresh: any;
        loadState?: undefined;
        prevLoad?: undefined;
    } | null;
    componentDidUpdate(prevProps: any): void;
    componentWillUnmount(): void;
    get scrollContainer(): HTMLElement | Window;
    get scrollTop(): number;
    getScrollContainer: () => HTMLElement | Window;
    wrapTouchstart: (event: any) => void;
    wrapTouchmove: (event: any) => void;
    wrapTouchEnd: () => void;
    addEvent: () => void;
    removeEvent: () => void;
    onScroll: () => void;
    onDragMove: (event: any, { offsetY }: {
        offsetY: any;
    }) => boolean;
    onDragEnd: (_event: any, { offsetY }: {
        offsetY: any;
    }) => void;
    /**
     * 执行动画
     * @param  {number} options.offsetY  偏移距离
     * @param  {number} options.animationDuration 动画执行时间
     */
    doTransition: ({ offsetY, animationDuration }: {
        offsetY: any;
        animationDuration: any;
    }) => void;
    /**
     * 执行刷新动作
     * @param  {REFRESH_STATE} refreshState 刷新状态
     * @param  {number}        offsetY      偏移距离
     */
    doRefreshAction: (refreshState: REFRESH_STATE, offsetY?: number | undefined) => void;
    /**
     * 执行加载动作
     * @param  {LOAD_STATE} loadState 加载状态
     */
    doLoadAction: (loadState: LOAD_STATE) => void;
    /**
     * 渲染刷新节点
     */
    renderRefresh: () => ReactNode;
    /**
     * 渲染加载节点
     */
    renderLoad: () => ReactNode;
    render(): JSX.Element;
}
