import { PureComponent, CompositionEvent } from 'react';
import type { FormEvent } from 'react';
import type BaseSearchBarProps from './PropsType';
export interface SearchBarProps extends BaseSearchBarProps {
    prefixCls?: string;
    className?: string;
}
export interface SearchBarState {
    focus: boolean;
    value?: string;
    isOnComposition: boolean;
    preValue?: string;
}
export default class SearchBar extends PureComponent<SearchBarProps, SearchBarState> {
    private cancelRef;
    private cancelOuterWidth;
    private inputRef;
    static defaultProps: SearchBarProps;
    constructor(props: SearchBarProps);
    componentDidMount(): void;
    static getDerivedStateFromProps(nextProps: SearchBarProps, state: SearchBarState): {
        value: string | undefined;
        preValue: string | undefined;
    } | null;
    componentDidUpdate(prevProps: SearchBarProps): void;
    onFocus(): void;
    onChange(value?: string): void;
    onBlur(): void;
    onClear(): void;
    onCancel(): void;
    onSubmit(e: FormEvent): void;
    handleComposition(e: CompositionEvent<HTMLInputElement>): void;
    calculatePositon(props: SearchBarProps): void;
    focusAnim(): void;
    blurAnim(): void;
    focus(): void;
    renderCancel(): JSX.Element;
    render(): JSX.Element;
}
