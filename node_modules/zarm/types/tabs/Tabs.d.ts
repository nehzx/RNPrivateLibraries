import { PureComponent, ReactElement } from 'react';
import PropsType from './PropsType';
import TabPanel, { TabPanelProps } from './TabPanel';
import Carousel from '../carousel';
export interface TabsProps extends PropsType {
    prefixCls?: string;
    className?: string;
}
interface TabsStates {
    value: number;
    prevValue?: number;
    itemWidth: number;
}
export default class Tabs extends PureComponent<TabsProps, TabsStates> {
    static Panel: typeof TabPanel;
    private carousel?;
    private layout?;
    static defaultProps: {
        prefixCls: string;
        disabled: boolean;
        swipeable: boolean;
        scrollable: boolean;
        direction: string;
    };
    constructor(props: Tabs['props']);
    static getDerivedStateFromProps(nextProps: Tabs['props'], state: Tabs['state']): {
        value: number | undefined;
        prevValue: number | undefined;
    } | null;
    componentDidMount(): void;
    componentDidUpdate(prevstate: any): void;
    get isVertical(): boolean;
    get currentValue(): number;
    setTablistRef: (ref: HTMLUListElement) => void;
    setCarouselRef: (ref: Carousel) => void;
    onTabChange: (value: number) => void;
    onTabClick: (tab: ReactElement<TabPanel['props'], typeof TabPanel>, index: number) => void;
    renderTabs: (tab: ReactElement<TabPanelProps, typeof TabPanel>, index: number) => JSX.Element;
    /**
     * @description: 计算 line 大小和位置
     */
    caclLineSizePos: () => {
        height: string;
        width?: undefined;
        transform: any;
        WebkitTransform: any;
        MozTransform: any;
    } | {
        width: string;
        height?: undefined;
        transform: any;
        WebkitTransform: any;
        MozTransform: any;
    };
    /**
     * @description: 计算滚动条移动位置
     */
    calculateScorllLeftLocation: () => false | undefined;
    calculateLineWidth: () => void;
    getComputedStyle: (el: any, prop: any) => string;
    render(): JSX.Element;
}
export {};
